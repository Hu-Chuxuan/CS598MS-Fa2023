[
 {
  "id": 20493,
  "query": "Ironically, I bought To Kill a Mockingbird  (1962) but haven't watched since I purchased it. Thanks for the suggestion. I have not seen Woodlawn  (2015) I may have to watch that one as well.",
  "history": [
   "I Can Only Imagine (2018)",
   "We Are Marshall (2006)",
   "The Judge  (2014)"
  ],
  "groundtruth": [
   "To Kill a Mockingbird  (1962)",
   "Woodlawn  (2015)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle = 'Woodlawn' AND startYear = 2015\nUNION\nSELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle = 'To Kill a Mockingbird' AND startYear = 1962\nUNION\nSELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle IN ('I Can Only Imagine', 'We Are Marshall', 'The Judge')\nORDER BY averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nIronically, I bought To Kill a Mockingbird  (1962) but haven't watched since I purchased it. Thanks for the suggestion. I have not seen Woodlawn  (2015) I may have to watch that one as well.\nUser Preference History: \n['I Can Only Imagine (2018)', 'We Are Marshall (2006)', 'The Judge  (2014)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle = 'Woodlawn' AND startYear = 2015\nUNION\nSELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle = 'To Kill a Mockingbird' AND startYear = 1962\nUNION\nSELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle IN ('I Can Only Imagine', 'We Are Marshall', 'The Judge')\nORDER BY averageRating DESC\nLIMIT 5",
  "execution_result": [
   "The Judge",
   "To Kill a Mockingbird",
   "The Judge",
   "The Judge",
   "The Judge"
  ]
 },
 {
  "id": 21666,
  "query": "I have never seen Natural Born Killers but it sounds good. I heard of Reefer Madness but never saw it. I will have to check it out'",
  "history": [
   "Anchorman: The Legend of Ron Burgundy (2004)"
  ],
  "groundtruth": [
   "Natural Born Killers (1994)",
   "Reefer Madness  (2005)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle IN ('Natural Born Killers', 'Reefer Madness')\nORDER BY averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI have never seen Natural Born Killers but it sounds good. I heard of Reefer Madness but never saw it. I will have to check it out'\nUser Preference History: \n['Anchorman: The Legend of Ron Burgundy (2004)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle IN ('Natural Born Killers', 'Reefer Madness')\nORDER BY averageRating DESC\nLIMIT 5",
  "execution_result": [
   "Reefer Madness",
   "Natural Born Killers",
   "Reefer Madness"
  ]
 },
 {
  "id": 624,
  "query": "You know, I have seen the sequel and never the original. i did like Caddyshack II (1988) so I bet I will like it",
  "history": [
   "Groundhog Day  (1993)",
   "Bill & Ted's Bogus Journey (1991)",
   "Weekend at Bernie's (1989)",
   "Caddyshack II (1988)"
  ],
  "groundtruth": [
   "Bachelor Party Vegas (2006)",
   "Caddyshack (1980)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.titleType = 'movie'\nAND title_basics.originalTitle = 'Caddyshack'\nAND startYear < 1988\nORDER BY averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nYou know, I have seen the sequel and never the original. i did like Caddyshack II (1988) so I bet I will like it\nUser Preference History: \n['Groundhog Day  (1993)', \"Bill & Ted's Bogus Journey (1991)\", \"Weekend at Bernie's (1989)\", 'Caddyshack II (1988)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.titleType = 'movie'\nAND title_basics.originalTitle = 'Caddyshack'\nAND startYear < 1988\nORDER BY averageRating DESC\nLIMIT 5",
  "execution_result": [
   "Caddyshack"
  ]
 },
 {
  "id": 959,
  "query": "I did see Kiss the Girls  (1997) when it first came out but that was so long ago! I did not see High Crimes (2002) though. what is that about?",
  "history": [
   "Kiss the Girls  (1997)",
   "Frequency  (2000)",
   "The Prestige  (2006)",
   "A Perfect Murder (1998)",
   "Double Jeopardy  (1999)",
   "Primal Fear  (1996)"
  ],
  "groundtruth": [
   "High Crimes (2002)"
  ],
  "output": "SELECT tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating, tr.numVotes\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.primaryTitle = 'High Crimes'\nAND (tb.startYear = '2002' OR tb.startYear = '2001' OR tb.startYear = '2003')\nAND tb.titleType = 'movie';",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI did see Kiss the Girls  (1997) when it first came out but that was so long ago! I did not see High Crimes (2002) though. what is that about?\nUser Preference History: \n['Kiss the Girls  (1997)', 'Frequency  (2000)', 'The Prestige  (2006)', 'A Perfect Murder (1998)', 'Double Jeopardy  (1999)', 'Primal Fear  (1996)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating, tr.numVotes\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.primaryTitle = 'High Crimes'\nAND (tb.startYear = '2002' OR tb.startYear = '2001' OR tb.startYear = '2003')\nAND tb.titleType = 'movie'",
  "execution_result": [
   "High Crimes"
  ]
 },
 {
  "id": 1375,
  "query": "I have never seen that one, I know it's with Mel Gibson, but that's all I know about it honestly",
  "history": [
   "The Shawshank Redemption (1994)",
   "American History X (1998)",
   "The Green Mile  (1999)",
   "Changeling  (2008)",
   "The Help  (2011)",
   "A Beautiful Mind  (2001)"
  ],
  "groundtruth": [
   "Braveheart (1995)"
  ],
  "output": "SELECT tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating \nFROM title_basics tb \nJOIN title_ratings tr ON tb.tconst = tr.tconst \nJOIN title_principals tp ON tb.tconst = tp.tconst \nJOIN name_basics nb ON tp.nconst = nb.nconst\nWHERE nb.primaryName = 'Mel Gibson' \nAND tb.titleType = 'movie'\nAND tr.numVotes > 1000\nAND tb.primaryTitle NOT IN ('The Shawshank Redemption (1994)', 'American History X (1998)', 'The Green Mile  (1999)', 'Changeling  (2008)', 'The Help  (2011)', 'A Beautiful Mind  (2001)')\nORDER BY tr.averageRating DESC, tb.startYear DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI have never seen that one, I know it's with Mel Gibson, but that's all I know about it honestly\nUser Preference History: \n['The Shawshank Redemption (1994)', 'American History X (1998)', 'The Green Mile  (1999)', 'Changeling  (2008)', 'The Help  (2011)', 'A Beautiful Mind  (2001)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating \nFROM title_basics tb \nJOIN title_ratings tr ON tb.tconst = tr.tconst \nJOIN title_principals tp ON tb.tconst = tp.tconst \nJOIN name_basics nb ON tp.nconst = nb.nconst\nWHERE nb.primaryName = 'Mel Gibson' \nAND tb.titleType = 'movie'\nAND tr.numVotes > 1000\nAND tb.primaryTitle NOT IN ('The Shawshank Redemption (1994)', 'American History X (1998)', 'The Green Mile  (1999)', 'Changeling  (2008)', 'The Help  (2011)', 'A Beautiful Mind  (2001)')\nORDER BY tr.averageRating DESC, tb.startYear DESC\nLIMIT 5",
  "execution_result": [
   "Braveheart",
   "Lethal Weapon",
   "The Road Warrior",
   "Gallipoli",
   "Lethal Weapon 2"
  ]
 },
 {
  "id": 5727,
  "query": "The Room  (2003) ... that sounds familiar, but I'm trying to figure out if I've seen it.  I might be mixing it up with something else.",
  "history": [],
  "groundtruth": [
   "Bridesmaids  (2011)",
   "The Room  (2003)",
   "Couples Retreat",
   "Whatever Works (2009)"
  ],
  "output": "```sql\nSELECT tb1.primaryTitle, tb1.startYear, tb1.genres, tr.averageRating, tr.numVotes\nFROM title_basics tb1\nJOIN title_ratings tr ON tb1.tconst = tr.tconst\nWHERE tb1.primaryTitle LIKE '%The Room%'\nAND tb1.startYear = 2003;\n```",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nThe Room  (2003) ... that sounds familiar, but I'm trying to figure out if I've seen it.  I might be mixing it up with something else.\nUser Preference History: \n[]\nSQL Query:\n",
  "extracted_SQL": "SELECT tb1.primaryTitle, tb1.startYear, tb1.genres, tr.averageRating, tr.numVotes\nFROM title_basics tb1\nJOIN title_ratings tr ON tb1.tconst = tr.tconst\nWHERE tb1.primaryTitle LIKE '%The Room%'\nAND tb1.startYear = 2003",
  "execution_result": [
   "The Room"
  ]
 },
 {
  "id": 5921,
  "query": "Hi can you think of any good movies that have come out recently on DVD?  I am open to any kind",
  "history": [
   "Iron Man  (2008)",
   "The Sixth Sense (1999)",
   "Thor: Ragnarok (2017)"
  ],
  "groundtruth": [
   "Wonder Woman  (2017)"
  ],
  "output": "SELECT tb.primaryTitle, tb.startYear, tr.averageRating\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.titleType = 'movie'\nAND tb.startYear >= 2017\nAND tb.startYear <= 2021\nAND tb.runtimeMinutes > 90\nAND tr.numVotes > 1000\nORDER BY tr.averageRating DESC\nLIMIT 10;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nHi can you think of any good movies that have come out recently on DVD?  I am open to any kind\nUser Preference History: \n['Iron Man  (2008)', 'The Sixth Sense (1999)', 'Thor: Ragnarok (2017)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.primaryTitle, tb.startYear, tr.averageRating\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.titleType = 'movie'\nAND tb.startYear >= 2017\nAND tb.startYear <= 2021\nAND tb.runtimeMinutes > 90\nAND tr.numVotes > 1000\nORDER BY tr.averageRating DESC\nLIMIT 10",
  "execution_result": [
   "Rakshasudu",
   "Made in Abyss: Dawn of the Deep Soul",
   "Linda Ronstadt: The Sound of My Voice",
   "Wonder Woman",
   "Alita: Battle Angel",
   "Trixie Mattel: Moving Parts",
   "Vellai Pookal",
   "Grass is Greener",
   "The Dirt",
   "Gone Kesh"
  ]
 },
 {
  "id": 6032,
  "query": "I have seen Shutter Island  (2010) , but I haven't seen The Prestige  (2006) , I have heard good things, so I will have to check that out",
  "history": [
   "The Matrix (1999)",
   "Memento  (2000)",
   "Shutter Island  (2010)",
   "The Matrix Revolutions (2003)",
   "The Matrix Reloaded (2003)",
   "Inception (2010)"
  ],
  "groundtruth": [
   "The Prestige  (2006)"
  ],
  "output": "SELECT primaryTitle, startYear, runtimeMinutes, genres, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.tconst IN ('tt0482571', 'tt0482571', 'tt0407887', 'tt1375666', 'tt0241527', 'tt0325980', 'tt0241527')\nAND title_basics.titleType = 'movie'\nAND title_basics.startYear <= 2010\nAND title_ratings.averageRating >= 7.5\nAND title_basics.tconst != 'tt1130884'\nORDER BY title_ratings.numVotes DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI have seen Shutter Island  (2010) , but I haven't seen The Prestige  (2006) , I have heard good things, so I will have to check that out\nUser Preference History: \n['The Matrix (1999)', 'Memento  (2000)', 'Shutter Island  (2010)', 'The Matrix Revolutions (2003)', 'The Matrix Reloaded (2003)', 'Inception (2010)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, runtimeMinutes, genres, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.tconst IN ('tt0482571', 'tt0482571', 'tt0407887', 'tt1375666', 'tt0241527', 'tt0325980', 'tt0241527')\nAND title_basics.titleType = 'movie'\nAND title_basics.startYear <= 2010\nAND title_ratings.averageRating >= 7.5\nAND title_basics.tconst != 'tt1130884'\nORDER BY title_ratings.numVotes DESC\nLIMIT 5",
  "execution_result": [
   "Harry Potter and the Sorcerer's Stone",
   "The Prestige",
   "The Departed",
   "Pirates of the Caribbean: The Curse of the Black Pearl"
  ]
 },
 {
  "id": 6090,
  "query": "I'm hoping you can recommend a good animated movie.  I like Disney movies like Brave  (2012), and also anime movies like Kiki's Delivery Service (1989) and Spirited Away.",
  "history": [
   "Brave  (2012)",
   "Madagascar  (2005)",
   "Kiki's Delivery Service (1989)",
   "Spirited Away"
  ],
  "groundtruth": [
   "Penguins of Madagascar (2014)",
   "Grave of the Fireflies (1988)"
  ],
  "output": "SELECT tb.tconst, tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating, tr.numVotes\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.titleType = 'movie'\nAND tb.genres LIKE '%Animation%'\nAND (tb.primaryTitle LIKE '%Disney%' OR tb.primaryTitle LIKE '%Pixar%' OR tb.genres LIKE '%Animation%')\nAND (tb.primaryTitle != 'Brave' OR tb.startYear != 2012)\nAND (tb.primaryTitle != 'Madagascar' OR tb.startYear != 2005)\nAND (tb.primaryTitle != \"Kiki's Delivery Service\" OR tb.startYear != 1989)\nAND (tb.primaryTitle != 'Spirited Away')\nORDER BY tr.averageRating DESC, tr.numVotes DESC\nLIMIT 10;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI'm hoping you can recommend a good animated movie.  I like Disney movies like Brave  (2012), and also anime movies like Kiki's Delivery Service (1989) and Spirited Away.\nUser Preference History: \n['Brave  (2012)', 'Madagascar  (2005)', \"Kiki's Delivery Service (1989)\", 'Spirited Away']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.tconst, tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating, tr.numVotes\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.titleType = 'movie'\nAND tb.genres LIKE '%Animation%'\nAND (tb.primaryTitle LIKE '%Disney%' OR tb.primaryTitle LIKE '%Pixar%' OR tb.genres LIKE '%Animation%')\nAND (tb.primaryTitle != 'Brave' OR tb.startYear != 2012)\nAND (tb.primaryTitle != 'Madagascar' OR tb.startYear != 2005)\nAND (tb.primaryTitle != \"Kiki's Delivery Service\" OR tb.startYear != 1989)\nAND (tb.primaryTitle != 'Spirited Away')\nORDER BY tr.averageRating DESC, tr.numVotes DESC\nLIMIT 10",
  "execution_result": [
   "Ramayana: The Legend of Prince Rama",
   "Joe Finds Grace",
   "The Lion King",
   "Grave of the Fireflies",
   "The Pinchcliffe Grand Prix",
   "Cat City",
   "The Magician's Hat",
   "Princess Mononoke",
   "WALL\u00b7E",
   "Toy Story"
  ]
 },
 {
  "id": 6254,
  "query": "I saw The Princess Diaries  (2001) a long time ago and liked it.  I haven't seen the sequel, though.  I'll have to look for that!  And maybe I'll watch the first one again, since it's been so long.",
  "history": [
   "Frozen (2013)",
   "Enchanted  (2007)",
   "Tangled (2010)",
   "The Princess Diaries  (2001)",
   "The Prince and Me (2004)"
  ],
  "groundtruth": [
   "The Princess Diaries 2: Royal Engagement (2004)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nWHERE primaryTitle LIKE '%Princess Diaries%' \nAND titleType = 'movie' \nAND startYear > 2001 \nORDER BY averageRating DESC;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI saw The Princess Diaries  (2001) a long time ago and liked it.  I haven't seen the sequel, though.  I'll have to look for that!  And maybe I'll watch the first one again, since it's been so long.\nUser Preference History: \n['Frozen (2013)', 'Enchanted  (2007)', 'Tangled (2010)', 'The Princess Diaries  (2001)', 'The Prince and Me (2004)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nWHERE primaryTitle LIKE '%Princess Diaries%' \nAND titleType = 'movie' \nAND startYear > 2001 \nORDER BY averageRating DESC",
  "execution_result": [
   "The Princess Diaries 2: Royal Engagement"
  ]
 },
 {
  "id": 6283,
  "query": "I'm looking for a good action movie! I really liked John Wick (2014) and Looper  (2012) ! But any action or adventure movie would be great!",
  "history": [
   "Looper  (2012)",
   "Wonder Woman  (2017)",
   "John Wick (2014)"
  ],
  "groundtruth": [
   "Justice League  (2017)"
  ],
  "output": "SELECT tb.tconst, tb.primaryTitle, tb.startYear, tb.runtimeMinutes, tb.genres, tr.averageRating, tr.numVotes \nFROM title_basics tb \nJOIN title_ratings tr ON tb.tconst = tr.tconst \nWHERE (tb.genres LIKE '%Action%' OR tb.genres LIKE '%Adventure%') \nAND tb.startYear >= 2010 \nAND tb.tconst NOT IN ('tt1843866', 'tt0451279', 'tt2911666') \nORDER BY tr.averageRating DESC, tr.numVotes DESC;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI'm looking for a good action movie! I really liked John Wick (2014) and Looper  (2012) ! But any action or adventure movie would be great!\nUser Preference History: \n['Looper  (2012)', 'Wonder Woman  (2017)', 'John Wick (2014)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.tconst, tb.primaryTitle, tb.startYear, tb.runtimeMinutes, tb.genres, tr.averageRating, tr.numVotes \nFROM title_basics tb \nJOIN title_ratings tr ON tb.tconst = tr.tconst \nWHERE (tb.genres LIKE '%Action%' OR tb.genres LIKE '%Adventure%') \nAND tb.startYear >= 2010 \nAND tb.tconst NOT IN ('tt1843866', 'tt0451279', 'tt2911666') \nORDER BY tr.averageRating DESC, tr.numVotes DESC",
  "execution_result": [
   "Midnight Sun",
   "That Day",
   "Kuidas p\u00e4\u00e4sta Aafrikat?",
   "80. Bolum",
   "Halka'nin \u00c7ocuklari",
   "12.B\u00f6l\u00fcm",
   "7. Bolum",
   "9. Bolum",
   "8. Bolum",
   "Radioactive Love Story",
   "...(748 in total)"
  ]
 },
 {
  "id": 6418,
  "query": "Right! I haven't seen Shaun of the Dead (2004) , but I know its the same guys as Hot Fuzz (2007) so I will check it out",
  "history": [
   "The Mask (1988)",
   "Hot Fuzz (2007)",
   "Ace Ventura: Pet Detective (1994)"
  ],
  "groundtruth": [
   "Shaun of the Dead (2004)"
  ],
  "output": "SELECT tb3.primaryTitle, tb3.startYear, tb3.runtimeMinutes, tb3.genres, tr.averageRating\nFROM title_basics tb1\nJOIN title_basics tb2 ON tb1.originalTitle = 'Hot Fuzz' AND tb1.startYear = 2007\nJOIN title_basics tb3 ON tb3.originalTitle = 'Shaun of the Dead' AND tb3.startYear = 2004\nJOIN title_ratings tr ON tb3.tconst = tr.tconst\nWHERE tb3.genres = tb2.genres\nAND tb3.tconst NOT IN ('tt0096895', 'tt0119528', 'tt0137523')\nORDER BY tr.averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nRight! I haven't seen Shaun of the Dead (2004) , but I know its the same guys as Hot Fuzz (2007) so I will check it out\nUser Preference History: \n['The Mask (1988)', 'Hot Fuzz (2007)', 'Ace Ventura: Pet Detective (1994)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb3.primaryTitle, tb3.startYear, tb3.runtimeMinutes, tb3.genres, tr.averageRating\nFROM title_basics tb1\nJOIN title_basics tb2 ON tb1.originalTitle = 'Hot Fuzz' AND tb1.startYear = 2007\nJOIN title_basics tb3 ON tb3.originalTitle = 'Shaun of the Dead' AND tb3.startYear = 2004\nJOIN title_ratings tr ON tb3.tconst = tr.tconst\nWHERE tb3.genres = tb2.genres\nAND tb3.tconst NOT IN ('tt0096895', 'tt0119528', 'tt0137523')\nORDER BY tr.averageRating DESC\nLIMIT 5",
  "execution_result": [
   "Shaun of the Dead",
   "Shaun of the Dead",
   "Shaun of the Dead",
   "Shaun of the Dead",
   "Shaun of the Dead"
  ]
 },
 {
  "id": 7036,
  "query": "No, I prefer the older films. They have better stories. Horrors today seem like they're pieced together for cheap thrills and jump scares.",
  "history": [
   "Psycho  (1960)",
   "The Exorcist  (1973)",
   "It (1990)",
   "Carrie  (1976)"
  ],
  "groundtruth": [
   "The Shining  (1980)",
   "The Amityville Horror  (1979)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE titleType = 'movie' \nAND startYear <= 1990 \nAND genres LIKE '%Horror%'\nORDER BY averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nNo, I prefer the older films. They have better stories. Horrors today seem like they're pieced together for cheap thrills and jump scares.\nUser Preference History: \n['Psycho  (1960)', 'The Exorcist  (1973)', 'It (1990)', 'Carrie  (1976)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE titleType = 'movie' \nAND startYear <= 1990 \nAND genres LIKE '%Horror%'\nORDER BY averageRating DESC\nLIMIT 5",
  "execution_result": [
   "S\u00fct Kardesler",
   "Psycho",
   "The Shining",
   "Alien",
   "Valentina"
  ]
 },
 {
  "id": 8573,
  "query": "Ok. I remember seeing Revenge of the Nerds II: Nerds in Paradise (1987) a lot when I was younger. But I never saw the first one. I will check it out",
  "history": [
   "Police Academy ",
   "Coming to America (1988)",
   "Revenge of the Nerds II: Nerds in Paradise (1987)"
  ],
  "groundtruth": [
   "Revenge of the Nerds (1984)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.titleType = 'movie'\nAND title_basics.startYear < 1987\nAND title_basics.genres LIKE '%Comedy%'\nAND title_ratings.numVotes > 1000\nAND title_basics.tconst NOT IN ('tt0090556', 'tt0092947', 'tt0093857');",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nOk. I remember seeing Revenge of the Nerds II: Nerds in Paradise (1987) a lot when I was younger. But I never saw the first one. I will check it out\nUser Preference History: \n['Police Academy ', 'Coming to America (1988)', 'Revenge of the Nerds II: Nerds in Paradise (1987)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.titleType = 'movie'\nAND title_basics.startYear < 1987\nAND title_basics.genres LIKE '%Comedy%'\nAND title_ratings.numVotes > 1000\nAND title_basics.tconst NOT IN ('tt0090556', 'tt0092947', 'tt0093857')",
  "execution_result": [
   "Tillie's Punctured Romance",
   "The Poor Little Rich Girl",
   "Mickey",
   "The Oyster Princess",
   "Daddy-Long-Legs",
   "Don't Change Your Husband",
   "I Don't Want to Be a Man",
   "The Doll",
   "True Heart Susie",
   "The Parson's Widow",
   "...(2685 in total)"
  ]
 },
 {
  "id": 9362,
  "query": "I need to see the last boyscout, i feel like i've never seen it. maybe I have, but I just cant remember.",
  "history": [
   "Cobra  (1991)",
   "Lethal Weapon (1987)"
  ],
  "groundtruth": [
   "The Last Boy Scout (1991)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating, genres\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle LIKE '%The Last Boy Scout%'\nAND titleType = 'movie'\nORDER BY startYear DESC;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI need to see the last boyscout, i feel like i've never seen it. maybe I have, but I just cant remember.\nUser Preference History: \n['Cobra  (1991)', 'Lethal Weapon (1987)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating, genres\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE primaryTitle LIKE '%The Last Boy Scout%'\nAND titleType = 'movie'\nORDER BY startYear DESC",
  "execution_result": [
   "The Last Boy Scout"
  ]
 },
 {
  "id": 11981,
  "query": "I'll have to watch Cabin Fever  (2000) . I heard people talk about it in the past but never actually watched it",
  "history": [
   "Hostel  (2005)",
   "Batman Begins",
   "Prom Night  (2008)",
   "Disturbia  (2007)"
  ],
  "groundtruth": [
   "Death Wish ",
   "Cabin Fever  (2000)",
   "Inglourious Basterds (2009)"
  ],
  "output": "SELECT tb.tconst, tb.primaryTitle, tb.startYear, tr.averageRating \nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.titleType = 'movie'\nAND tb.startYear = 2000\nAND tb.primaryTitle LIKE '%Cabin Fever%'\nORDER BY tr.averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI'll have to watch Cabin Fever  (2000) . I heard people talk about it in the past but never actually watched it\nUser Preference History: \n['Hostel  (2005)', 'Batman Begins', 'Prom Night  (2008)', 'Disturbia  (2007)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.tconst, tb.primaryTitle, tb.startYear, tr.averageRating \nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.titleType = 'movie'\nAND tb.startYear = 2000\nAND tb.primaryTitle LIKE '%Cabin Fever%'\nORDER BY tr.averageRating DESC\nLIMIT 5",
  "execution_result": [
   "Cabin Fever"
  ]
 },
 {
  "id": 12162,
  "query": "I'm not a huge fan of sports dramas, so I don't know that I'd like The Wrestler  (2008). But I've been meaning to watch Starship Troopers  (1997) for quite some time now!",
  "history": [
   "Spaceballs (1987)",
   "Stardust  (2007)"
  ],
  "groundtruth": [
   "Starship Troopers  (1997)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE titleType = 'movie'\nAND genres NOT LIKE '%Sport%'\nAND primaryTitle <> 'The Wrestler'\nAND (primaryTitle = 'Starship Troopers' AND startYear = 1997)\nAND (primaryTitle NOT IN ('Spaceballs', 'Stardust') AND startYear NOT IN (1987, 2007))\nORDER BY averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI'm not a huge fan of sports dramas, so I don't know that I'd like The Wrestler  (2008). But I've been meaning to watch Starship Troopers  (1997) for quite some time now!\nUser Preference History: \n['Spaceballs (1987)', 'Stardust  (2007)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE titleType = 'movie'\nAND genres NOT LIKE '%Sport%'\nAND primaryTitle <> 'The Wrestler'\nAND (primaryTitle = 'Starship Troopers' AND startYear = 1997)\nAND (primaryTitle NOT IN ('Spaceballs', 'Stardust') AND startYear NOT IN (1987, 2007))\nORDER BY averageRating DESC\nLIMIT 5",
  "execution_result": [
   "Starship Troopers"
  ]
 },
 {
  "id": 13093,
  "query": "Ohh, nice! I've seen that one before. A friend took me to see it. Star Wars: Episode VIII \u2013 The Last Jedi (2017) . I've never seen Wonder Woman  (2017)  though.",
  "history": [
   "Star Wars: Episode VIII \u2013 The Last Jedi (2017)"
  ],
  "groundtruth": [
   "Wonder Woman  (2017)",
   "Justice League  (2017)",
   "Thor: Ragnarok (2017)"
  ],
  "output": "SELECT tb1.primaryTitle, tb1.startYear, tb1.runtimeMinutes, tb1.genres, tr.averageRating\nFROM title_basics tb1\nJOIN title_ratings tr ON tb1.tconst = tr.tconst\nWHERE tb1.startYear = 2017\nAND tb1.titleType = 'movie'\nAND (tb1.genres LIKE '%Action%' OR tb1.genres LIKE '%Adventure%')\nAND tb1.tconst != 'tt0451279'\nAND tb1.tconst NOT IN ('tt2527336')\nORDER BY tr.averageRating DESC, tr.numVotes DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nOhh, nice! I've seen that one before. A friend took me to see it. Star Wars: Episode VIII \u2013 The Last Jedi (2017) . I've never seen Wonder Woman  (2017)  though.\nUser Preference History: \n['Star Wars: Episode VIII \u2013 The Last Jedi (2017)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb1.primaryTitle, tb1.startYear, tb1.runtimeMinutes, tb1.genres, tr.averageRating\nFROM title_basics tb1\nJOIN title_ratings tr ON tb1.tconst = tr.tconst\nWHERE tb1.startYear = 2017\nAND tb1.titleType = 'movie'\nAND (tb1.genres LIKE '%Action%' OR tb1.genres LIKE '%Adventure%')\nAND tb1.tconst != 'tt0451279'\nAND tb1.tconst NOT IN ('tt2527336')\nORDER BY tr.averageRating DESC, tr.numVotes DESC\nLIMIT 5",
  "execution_result": [
   "Joe Finds Grace",
   "Justice League",
   "Chips",
   "Walking Out",
   "Bunyan and Babe"
  ]
 },
 {
  "id": 14558,
  "query": "I will add those to my list of things to watch. We have not seen Holes  (2003) , The Sandlot (1993) or Moana  (2016)",
  "history": [
   "Sing  (2016)",
   "Paddington  (2014)"
  ],
  "groundtruth": [
   "Moana  (2016)",
   "Holes  (2003)",
   "The Sandlot (1993)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE (primaryTitle = 'Holes' AND startYear = 2003) \n    OR (primaryTitle = 'The Sandlot' AND startYear = 1993) \n    OR (primaryTitle = 'Moana' AND startYear = 2016)\n    OR (primaryTitle = 'Sing' AND startYear = 2016)\n    OR (primaryTitle = 'Paddington' AND startYear = 2014)\nORDER BY averageRating DESC;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI will add those to my list of things to watch. We have not seen Holes  (2003) , The Sandlot (1993) or Moana  (2016)\nUser Preference History: \n['Sing  (2016)', 'Paddington  (2014)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE (primaryTitle = 'Holes' AND startYear = 2003) \n    OR (primaryTitle = 'The Sandlot' AND startYear = 1993) \n    OR (primaryTitle = 'Moana' AND startYear = 2016)\n    OR (primaryTitle = 'Sing' AND startYear = 2016)\n    OR (primaryTitle = 'Paddington' AND startYear = 2014)\nORDER BY averageRating DESC",
  "execution_result": [
   "The Sandlot",
   "Holes"
  ]
 },
 {
  "id": 14730,
  "query": "I am not a huge Jim Carrey fan, I saw Ace Ventura  and thought it was just a little too much.",
  "history": [
   "50 First Dates (2004)"
  ],
  "groundtruth": [
   "Jack and Jill  (2011)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE titleType = 'movie'\nAND genres LIKE '%Comedy%'\nAND averageRating >= 7\nAND primaryTitle NOT LIKE '%Ace Ventura%'\nAND primaryTitle NOT LIKE '%Jim Carrey%'\nAND primaryTitle != '50 First Dates (2004)'\nORDER BY startYear DESC;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI am not a huge Jim Carrey fan, I saw Ace Ventura  and thought it was just a little too much.\nUser Preference History: \n['50 First Dates (2004)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE titleType = 'movie'\nAND genres LIKE '%Comedy%'\nAND averageRating >= 7\nAND primaryTitle NOT LIKE '%Ace Ventura%'\nAND primaryTitle NOT LIKE '%Jim Carrey%'\nAND primaryTitle != '50 First Dates (2004)'\nORDER BY startYear DESC",
  "execution_result": [
   "One Moment",
   "Surviving in L.A.",
   "Jak najdalej stad",
   "Curveball",
   "In a Silent Way",
   "Pink Skies Ahead",
   "Ok, est\u00e1 bien...",
   "The Campaign",
   "Psycho Ape!",
   "Conversaciones",
   "...(7247 in total)"
  ]
 },
 {
  "id": 17179,
  "query": "I am not sure if I have seen that one but I have seen a lot of Hitchcock and Vincent Price......I have a pretty large screen!!",
  "history": [
   "Whatever Happened to Baby Jane? (1962)"
  ],
  "groundtruth": [
   "The Creeper  (1948)",
   "Sunset Boulevard  (1950)",
   "Vertigo  (1958)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nJOIN name_basics ON title_principals.nconst = name_basics.nconst\nWHERE primaryName IN ('Alfred Hitchcock', 'Vincent Price')\nAND titleType = 'movie'\nAND startYear <= 1962\nAND genres LIKE '%Thriller%'\nAND primaryTitle <> 'Whatever Happened to Baby Jane? (1962)'\nORDER BY averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI am not sure if I have seen that one but I have seen a lot of Hitchcock and Vincent Price......I have a pretty large screen!!\nUser Preference History: \n['Whatever Happened to Baby Jane? (1962)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nJOIN name_basics ON title_principals.nconst = name_basics.nconst\nWHERE primaryName IN ('Alfred Hitchcock', 'Vincent Price')\nAND titleType = 'movie'\nAND startYear <= 1962\nAND genres LIKE '%Thriller%'\nAND primaryTitle <> 'Whatever Happened to Baby Jane? (1962)'\nORDER BY averageRating DESC\nLIMIT 5",
  "execution_result": [
   "Psycho",
   "Rear Window",
   "Vertigo",
   "North by Northwest",
   "Dial M for Murder"
  ]
 },
 {
  "id": 18701,
  "query": "As long as it has good action sequences, I am always down. And Bruce Lee is always good, so it sounds awesome!",
  "history": [
   "A Good Day to Die Hard (2013)",
   "Die Hard (1988)",
   "Die Hard 2 (1990)",
   "Live Free or Die Hard (2007)",
   "Taken  (2008)"
  ],
  "groundtruth": [
   "Enter the Dragon (1973)",
   "Lethal Weapon 4 (1998)",
   "Lethal Weapon (1987)"
  ],
  "output": "SELECT primaryTitle, averageRating, genres\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nJOIN name_basics ON title_principals.nconst = name_basics.nconst\nWHERE genres LIKE '%Action%' \nAND primaryName = 'Bruce Lee'\nAND primaryTitle NOT IN ('A Good Day to Die Hard (2013)', 'Die Hard (1988)', 'Die Hard 2 (1990)', 'Live Free or Die Hard (2007)', 'Taken  (2008)')\nORDER BY averageRating DESC\nLIMIT 10;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nAs long as it has good action sequences, I am always down. And Bruce Lee is always good, so it sounds awesome!\nUser Preference History: \n['A Good Day to Die Hard (2013)', 'Die Hard (1988)', 'Die Hard 2 (1990)', 'Live Free or Die Hard (2007)', 'Taken  (2008)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, averageRating, genres\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nJOIN name_basics ON title_principals.nconst = name_basics.nconst\nWHERE genres LIKE '%Action%' \nAND primaryName = 'Bruce Lee'\nAND primaryTitle NOT IN ('A Good Day to Die Hard (2013)', 'Die Hard (1988)', 'Die Hard 2 (1990)', 'Live Free or Die Hard (2007)', 'Taken  (2008)')\nORDER BY averageRating DESC\nLIMIT 10",
  "execution_result": [
   "Longstreet",
   "Enter the Dragon",
   "Fist of Fury",
   "The Green Hornet",
   "The Way of the Dragon",
   "The Big Boss",
   "The Curse of the Dragon",
   "Game of Death",
   "Circle of Iron",
   "The True Game of Death"
  ]
 },
 {
  "id": 18810,
  "query": "That's a little old for my taste.  I was hoping for something from the 1970s or 1980s.  One of my favorites is Murder by Death (1976)",
  "history": [
   "Seems Like Old Times  (1980)",
   "Airplane! (1980)",
   "Murder by Death (1976)"
  ],
  "groundtruth": [
   "Young Frankenstein (1974)"
  ],
  "output": "SELECT tb.tconst, tb.primaryTitle, tb.startYear, tr.averageRating \nFROM title_basics tb \nJOIN title_ratings tr ON tb.tconst = tr.tconst \nWHERE tb.startYear BETWEEN 1970 AND 1989 \nAND tb.titleType = 'movie' \nAND tb.tconst NOT IN ('tt0082186', 'tt0080339', 'tt0074937') \nORDER BY tr.averageRating DESC;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nThat's a little old for my taste.  I was hoping for something from the 1970s or 1980s.  One of my favorites is Murder by Death (1976)\nUser Preference History: \n['Seems Like Old Times  (1980)', 'Airplane! (1980)', 'Murder by Death (1976)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.tconst, tb.primaryTitle, tb.startYear, tr.averageRating \nFROM title_basics tb \nJOIN title_ratings tr ON tb.tconst = tr.tconst \nWHERE tb.startYear BETWEEN 1970 AND 1989 \nAND tb.titleType = 'movie' \nAND tb.tconst NOT IN ('tt0082186', 'tt0080339', 'tt0074937') \nORDER BY tr.averageRating DESC",
  "execution_result": [
   "Lapse",
   "Always a New Beginning",
   "Shaheed Kartar Singh Sarabha",
   "Frontline",
   "Disappearing Oasis, Last Oasis",
   "Don't Fight It, Kid",
   "Dresden Diary 3",
   "Looking Your Best",
   "Sex Magic",
   "Juju Music",
   "...(41087 in total)"
  ]
 },
 {
  "id": 19440,
  "query": "im good. I'm looking for romantic comedy movies. I'm trying to impress a girl with rom com knowledge so suggest as many as you may, please!",
  "history": [],
  "groundtruth": [
   "Pretty Woman (1990)",
   "50 First Dates (2004)",
   "Breakfast at Tiffany's  (1961)",
   "Sweet Home Alabama  (2002)",
   "Forgetting Sarah Marshall (2008)"
  ],
  "output": "SELECT tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating, tr.numVotes\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.genres LIKE '%Romance%' AND tb.genres LIKE '%Comedy%'\nORDER BY tr.averageRating DESC, tr.numVotes DESC;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nim good. I'm looking for romantic comedy movies. I'm trying to impress a girl with rom com knowledge so suggest as many as you may, please!\nUser Preference History: \n[]\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating, tr.numVotes\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.genres LIKE '%Romance%' AND tb.genres LIKE '%Comedy%'\nORDER BY tr.averageRating DESC, tr.numVotes DESC",
  "execution_result": [
   "Heads and Tails",
   "No me hagan amputar",
   "The One Where Everybody Finds Out",
   "The Last One: Part 2",
   "Changing Partners",
   "Urgent Care",
   "The One with the Embryos",
   "Slap Bet",
   "Entran dos y salen tres",
   "Tocando fondo",
   "...(14366 in total)"
  ]
 },
 {
  "id": 19664,
  "query": "I heard that The American President (1995) was good. Think I'll try that one. Not too sure about Wall Street  (1987) though, think i'll give it a pass.",
  "history": [
   "Fool's Gold  (2008)",
   "Romancing the Stone (1984)"
  ],
  "groundtruth": [
   "The American President (1995)"
  ],
  "output": "SELECT primaryTitle, startYear, averageRating \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.titleType = 'movie' \nAND startYear = 1995 \nAND (genres LIKE '%Comedy%' OR genres LIKE '%Romance%') \nAND title_basics.tconst NOT IN \n  (SELECT tconst \n   FROM title_basics \n   WHERE startYear = 1987 \n   AND primaryTitle LIKE '%Wall Street%')\nAND title_basics.tconst NOT IN \n  (SELECT tconst \n   FROM title_basics \n   WHERE primaryTitle IN ('Fool\\'s Gold (2008)', 'Romancing the Stone (1984)'))\nORDER BY averageRating DESC;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI heard that The American President (1995) was good. Think I'll try that one. Not too sure about Wall Street  (1987) though, think i'll give it a pass.\nUser Preference History: \n[\"Fool's Gold  (2008)\", 'Romancing the Stone (1984)']\nSQL Query:\n",
  "extracted_SQL": "SELECT primaryTitle, startYear, averageRating \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.titleType = 'movie' \nAND startYear = 1995 \nAND (genres LIKE '%Comedy%' OR genres LIKE '%Romance%') \nAND title_basics.tconst NOT IN \n  (SELECT tconst \n   FROM title_basics \n   WHERE startYear = 1987 \n   AND primaryTitle LIKE '%Wall Street%')\nAND title_basics.tconst NOT IN \n  (SELECT tconst \n   FROM title_basics \n   WHERE primaryTitle IN ('Fool\\'s Gold (2008)', 'Romancing the Stone (1984)'))\nORDER BY averageRating DESC",
  "execution_result": [
   "Okey si ma'am",
   "Our Love",
   "Dai lu mao de nu ren",
   "Children of the Sun",
   "Decak iz Junkovca",
   "Toy Story",
   "Rhinoskin: The Making of a Movie Star",
   "Limited Manuski",
   "Sathi Leelavathi",
   "Underground",
   "...(743 in total)"
  ]
 },
 {
  "id": 19713,
  "query": "I'll put The Iron Giant (1999) down and watch it with him. I haven't seen it myself so It would be good to watch together.",
  "history": [
   "Monsters, Inc. (2001)",
   "Toy Story (1995)",
   "Finding Nemo (2003)",
   "Wreck-It Ralph (2012)"
  ],
  "groundtruth": [
   "The Iron Giant (1999)",
   "Spirited Away"
  ],
  "output": "SELECT tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.titleType = 'movie'\nAND tb.startYear <= 1999\nAND tb.startYear >= 1995\nAND tb.genres LIKE '%Animation%'\nAND tb.tconst NOT IN ('tt0198781', 'tt0114709', 'tt0266543', 'tt1772341') -- removing User Preference History\nORDER BY tr.averageRating DESC\nLIMIT 5;",
  "input_prompt": "\nGenerate a SQL query for a movie recommendation system that operates on the IMDb database. The database comprises several tables with the following columns:\n1. title_basics [tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres]\n2. title_ratings [tconst, averageRating, numVotes]\n3. name_basics [nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles]\n4. title_crew [tconst, directors, writers]\n5. title_principals [tconst, ordering, nconst, category, job, characters]\n\nHere is a detailed desciption of the tables and columns:\nthe 'name_basics' table holds basic information for all the people within the dataset. The columns are as follows:\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm0000001'; \n- primaryName (string) : name by which the person is most often credited, e.g., 'Fred Astaire';\n- birthYear : in YYYY format, e.g., '1899';\n- deathYear : in YYYY format if applicable, else '\\N', e.g., '1987';\n- primaryProfession (array of strings) : the top-3 professions of the person, e.g., 'actor,soundtrack,writer', 'actor,soundtrack';\n- knownForTitles (array of tconsts) : titles the person is known for, e.g. 'tt0053137,tt00319'\n\nthe 'title_basics' table holds basic information for all the movies within the dataset. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- titleType (string) : the type/format of the title, e.g., 'movie', 'short', 'tvseries', 'tvepisode', 'video', etc;\n- primaryTitle (string) : the more popular title / the title used by the filmmakers on promotional materials at the point of release, e.g., 'Carmencita';\n- originalTitle (string) : original title, in the original language, e.g., 'Carmencita';\n- isAdult (boolean) : 0: non-adult title; 1: adult title;\n- startYear (YYYY) : represents the release year of a title. In the case of TV Series, it is the series start year, e.g., '1894';\n- endYear (YYYY) : TV Series end year. \u2018\\N\u2019 for all other title types, e.g., '1894';\n- runtimeMinutes : primary runtime of the title, in minutes, e.g., '12', '1';\n- genres (string array) : includes up to three genres associated with the title, e.g., 'Documentary,Short', 'Comedy,Romance,Animation';\n\nthe 'title_crew' table holds information about the directors and writers information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- directors (array of nconsts) : director(s) of the given title, e.g., 'nm0005690,nm0374658';\n- writers (array of nconsts) : writer(s) of the given title, e.g., 'nm0085156';\n\nthe 'title_principals' table holds the detailed information of the principal staffs for each movie. The columns are as follows:\n- tconst (string) \uff1a alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- ordering (integer) : a number to uniquely identify rows for a given titleId, e.g., '1', '2', '3';\n- nconst (string) : alphanumeric unique identifier of the name/person, e.g., 'nm1588970';\n- category (string) : the category of job that person was in, e.g., 'self', 'director', 'cinematographer', 'composer', 'editor', 'actor', 'producer';\n- job (string) - the specific job title if applicable, else '\\N', e.g., 'director of photography';\ncharacters (string) - the name of the character played if applicable, else '\\N', e.g., \"[\"\"Assistant\"\"]\", \"[\"\"Blacksmith\"\"]\";\n\nthe 'title_ratings' table holds information about all the rating information for each movie. The columns are as follows:\n- tconst (string) : alphanumeric unique identifier of the title, e.g., 'tt0000001';\n- averageRating : weighted average of all the individual user ratings, e.g., '5.6';\n- numVotes : number of votes the title has received, e.g., '1694', '210';\n\nYour task is to generate a SQL query that can be executed on this database and the executed result should be movie recommendations to users based on their input and historical preferences. You only need to provide a single SQL query without executing it or showing the output results.\n\nImportant! Start your answer with \"SELECT\" and end with \";\"\n\nUser Input: \nI'll put The Iron Giant (1999) down and watch it with him. I haven't seen it myself so It would be good to watch together.\nUser Preference History: \n['Monsters, Inc. (2001)', 'Toy Story (1995)', 'Finding Nemo (2003)', 'Wreck-It Ralph (2012)']\nSQL Query:\n",
  "extracted_SQL": "SELECT tb.primaryTitle, tb.startYear, tb.genres, tr.averageRating\nFROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nWHERE tb.titleType = 'movie'\nAND tb.startYear <= 1999\nAND tb.startYear >= 1995\nAND tb.genres LIKE '%Animation%'\nAND tb.tconst NOT IN ('tt0198781', 'tt0114709', 'tt0266543', 'tt1772341') -- removing User Preference History\nORDER BY tr.averageRating DESC\nLIMIT 5",
  "execution_result": [
   "Princess Mononoke",
   "Neon Genesis Evangelion: The End of Evangelion",
   "Muratti und Sarotti - Die Geschichte des deutschen Animationsfilms 1920 bis 1960",
   "Ghost in the Shell",
   "The Iron Giant"
  ]
 }
]