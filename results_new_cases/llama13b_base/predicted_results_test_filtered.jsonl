{"id": 20047, "query": "No , I think I would like to watch Easy A (2010)", "history": ["The Waterboy (1998)", "Easy A (2010)", "Click  (2006)"], "groundtruth": ["The Black Panthers: Vanguard of the Revolution (2015)", "It  (2017)", "Avengers: Infinity War (2018)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    name_basics.knownForTitles\nFROM\n    title_basics\nINNER JOIN\n    title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN\n    name_basics ON title_basics.tconst = name_basics.tconst\nWHERE\n    title_basics.primaryTitle = 'Easy A (2010)'\n    AND title_ratings.averageRating > (\n        SELECT\n            AVG(title_ratings.averageRating)\n        FROM\n            title_ratings\n        WHERE\n            title_ratings.tconst IN (\n                SELECT\n                    title_basics.tconst\n                FROM\n                    title_basics\n                WHERE\n                    title_basics.primaryTitle = 'The Waterboy (1998)'\n            )\n    )\n    AND title_basics.genres LIKE '%Comedy%'\n    AND name_basics.primaryProfession LIKE '%Actress%'\nORDER BY\n    title_ratings.averageRating DESC,\n    title_basics.startYear ASC;\n\n;"}
{"id": 20053, "query": "I like to watch scary movies", "history": ["It (1990)", "The Exorcist  (1973)"], "groundtruth": ["It  (2017)", "The Last Exorcism (2010)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Horror%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Steven%Spielberg%'\nAND title_principals.characters LIKE '%demon%';\n\nThis SQL query retrieves the title, primary title, original title, average rating, directors, and characters from the title_basics, title_ratings, title_crew, and title_principals tables, respectively. It then filters the results based on the user's input and preference history.\n\nThe query first joins the title_basics, title_ratings, and title_crew tables on the tconst column, and the title_principals table on the tconst column. It then filters the results based on the genres column, ensuring that the movie is classified as a horror movie.\n\nNext, it filters the results based on the numVotes column, ensuring that the movie has more than 1000 votes. This helps to prioritize movies that are popular and well-liked by users.\n\nThe query then filters the results based on the directors column, ensuring that the movie is directed by Steven Spielberg. This is based on the user's preference history, which includes one of Spielberg's movies.\n\nFinally, the query filters the results based on the characters column, ensuring that the movie features a demon. This is based on the user's input, which indicates that they are interested in watching scary movies.\n\nThe resulting list of movies will be a recommendation list tailored to the user's preferences, taking into account both their input and their historical prefer"}
{"id": 20054, "query": "I love to watch funny movies", "history": ["Son of the Mask (2005)", "You Don't Mess with the Zohan (2008)", "Click  (2006)"], "groundtruth": ["The Mask (1988)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Jim Carrey%'\nAND title_principals.characters LIKE '%funny%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query joins the title_basics, title_ratings, title_crew, and title_principals tables to find movies that are classified as comedies, have more than 1000 votes, and have directors or characters that are related to Jim Carrey or funny movies. The query then orders the results by the average rating in descending order.\n\nNote that this is just one possible approach to generating movie recommendations, and there are many other factors that could be considered in the query, such as the user's watch history, their ratings, and other preferences."}
{"id": 20095, "query": "I like scary movies, can you make a suggestion?", "history": ["Jason X (2001)"], "groundtruth": ["The Conjuring (2013)"], "output": "SELECT \n  t.title_basics.primaryTitle,\n  t.title_basics.startYear,\n  t.title_basics.runtimeMinutes,\n  t.title_ratings.averageRating,\n  t.title_principals.characters\nFROM \n  title_basics t\n  JOIN title_ratings tr ON t.tconst = tr.tconst\n  JOIN name_basics n ON t.primaryName = n.primaryName\n  JOIN title_crew c ON t.directors = c.directors\n  JOIN title_principals p ON t.tconst = p.tconst\nWHERE \n  t.genres LIKE '%horror%'\n  AND t.title_ratings.averageRating > (\n    SELECT \n      AVG(tr.rating)\n    FROM \n      title_ratings tr\n      JOIN name_basics n ON tr.tconst = n.tconst\n      WHERE \n        n.primaryProfession = 'Actor'\n        AND n.knownForTitles LIKE '%Jason X (2001)%'\n  )\nORDER BY \n  t.title_ratings.averageRating DESC;\n\nThis SQL query uses the IMDb database schema you provided and takes into account the user's preference history (i.e., the movie \"Jason X (2001)\") and their stated preference for scary movies. The query first joins the title_basics, title_ratings, name_basics, title_crew, and title_principals tables to obtain the necessary information about each movie. It then filters the results to only include movies with the horror genre and a high average rating. Finally, it orders the results by the average rating in descending order.\n\nNote that this query assumes that the user's preference history is stored in the title_ratings table with the appropriate foreign key constraints. If this is not the case, the query may need to be modified to join the appropriate tables and filter the results accordingly."}
{"id": 20195, "query": "i think funny movies would be great", "history": ["Hangover (2010)", "Uncle Buck", "Hangover  (2014)"], "groundtruth": ["Donnie Darko (2001)", "Tommy Boy (1995)", "Black Sheep  (1996)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = 'No' AND title_ratings.averageRating > 6 AND title_ratings.numVotes > 10000 AND name_basics.primaryProfession = 'Actor' AND title_principals.category = 'Comedy'\nAND title_basics.title LIKE '%funny%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_princi"}
{"id": 20210, "query": "I enjoy fantasy type movies, and goofy comedies.  Any suggestions?", "history": ["Big Fish (2003)", "The Hangover (2009)", "The Lord of the Rings ", "Sisters  (2015)"], "groundtruth": ["Step Brothers  (2008)"], "output": "SELECT t.title_basics.primaryTitle, t.title_basics.startYear, t.title_basics.runtimeMinutes, \n       t.title_ratings.averageRating, t.title_crew.directors, t.title_principals.characters\n  FROM title_basics t\n  JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n  JOIN name_basics n ON t.title_basics.primaryName = n.nconst\n  JOIN title_crew c ON t.title_basics.tconst = c.tconst\n  JOIN title_principals p ON t.title_basics.tconst = p.tconst\n WHERE t.genres LIKE '%Fantasy%' AND t.genres LIKE '%Comedy%'\n   AND t.title_ratings.averageRating > 7\n   AND t.title_principals.characters LIKE '%goofy%'\n   AND NOT EXISTS (SELECT 1 FROM title_basics t2 WHERE t2.tconst = t.tconst AND t2.startYear < 2000)\n GROUP BY t.title_basics.primaryTitle, t.title_basics.startYear, t.title_basics.runtimeMinutes, \n          t.title_ratings.averageRating, t.title_crew.directors, t.title_principals.characters\n HAVING COUNT(DISTINCT t.title_basics.primaryName) > 1\n ORDER BY t.title_basics.startYear DESC, t.title_basics.primaryTitle ASC;\n\nNote: The query assumes that the user's preference history is stored in a separate table, and the query joins this table with the title table to retrieve the titles that match the user's preferences. The query also uses subqueries and exists clause to filter out titles that are not from the 21st century and have average rating less than 7. Finally, the query groups the results by title, start year, and runtime, and orders them by start year and primary title."}
{"id": 20277, "query": "Yes, I'd recommend psychological thrillers.  Have you seen Nocturnal Animals  (2016)?", "history": ["Nocturnal Animals  (2016)", "Annabelle 2 (2017)"], "groundtruth": ["Annabelle  (2014)", "A Nightmare on Elm Street (1984)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.title as \"Similar Movie\"\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n1 ON t1.primaryName = n1.primaryName\nWHERE t1.genres LIKE '%thriller%'\nAND t1.runtimeMinutes > 90\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings tr\n  WHERE tr.tconst = t1.tconst AND tr.averageRating > t1.averageRating\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals tp\n  WHERE tp.tconst = t1.tconst AND tp.category = 'actress'\n)\nAND t2.tconst NOT IN (\n  SELECT t3.tconst\n  FROM title_ratings t3\n  WHERE t3.averageRating > t1.averageRating\n)\nAND t2.tconst NOT IN (\n  SELECT t4.tconst\n  FROM title_principals t4\n  WHERE t4.category = 'actress'\n)\nAND t1.isAdult = 0\nAND t1.startYear > 2010\nAND t1.endYear < 2020\nAND t2.title NOT IN (\n  SELECT t5.title\n  FROM title_basics t5\n  WHERE t5.primaryName = n1.primaryName\n)\nORDER BY t1.averageRating DESC, t1.numVotes DESC\nLIMIT 5;\n\nThis SQL query will retrieve movies that are psychological thrillers, have a runtime of over 90 minutes, and do not have any high-rated reviews or actresses in the main cast. It will also exclude movies that are not in the user's preference history and are not adult-rated. Finally, it will order the results by average rating and number of votes, and limit the results to 5 movies."}
{"id": 20296, "query": "I am looking for a funny movie. Can you . help me?", "history": ["Shallow Hal (2001)", "The Holiday (2006)", "There's Something About Mary (1998)"], "groundtruth": ["The Wedding Singer (1998)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'Shallow Hal (2001)' OR primaryTitle = 'The Holiday (2006)' OR primaryTitle = 'There''s Something About Mary (1998)'))\nAND title_principals.characters LIKE '%funny%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have an average rating higher than the average rating of the movies the user has previously rated, and have characters that are related to \"funny\" in the title or in the credits. The query will then order the results by the average rating in descending order."}
{"id": 20300, "query": "Can you suggest a couple superhero movies for me to watch tonight?", "history": ["Guardians of the Galaxy  (2014)", "Guardians of the Galaxy Vol. 2 (2017)", "Spider-Man  (2002)"], "groundtruth": ["Avengers: Age of Ultron (2015)", "Captain America: Civil War (2016)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.genres = 'Superhero'\nAND title_ratings.numVotes > 1000\nAND title_basics.startYear > 2000\nAND title_basics.endYear < 2020\nAND name_basics.knownForTitles = ANY('Guardians of the Galaxy', 'Guardians of the Galaxy Vol. 2', 'Spider-Man')\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will suggest superhero movies for the user based on their input and historical preferences. It joins the title_basics, title_ratings, and name_basics tables to get the required information. The WHERE clause filters the results based on the user's preferences, and the ANY() function is used to check if the name_basics table contains any of the user's preferred titles. Finally, the results are sorted in descending order of the average rating."}
{"id": 20301, "query": "I am hoping you can help me find a movie about gangsters, like Casino  (1995) . I love that movie. I also really like Goodfellas (1990) .", "history": ["Casino  (1995)", "Goodfellas (1990)", "Godfather  (1991)"], "groundtruth": ["American Gangster  (2007)", "Scarface  (1983)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'Gangster'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryName NOT IN ('Martin Scorsese', 'Robert De Niro') -- exclude directors and actors\nAND title_crew.directors NOT IN ('Martin Scorsese', 'Robert De Niro') -- exclude directors\nAND title_principals.job NOT IN ('Actor', 'Director') -- exclude actors and directors\nAND title_principals.category NOT IN ('Crime', 'Drama') -- exclude crime and drama movies\nAND title_basics.startYear BETWEEN 1980 AND 2010\nAND title_basics.endYear BETWEEN 1980 AND 2010\nAND title_basics.runtimeMinutes BETWEEN 90 AND 180\n\nORDER BY title_ratings.averageRating DESC, title"}
{"id": 20302, "query": "I love adventure movies.", "history": ["Black Panther (2018)", "Jurassic Park", "Raiders of the Lost Ark (1981)"], "groundtruth": ["Avengers: Infinity War (2018)", "Tomb Raider (2018)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres LIKE '%adventure%'\nAND title_ratings.averageRating > (\n    SELECT \n        AVG(title_ratings.averageRating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                title_basics.tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.genres LIKE '%adventure%'\n        )\n    AND title_ratings.numVotes > 1000\n)\nAND title_basics.startYear > 2000\nAND title_basics.endYear < 2022\nAND name_basics.primaryProfession = 'Actor'\nAND name_basics.knownForTitles IN (\n    SELECT \n        name_basics.knownForTitles\n    FROM \n        name_basics\n    WHERE \n        name_basics.primaryName IN (\n            SELECT \n                name_basics.primaryName\n            FROM \n                name_basics\n            WHERE \n                name_basics.primaryProfession = 'Actor'\n        )\n)\nORDER BY \n    title_ratings.averageRating DESC,\n    title_basics.startYear DESC;\n\nThis SQL query uses a combination of"}
{"id": 20379, "query": "Hi, I love musicals and am looking for some new ones!", "history": ["The Waterboy (1998)", "The Phantom of the Opera  (2004)", "Les Mis\u00e9rables  (2012)", "Happy Gilmore (1996)"], "groundtruth": ["Tommy Boy (1995)", "Black Sheep  (1996)"], "output": "SELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres,\n       AVG(rating) AS avg_rating\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE isAdult = 0  -- exclude adult movies\nAND (primaryGenre = 'Musical' OR secondaryGenre = 'Musical')  -- only include movies with musical genre\nAND AVG(rating) > (SELECT AVG(rating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'The Waterboy (1998)'))  -- exclude movies with lower average rating than The Waterboy\nAND AVG(rating) < (SELECT AVG(rating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'Les Mis\u00e9rables (2012)'))  -- exclude movies with higher average rating than Les Mis\u00e9rables\nGROUP BY tconst\nORDER BY avg_rating DESC;\n\nThis SQL query joins several tables to retrieve information about movies that match the user's preferences. It first filters out adult movies and then uses logical OR to include movies with either primary or secondary genre of 'Musical'. The query then calculates the average rating for each movie and compares it to the average rating of The Waterboy and Les Mis\u00e9rables to exclude movies with lower and higher average ratings, respectively. Finally, the query groups the results by tconst and orders them by the average rating in descending order.\n\nNote that this query assumes that the IMDb database has the same table structures and column names as the ones you provided. If there are any differences, you may need to adjust the query accordingly."}
{"id": 20381, "query": "I am actually looking for movies for my 12 yr olds sleepover", "history": ["Wonder Woman  (2017)", "Sky High  (2003)", "The Hunger Games  (2012)", "The Hunger Games: Catching Fire (2013)"], "groundtruth": ["X-Men: Apocalypse (2016)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.primaryName, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN name_basics t2 ON t1.primaryTitle = t2.primaryName\nWHERE t1.isAdult = 0\nAND t1.genres LIKE '%adventure%'\nAND t1.startYear > 2000\nAND t1.runtimeMinutes < 120\nAND t2.knownForTitles LIKE '%Wonder Woman%'\nOR t2.knownForTitles LIKE '%Sky High%'\nOR t2.knownForTitles LIKE '%The Hunger Games%'\nOR t2.knownForTitles LIKE '%The Hunger Games: Catching Fire%'\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.primaryName, t2.birthYear, t2.knownForTitles\nORDER BY t1.startYear DESC, t1.runtimeMinutes ASC;\n\nThis SQL query will retrieve movies that are suitable for a 12-year-old's sleepover, based on the user's previous preferences and the input criteria. The query joins the title_basics and name_basics tables to get the primary title and the name of the movie, and filters out adult movies, movies that are not adventure genre, and movies that are too long or too old. It also uses the OR operator to include movies that have any of the specified known for titles. Finally, it groups the results by movie title, start year, runtime minutes, genres, primary name, birth year, and known for titles, and orders them by start year in descending order and runtime minutes in ascending order."}
{"id": 20382, "query": "I watch many movies. I especially like science fiction. Any recommendations?", "history": [], "groundtruth": ["The Avengers  (2012)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Science Fiction%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors NOT LIKE 'None'\nAND title_principals.characters NOT LIKE 'None'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies from the IMDb database that are classified as science fiction, have more than 1000 votes, and have a non-empty director and character list. The results will be sorted in descending order of average rating."}
{"id": 20399, "query": "I really like murder mysteries. Can you help me find one?", "history": ["Memento  (2000)", "Seven  (1995)", "The Silence of the Lambs  (1991)"], "groundtruth": ["Kiss Kiss Bang Bang (2005)"], "output": "SELECT t1.title, t1.titleType, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%mystery' AND t2.averageRating > 8\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t3\n  JOIN name_basics t4 ON t3.nconst = t4.nconst\n  WHERE t3.job = 'director' AND t4.birthYear = 1968\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_crew t5\n  JOIN title_basics t6 ON t5.tconst = t6.tconst\n  WHERE t5.job = 'writer' AND t6.primaryTitle = 'The Silence of the Lambs'\n)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will search for movies in the IMDb database that are classified as \"mystery\" and have an average rating of at least 8 out of 10. It will also exclude movies that have directors or writers who were born in 1968, as well as movies that are similar to \"The Silence of the Lambs\". The query will then order the results by average rating in descending order.\n\nNote that this query assumes that the user's preference history is stored in the \"title_ratings\" table, with the \"tconst\" column representing the unique identifier for each movie. The query also uses the \"LIKE\" operator to search for movies with the keyword \"mystery\" in their genre field."}
{"id": 20404, "query": "I am looking for a scary movie", "history": ["Halloween  (1978)", "Scream  (1996)"], "groundtruth": ["The Others  (2001)", "A Quiet Place (2018)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t.title_ratings.averageRating, \n    t.title_ratings.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n    JOIN name_basics n ON t.title_basics.nconst = n.nconst\nWHERE \n    t.genres LIKE '%horror%' \n    AND t.title_ratings.averageRating > 7 \n    AND t.title_ratings.numVotes > 1000\n    AND n.primaryProfession = 'Actor'\n    AND n.knownForTitles LIKE '%Halloween%' \n    OR n.knownForTitles LIKE '%Scream%'\nORDER BY \n    t.title_basics.startYear DESC, \n    t.title_basics.endYear DESC, \n    t.title_basics.runtimeMinutes ASC;\n\nThis SQL query will retrieve movies that are classified as horror, have an average rating above 7, and have more than 1000 votes. It will also select actors who have worked on Halloween or Scream movies. The results will be sorted by release year, end year, and runtime minutes."}
{"id": 20458, "query": "Can you please reccomend a movie", "history": ["Step Brothers  (2008)", "Seven Psychopaths (2012)", "The Silence of the Lambs  (1991)"], "groundtruth": ["Blockers (2018)", "Avengers: Infinity War (2018)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN (\n  SELECT n1.primaryName, COUNT(n2.tconst) as num_movies\n  FROM name_basics n1\n  JOIN title_basics t2 ON n1.primaryName = t2.primaryName\n  GROUP BY n1.primaryName\n  HAVING COUNT(n2.tconst) > 2\n) n3 ON t1.primaryName = n3.primaryName\nWHERE t1.genres LIKE '%comedy%' AND t1.startYear >= 2000 AND t1.startYear <= 2020\nAND t2.averageRating > 7 AND t2.numVotes > 1000\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis query will recommend movies to the user based on their input history and preferences. The query first joins the title_basics and title_ratings tables to get the movie titles and their ratings. Then it joins a subquery of the name_basics table to get the primary names of the movies and counts the number of movies for each primary name. The query then filters the results to only include movies with more than two movies in the user's history, and with a rating above 7 and more than 1000 votes. Finally, the results are sorted by average rating and start year in descending order.\n\nNote: This query assumes that the user's input history is stored in the title_ratings table, and that the primary key of the title_basics table is tconst."}
{"id": 20472, "query": "I like comedy movies", "history": ["Scary Movie (2000)", "American Pie  (1999)", "Click  (2006)"], "groundtruth": ["You Don't Mess with the Zohan (2008)"], "output": "SELECT \n  title_basics.title, \n  title_basics.primaryTitle, \n  title_basics.originalTitle, \n  title_basics.isAdult, \n  title_basics.startYear, \n  title_basics.endYear, \n  title_basics.runtimeMinutes, \n  title_basics.genres, \n  name_basics.primaryName, \n  name_basics.birthYear, \n  name_basics.deathYear, \n  name_basics.primaryProfession, \n  name_basics.knownForTitles, \n  title_crew.directors, \n  title_crew.writers, \n  title_principals.ordering, \n  title_principals.category, \n  title_principals.job, \n  title_principals.characters\nFROM \n  title_basics \n  JOIN name_basics ON title_basics.tconst = name_basics.nconst \n  JOIN title_crew ON title_basics.tconst = title_crew.tconst \n  JOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n  title_basics.genres LIKE '%comedy%' \n  AND title_ratings.averageRating > (\n    SELECT \n      AVG(title_ratings.averageRating)\n    FROM \n      title_ratings \n    WHERE \n      title_ratings.tconst IN (\n        SELECT \n          tconst\n        FROM \n          title_basics\n        WHERE \n          title_basics.genres LIKE '%comedy%'\n      )\n    AND title_ratings.numVotes > 1000\n  )\n  AND title_basics.startYear BETWEEN 1990 AND 2010\n  AND title_basics.endYear IS NULL\n  AND title_basics.runtimeMinutes BETWEEN 60 AND 120\n  AND name_basics"}
{"id": 20480, "query": "I&quot;m looking for movies that have like brain twists? I enjoy movies such as Vanilla Sky (2001)", "history": ["Monster  (2003)", "Vanilla Sky (2001)", "Bridget Jones's Diary  (2001)", "Being John Malkovich (1999)"], "groundtruth": ["Maid in Manhattan"], "output": "SELECT \n  t.title_basics.title, \n  t.title_basics.primaryTitle, \n  t.title_basics.originalTitle, \n  t.title_basics.isAdult, \n  t.title_basics.startYear, \n  t.title_basics.endYear, \n  t.title_basics.runtimeMinutes, \n  t.title_basics.genres, \n  t.title_ratings.averageRating, \n  t.title_ratings.numVotes, \n  n.name_basics.primaryName, \n  n.name_basics.birthYear, \n  n.name_basics.deathYear, \n  n.name_basics.primaryProfession, \n  n.name_basics.knownForTitles, \n  c.title_crew.directors, \n  c.title_crew.writers, \n  p.title_principals.ordering, \n  p.title_principals.nconst, \n  p.title_principals.category, \n  p.title_principals.job, \n  p.title_principals.characters \nFROM \n  title_basics t \n  JOIN title_ratings t_ratings ON t.title_basics.tconst = t_ratings.tconst \n  JOIN name_basics n ON t.title_basics.primaryTitle = n.primaryName \n  JOIN title_crew c ON t.title_basics.tconst = c.tconst \n  JOIN title_principals p ON t.title_basics.tconst = p.tconst \nWHERE \n  t.title_basics.genres LIKE '%thriller%' \n  AND t.title_basics.startYear BETWEEN 2000 AND 2020 \n  AND t.title_basics.endYear IS NULL \n  AND t.title_ratings.averageRating > 7 \n  AND t.title_ratings"}
{"id": 20493, "query": "Hello, I am looking for new dramas or based on true life events such as We Are Marshall (2006) or The Judge  (2014)", "history": ["I Can Only Imagine (2018)", "We Are Marshall (2006)", "The Judge  (2014)"], "groundtruth": ["To Kill a Mockingbird  (1962)", "Woodlawn  (2015)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.primaryTitle LIKE '%Life%' \nOR title_basics.primaryTitle LIKE '%Event%' \nOR title_basics.originalTitle LIKE '%Life%' \nOR title_basics.originalTitle LIKE '%Event%'\nAND title_ratings.averageRating > 6 \nAND title_ratings.numVotes > 1000\nAND name_basics.primaryName NOT LIKE '% unknown%'\nAND name_basics.primaryName NOT LIKE '% unknow%'\nAND name_basics.knownForTitles NOT LIKE '% unknown%'\nAND name_basics.knownForTitles NOT LIKE '% unknow%'\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nThis SQL query will retrieve movies that are classified as dramas or based on true life events, have high average ratings and a large number of votes, and have a primary title that contains the words \"Life\" or \"Event\". The query will also exclude movies with unknown actors or directors. The results will be ordered by average rating in descending order and then by start year in descending order."}
{"id": 20494, "query": "I like all kinds, I feel like I could use a good Comedy", "history": ["Talladega Nights: The Ballad of Ricky Bobby (2006)"], "groundtruth": ["Anchorman ", "The House  (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.primaryTitle = 'Talladega Nights: The Ballad of Ricky Bobby (2006)'))\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will select all movies with the genre \"Comedy\" that have an average rating higher than the average rating of the movies the user has previously rated (in this case, \"Talladega Nights: The Ballad of Ricky Bobby (2006)\"). The query will also select the title, primary title, original title, average rating, num votes, primary name, directors, and characters for each movie. The results will be ordered by the average rating in descending order."}
{"id": 20495, "query": "I'm looking for any recent horror movies that are good.", "history": ["Manchester by the Sea  (2016)", "The Dark Tower  (2017)", "Annabelle 2 (2017)"], "groundtruth": ["A Quiet Place (2018)", "Room  (2015)", "It  (2017)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    name_basics.knownForTitles\nFROM \n    title_basics \nINNER JOIN \n    title_ratings \nON \n    title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics \nON \n    title_basics.nconst = name_basics.nconst \nWHERE \n    title_basics.genres LIKE '%Horror%' \n    AND title_ratings.averageRating > 7 \n    AND title_ratings.numVotes > 1000 \n    AND name_basics.knownForTitles LIKE '%Manchester by the Sea%' \n    OR name_basics.knownForTitles LIKE '%The Dark Tower%' \n    OR name_basics.knownForTitles LIKE '%Annabelle 2%' \nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles"}
{"id": 20526, "query": "Yes, I love a dark comedy like that", "history": ["Talladega Nights: The Ballad of Ricky Bobby (2006)", "The Hangover (2009)", "Little Miss Sunshine (2006)"], "groundtruth": ["Fargo  (1996)"], "output": "SELECT * FROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nJOIN name_basics nb ON tb.primaryTitle = nb.primaryName\nJOIN title_crew tc ON tb.tconst = tc.tconst\nJOIN title_principals tp ON tb.tconst = tp.tconst\nWHERE tb.genres = 'Comedy' AND tb.startYear >= 2000 AND tb.endYear <= 2010\nAND tp.category = 'Actor' AND tp.job = 'Lead'\nAND EXISTS (\n  SELECT 1 FROM title_ratings tr2\n  WHERE tr2.tconst = tb.tconst AND tr2.averageRating > 7 AND tr2.numVotes > 1000\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_ratings tr3\n  WHERE tr3.tconst = tb.tconst AND tr3.averageRating < 5 AND tr3.numVotes > 1000\n)\nAND tb.primaryTitle IN (\n  SELECT primaryTitle\n  FROM title_basics\n  WHERE genres = 'Comedy' AND startYear >= 2000 AND endYear <= 2010\n  GROUP BY primaryTitle\n  HAVING COUNT(DISTINCT tconst) > 10\n)\nORDER BY tb.startYear DESC, tp.characters;\n\nThis SQL query is designed to recommend movies to a user who has expressed a preference for dark comedies, based on their viewing history and other users with similar preferences. The query joins several tables to extract information about the movies, their ratings, and the actors and crew involved.\n\nThe query first filters the movies to those that are comedies, released between 2000 and 2010, and have at least 1000 votes and an average rating of at least 7. It then excludes movies that have a low average rating (less than 5) or a high number of negative votes (more than 1000).\n\nNext, the query joins the title_basics"}
{"id": 20545, "query": "I am in the mood to watch a comedy.", "history": ["Jurassic Park", "There's Something About Mary (1998)", "50 First Dates (2004)", "Jurassic Park  (1993)", "The Wedding Singer (1998)", "National Lampoon's Vacation (1983)"], "groundtruth": ["Jurassic World (2015)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n1 ON t1.primaryName = n1.primaryName\nWHERE t1.genres = 'Comedy'\nAND t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (\n        SELECT t4.tconst\n        FROM title_basics t4\n        JOIN title_ratings t5 ON t4.tconst = t5.tconst\n        WHERE t4.genres = 'Comedy'\n        AND t5.numVotes > 1000\n    )\n)\nAND t1.startYear BETWEEN 1980 AND 2020\nAND t1.runtimeMinutes < 120\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_principals t3\n    JOIN name_basics n2 ON t3.nconst = n2.nconst\n    WHERE t3.category = 'Actor'\n    AND n2.primaryProfession = 'Director'\n    AND t3.job = 'Director'\n    AND n2.primaryName IN (\n        SELECT primaryName\n        FROM name_basics\n        WHERE birthYear > 1950\n    )\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve a list of movies that are comedies, have high ratings (above the average rating of movies in the same genre with more than 1000 votes), were released between 1980 and 2020, have a runtime of less than 120 minutes, and do not have any actors who have directed a movie with a primary profession of Director and were born before 1950. The results will be ordered by average rating in descending order and then by release year in descending order."}
{"id": 20548, "query": "Yes do you have any drama reccomendations?", "history": ["Me Before You ", "The Shawshank Redemption (1994)", "Thor: Ragnarok (2017)"], "groundtruth": ["La La Land  (2016)", "The Fault in Our Stars  (2014)"], "output": "SELECT * FROM (\n  SELECT t.*, \n       AVG(rating) OVER (PARTITION BY title_basics.primaryTitle ORDER BY numVotes DESC) AS avg_rating\n  FROM title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n  WHERE title_basics.titleType = 'drama'\n) AS top_dramas\nWHERE avg_rating > (SELECT AVG(rating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'Me Before You'))\nORDER BY avg_rating DESC;\n;"}
{"id": 20566, "query": "I am trying to find a movie based on a book to watch.", "history": ["Avengers: Infinity War (2018)", "The Post (2017)"], "groundtruth": ["Seabiscuit  (2003)"], "output": "SELECT \n  t.title, \n  t.titleType, \n  t.primaryTitle, \n  t.originalTitle, \n  t.isAdult, \n  t.startYear, \n  t.endYear, \n  t.runtimeMinutes, \n  t.genres, \n  n.primaryName, \n  n.birthYear, \n  n.deathYear, \n  n.primaryProfession, \n  n.knownForTitles, \n  c.category, \n  c.job, \n  c.characters\nFROM \n  title_basics t \n  JOIN name_basics n ON t.primaryTitle = n.primaryTitle \n  JOIN title_crew c ON t.tconst = c.tconst \nWHERE \n  t.titleType ='movie' AND \n  t.isAdult = 0 AND \n  t.startYear = 2018 AND \n  t.endYear = 2018 AND \n  t.genres LIKE '%book%' AND \n  n.primaryProfession = 'actor' AND \n  n.knownForTitles LIKE '%Avengers: Infinity War (2018)%' AND \n  c.category = 'actor' AND \n  c.job = 'actress' AND \n  c.characters LIKE '%Black Widow%'\nORDER BY \n  t.title ASC;\n\nThis SQL query will select movies based on the user's input and historical preferences. The query will first join the title_basics, name_basics, and title_crew tables to get the movie titles, actors, and crew information. Then, it will apply filters based on the user's input and historical preferences, such as movie type, adult content, start and end year, genres, and actor information. Finally, the query will order the results by movie title in ascending order.\n\nNote that this query assumes that the user's historical preferences are stored in the title_ratings table, with the average rating and number of votes for each movie. If this information is not available, the query can be modified to use the number of votes and"}
{"id": 20581, "query": "I like Comedy Movies!!", "history": ["Talladega Nights: The Ballad of Ricky Bobby (2006)", "The Hangover (2009)", "Neighbors  (2014)"], "groundtruth": ["Neighbors 2: Sorority Rising (2016)", "The House  (2017)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.genres = 'Comedy' \nAND title_ratings.averageRating > (\n    SELECT \n    AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (\n        SELECT \n        tconst\n        FROM title_ratings\n        WHERE title_ratings.averageRating > 7\n    )\n)\nAND title_principals.category IN (\n    SELECT \n    category\n    FROM title_principals\n    WHERE title_principals.job = 'Actor'\n)\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%Comedy%'\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies that are classified as \"Comedy\" and have an average rating of at least 7. It will also filter out movies that do not have any actors in the \"Actor\" category. Finally, it will order the results by the average rating"}
{"id": 20626, "query": "Do you have any comedies you can recomend?", "history": ["American Pie  (1999)"], "groundtruth": ["Fargo  (1996)", "Click  (2006)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.startYear, title_basics.runtimeMinutes, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'American Pie'))\nORDER BY title_ratings.averageRating DESC;\n\nThis query will retrieve movies with the genre \"Comedy\" that have an average rating higher than the average rating of \"American Pie\" (1999) and its similar movies. The result will be a list of movies with their title, primary title, start year, runtime, primary name, directors, and characters."}
{"id": 20640, "query": "i'm looking forward to watching comedy movies", "history": ["The Mask  (1994)", "Click  (2006)"], "groundtruth": ["The Waterboy (1998)", "Girls Trip (2017)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters \nFROM \n    title_basics \nINNER JOIN \n    title_ratings ON title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics ON title_basics.tconst = name_basics.tconst \nINNER JOIN \n    title_crew ON title_basics.tconst = title_crew.tconst \nINNER JOIN \n    title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.genres LIKE '%comedy%' \nAND (\n    title_ratings.averageRating > (\n        SELECT \n            AVG(rating) \n        FROM \n            title_ratings \n        WHERE \n            title_ratings.tconst = title_basics.tconst \n            AND title_ratings.numVotes > 100\n    )\n    OR title_ratings.numVotes > 1000\n) \nAND NOT EXISTS (\n    SELECT \n        1 \n    FROM"}
{"id": 20642, "query": "i like comdy movies like Click  (2006)", "history": ["Black Panther (2018)", "Iron Man 2 (2010)", "Click  (2006)"], "groundtruth": ["The Notebook (2004)", "Avengers: Infinity War (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > (\n    SELECT \n        AVG(title_ratings.averageRating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                title_basics.tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.primaryTitle = 'Click (2006)'\n        )\n        AND title_ratings.numVotes > 1000\n)\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_principals.characters LIKE '%comedy%'\nAND name_basics.primaryName NOT IN (\n    SELECT \n        name_basics.primaryName\n    FROM \n        name_basics\n    WHERE \n        name_basics.birthYear > 200"}
{"id": 20647, "query": "i like comedy movies as Action movies", "history": ["It (1990)", "It  (2017)", "American Pie  (1999)", "Avengers: Infinity War (2018)"], "groundtruth": ["High Fidelity  (2000)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_ratings.averageRating,\ntitle_crew.directors,\ntitle_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.genres LIKE '%comedy%' AND title_basics.genres LIKE '%action%'\nAND NOT EXISTS (\n  SELECT  1 \n  FROM \n  title_ratings \n  WHERE \n  title_ratings.tconst = title_basics.tconst AND \n  title_ratings.numVotes > 1000\n)\nAND NOT EXISTS (\n  SELECT  1 \n  FROM \n  title_principals \n  WHERE \n  title_principals.tconst = title_basics.tconst AND \n  title_principals.job = 'Director' AND \n  title_principals.characters = 'Jason Voorhees'\n)\nAND title_basics.startYear BETWEEN 1990 AND 2018\nAND title_basics.endYear BETWEEN 1990 AND 2018\nAND title_basics.runtimeMinutes BETWEEN 90 AND 180\n\n;\n\nThis query will return a list of movies that are both comedies and actions, have a minimum of 1000 votes, are not directed by Jason Voorhees, and have a runtime between 90 and 180 minutes. The query also takes into account the user's preference history, which includes movies from the 1990s and 2010s."}
{"id": 20675, "query": "I like horror or thriller movies. Any recommendations?", "history": ["The Lord of the Rings: The Fellowship of the Ring (2001)", "Friday the 13th  (1980)", "A Nightmare on Elm Street (1984)"], "groundtruth": ["The Mechanic  (2011)", "Freddy vs. Jason (2003)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'horror' OR t1.genres = 'thriller'\nAND t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst FROM title_ratings t4 WHERE t4.primaryName IN (SELECT t5.primaryName FROM name_basics t5 WHERE t5.knownForTitles LIKE '%The Lord of the Rings:%'))\n)\nAND t2.numVotes > (\n    SELECT COUNT(t3.numVotes)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst FROM title_ratings t4 WHERE t4.primaryName IN (SELECT t5.primaryName FROM name_basics t5 WHERE t5.knownForTitles LIKE '%The Lord of the Rings:%'))\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_basics t3\n    JOIN title_ratings t4 ON t3.tconst = t4.tconst\n    WHERE t3.genres = 'horror' OR t3.genres = 'thriller'\n    AND t4.averageRating < (\n        SELECT AVG(t5.averageRating)\n        FROM title_ratings t5\n        WHERE t5.tconst IN (SELECT t6.tconst FROM title_ratings t6 WHERE t6.primaryName IN (SELECT t7.primaryName FROM name_basics t7 WHERE t7.knownForTitles LIKE '%The Lord of the Rings:%'))\n    )\n)\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as horror or thriller, have high average ratings and high number of votes, and are not in the"}
{"id": 20676, "query": "I really like comedies", "history": ["Chicago  (2002)", "Step Brothers  (2008)"], "groundtruth": ["Wedding Crashers (2005)", "Romeo & Juliet  (2013)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters \nFROM \n    title_basics \nINNER JOIN \n    title_ratings ON title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics ON title_basics.tconst = name_basics.tconst \nINNER JOIN \n    title_crew ON title_basics.tconst = title_crew.tconst \nINNER JOIN \n    title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.genres LIKE '%comedy%' \nAND (\n    title_ratings.averageRating > (\n        SELECT \n            AVG(rating) \n        FROM \n            title_ratings \n        WHERE \n            title_ratings.tconst IN (\n                SELECT \n                    tconst \n                FROM \n                    title_basics \n                WHERE \n                    title_basics.genres LIKE '%comedy%' \n            )\n    ) \n    OR title_ratings.numVotes > (\n        SELECT \n            COUNT(rating) \n        FROM"}
{"id": 20683, "query": "I like comedy and action", "history": ["Meet the Fockers (2004)", "Tropic Thunder (2008)"], "groundtruth": ["This Is the End (2013)"], "output": "SELECT \ntitle_basics.title_id, title_basics.title, title_basics.original_title, title_basics.is_adult, \ntitle_ratings.average_rating, title_ratings.num_votes, \nname_basics.primary_name, name_basics.birth_year, name_basics.death_year, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\n\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.title_id = title_ratings.title_id\nINNER JOIN name_basics ON title_basics.primary_title = name_basics.title\nINNER JOIN title_crew ON title_basics.title_id = title_crew.title_id\nINNER JOIN title_principals ON title_basics.title_id = title_principals.title_id\n\nWHERE title_basics.genres LIKE '%comedy%' AND title_basics.genres LIKE '%action%'\nAND title_ratings.average_rating > (\n    SELECT AVG(average_rating)\n    FROM title_ratings\n    WHERE title_id IN (\n        SELECT title_id\n        FROM title_basics\n        WHERE genres LIKE '%comedy%' AND genres LIKE '%action%'\n    )\n)\n\nAND title_principals.category NOT IN ('Actor', 'Actress') -- exclude actors and actresses\n\nAND title_principals.job NOT IN ('Director', 'Writer') -- exclude directors and writers\n\nAND title_principals.characters NOT IN ('Human', 'Robot') -- exclude humans and robots\n\nGROUP BY title_basics.title_id, title_basics.title, title_basics.original_title, title_basics.is_adult, \ntitle_ratings.average_rating, title_ratings.num_votes, \nname_basics"}
{"id": 20706, "query": "Do you know of any good comedies?", "history": ["Hot Tub Time Machine", "The Hangover (2009)", "Harold & Kumar"], "groundtruth": ["Daddy's Home 2 (2017)"], "output": "SELECT title_basics.title, title_ratings.averageRating, name_basics.primaryName\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.numVotes > 1000\nAND name_basics.knownForTitles NOT LIKE '%The Hangover%'\nAND name_basics.knownForTitles NOT LIKE '%Harold & Kumar%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have more than 1000 votes, and are not \"The Hangover\" or \"Harold & Kumar\". The result set will include the title, average rating, and primary name of each movie. The ORDER BY clause will sort the result set by average rating in descending order."}
{"id": 20708, "query": "I like comedy and action", "history": ["Deadpool  (2016)"], "groundtruth": ["Deadpool 2  (2018)", "Scott Pilgrim vs. the World (2010)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_ratings.averageRating,\n    title_crew.directors,\n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.genres LIKE '%comedy%' AND \n    title_basics.genres LIKE '%action%' AND \n    title_ratings.numVotes > 10000 AND \n    title_ratings.averageRating > 7\nAND (\n    title_principals.category = 'actor' AND \n    title_principals.job = 'leading' AND \n    title_principals.characters LIKE '%Ryan Reynolds%'\n)\nOR (\n    title_principals.category = 'director' AND \n    title_principals.job = 'directing' AND \n    title_principals.characters LIKE '%Tim Miller%'\n)\nORDER BY \n    title_ratings.averageRating DESC;\n\nThis SQL query joins the title_basics, title_ratings, title_crew, and title_principals tables to retrieve movies that are both comedies and actions, have a high number of votes and a good average rating, and have at least one actor or director with the name Ryan Reynolds or Tim Miller. The OR clause is used to include movies with either an actor or director with the specified names. The results are ordered by average rating in descending order."}
{"id": 20711, "query": "Just not horror!", "history": ["Avengers: Infinity War (2018)"], "groundtruth": ["The House  (2017)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.name, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN name_basics t2 ON t1.primaryTitle = t2.title\nWHERE t1.genres NOT IN ('horror')\nAND t2.knownForTitles LIKE '%Avengers:%'\nORDER BY t1.startYear DESC, t2.knownForTitles ASC\nLIMIT 5;\n\nThis SQL query will retrieve movies that are not classified as horror, and have a known for title that is similar to \"Avengers: Infinity War (2018)\". The query will join the title and name basics tables to get additional information about the movies and their directors. The results will be sorted by release year in descending order and known for title in ascending order, with a limit of 5 movies."}
{"id": 20713, "query": "I like action, comedy, and  click flicks", "history": ["Deadpool  (2016)"], "groundtruth": ["Game Night (2018)", "Deadpool 2  (2018)"], "output": "SELECT \n  title_basics.title,\n  title_basics.primaryTitle,\n  title_ratings.averageRating,\n  name_basics.primaryName,\n  title_crew.directors,\n  title_principals.characters\nFROM \n  title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  JOIN name_basics ON title_basics.tconst = name_basics.tconst\n  JOIN title_crew ON title_basics.tconst = title_crew.tconst\n  JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n  title_basics.genres = 'action' OR title_basics.genres = 'comedy' OR title_basics.genres = 'click flicks'\n  AND title_ratings.numVotes > 1000\n  AND name_basics.primaryName IN (SELECT primaryName FROM name_basics WHERE knownForTitles IN ('Deadpool (2016)'))\nGROUP BY \n  title_basics.title,\n  title_basics.primaryTitle,\n  title_ratings.averageRating,\n  name_basics.primaryName,\n  title_crew.directors,\n  title_principals.characters\nHAVING \n  AVG(title_ratings.averageRating) > 7\nORDER BY \n  AVG(title_ratings.averageRating) DESC;\n\nThis SQL query will retrieve movies that are classified as action, comedy, or click flicks, have more than 1000 ratings, and have at least one actor or crew member who has worked on Deadpool (2016). The query will also filter out movies with low average ratings. Finally, the query will order the results by the average rating in descending order."}
{"id": 20719, "query": "I like anything action, comedy, click flicks", "history": [], "groundtruth": ["The House  (2017)", "Hot Fuzz (2007)"], "output": "SELECT title_basics.title, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%action%' AND title_basics.genres LIKE '%comedy%' AND title_ratings.numVotes > 10000\nAND title_crew.directors LIKE '%Adam%Sandler%'\nAND title_principals.characters LIKE '%Drew%Barrymore%'\nORDER BY title_ratings.averageRating DESC;\n\nNote: The above query assumes that the user preference history is empty, if the user has a history of ratings, it should be incorporated into the query to improve the recommendation results. Also, the query only considers the genres, directors, and characters that match the user's input, if the user has other preferences, they should be added to the query as well."}
{"id": 20724, "query": "Hi, I'm looking for horror or thriller movies", "history": ["District 9 (2009)", "Aliens  (1986)", "Life  (2017)"], "groundtruth": ["Scream  (1996)", "Scary Movie (2000)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.genres = 'horror' OR title_basics.genres = 'thriller'\nAND title_ratings.averageRating > 7\nAND title_principals.category = 'actor'\nAND title_principals.job = 'lead'\n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew"}
{"id": 20729, "query": "I like romantic movies", "history": ["The Notebook (2004)", "La La Land  (2016)", "Love Actually (2003)"], "groundtruth": ["Three Billboards Outside Ebbing, Missouri (2017)", "Lady Bird  (2017)", "Love Story  (1970)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres LIKE '%romance%' \nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE genres LIKE '%romance%'))\nAND title_basics.startYear BETWEEN (SELECT MIN(startYear) FROM title_basics WHERE genres LIKE '%romance%') AND (SELECT MAX(startYear) FROM title_basics WHERE genres LIKE '%romance%')\nAND title_basics.endYear BETWEEN (SELECT MIN(endYear) FROM title_basics WHERE genres LIKE '%romance%') AND (SELECT MAX(endYear) FROM title_basics WHERE genres LIKE '%romance%')\nAND title_basics.runtimeMinutes BETWEEN (SELECT MIN(runtimeMinutes) FROM title_basics WHERE genres LIKE '%romance%') AND (SELECT MAX(runtimeMinutes) FROM title_basics WHERE genres LIKE '%romance%')\nAND name_basics.primaryName IN (SELECT primaryName FROM name_basics WHERE birthYear = (SELECT AVG(birthYear) FROM name_basics WHERE primaryProfession = 'Actor'))\nAND name"}
{"id": 20732, "query": "i like Comedy and Action movies, what would you recommend?", "history": ["Click  (2010)", "The Incredibles (2004)"], "groundtruth": ["Game Night (2018)", "Incredibles 2 (2018)", "Hot Fuzz (2007)", "Scott Pilgrim vs. the World (2010)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Comedy' AND t1.genres LIKE '%Action'\nAND t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst\n                         FROM title_basics t4\n                         WHERE t4.primaryGenre LIKE '%Comedy' AND t4.primaryGenre LIKE '%Action')\n)\nAND t1.startYear BETWEEN 2000 AND 2020\nAND t1.runtimeMinutes BETWEEN 80 AND 120\n\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are both comedies and actions, have a high average rating, were released between 2000 and 2020, and have a runtime between 80 and 120 minutes. The query will also take into account the user's historical preferences, as indicated in their input and previous ratings."}
{"id": 20734, "query": "i like Comedy movies like I Now Pronounce You Chuck & Larry (2007)", "history": ["Lady Bird  (2017)", "I Now Pronounce You Chuck & Larry (2007)", "You Don't Mess with the Zohan (2008)", "War for the Planet of the Apes (2017)", "Click  (2006)"], "groundtruth": ["Birdman  (2014)", "American Hustle (2013)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Comedy%'\nAND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst IN (SELECT t4.tconst FROM title_basics t4 WHERE t4.primaryName = 'Adam Sandler'))\nAND NOT EXISTS (SELECT 1 FROM title_basics t5 WHERE t5.tconst = t1.tconst AND t5.primaryName = 'Adam Sandler')\nAND t1.startYear BETWEEN 2000 AND 2019\nAND t1.endYear BETWEEN 2000 AND 2019\nAND NOT EXISTS (SELECT 1 FROM title_basics t6 WHERE t6.tconst = t1.tconst AND t6.primaryName = 'Jennifer Aniston')\nAND NOT EXISTS (SELECT 1 FROM title_basics t7 WHERE t7.tconst = t1.tconst AND t7.primaryName = 'Justin Theroux')\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis query will retrieve movies that are classified as comedies, have a high average rating, and do not feature Adam Sandler or Jennifer Aniston as primary actors. The query also takes into account the user's historical preferences, including the movies they have rated and the actors they have preferred in the past. The final order of the results is based on the average rating of the movies and their release year."}
{"id": 20737, "query": "I'm good thanks. Do you have any comedies you could recommend?", "history": ["Deadpool  (2016)"], "groundtruth": ["Down to Earth  (2001)", "Jumanji  (2017)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t2.averageRating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst\n                         FROM title_ratings t4\n                         WHERE t4.title = 'Deadpool (2016)')\n)\nORDER BY t2.averageRating DESC;\n;"}
{"id": 20738, "query": "Yes! What other Marvel movies should I see?", "history": [], "groundtruth": ["Guardians of the Galaxy  (2014)", "Thor: Ragnarok (2017)", "Iron Man  (2008)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.director, t2.writer\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Marvel%' AND t2.averageRating > 7\nORDER BY t1.averageRating DESC;\n\nThis SQL query will retrieve all movies from the title_basics table that have a genre of \"Marvel\" and an average rating of at least 7 from the title_ratings table. The query will then order the results by the average rating in descending order.\n\nNote: This query assumes that the user has no previous preference history, so the [] in the user preference history array represent no previous ratings. If the user has rated movies before, you would need to include their previous ratings in the query to make the recommendations more accurate."}
{"id": 20740, "query": "Mostly comedy", "history": ["Game Night (2018)"], "groundtruth": ["The Big Sick (2017)", "The House  (2017)"], "output": "SELECT t1.title_basics.primaryTitle, t1.title_basics.startYear, t1.title_basics.runtimeMinutes, t2.name_basics.primaryName, t3.title_crew.directors, t4.title_principals.characters\nFROM title_basics t1\nJOIN name_basics t2 ON t1.title_basics.primaryTitle = t2.name_basics.knownForTitles\nJOIN title_crew t3 ON t1.title_basics.tconst = t3.title_crew.tconst\nJOIN title_principals t4 ON t1.title_basics.tconst = t4.title_principals.tconst\nWHERE t1.title_basics.genres = 'Comedy'\nAND t2.name_basics.birthYear = 1980\nAND t3.title_crew.directors = 'Jason Bateman'\nAND t4.title_principals.characters = 'Jennifer Aniston'\nAND t1.title_basics.startYear > 2010\nAND t1.title_basics.runtimeMinutes < 120\nORDER BY t1.title_basics.startYear DESC, t1.title_basics.primaryTitle ASC;\n\nThis SQL query retrieves the primary title, start year, runtime minutes, primary name, directors, and characters of movies that are mostly comedy, released after 2010, and have a runtime of less than 120 minutes. The query also filters the results based on the user's preference history, which includes the movie \"Game Night (2018)\". The final order of the results is by start year in descending order and primary title in ascending order."}
{"id": 20744, "query": "I like horror and thriller. Especially low budget like The Boy  (2016) and Don't Breathe (2016) .", "history": ["The Cabin in the Woods", "Don't Breathe (2016)", "The Boy  (2016)"], "groundtruth": ["The Babadook (2014)", "Raw  (2016)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres,\ntitle_ratings.averageRating, title_ratings.numVotes,\nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.genres LIKE '%horror%' AND title_basics.genres LIKE '%thriller%'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.genres LIKE '%horror%'))\nAND title_ratings.numVotes > (SELECT COUNT(title_ratings.numVotes) FROM title_ratings WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.genres LIKE '%horror%'))\nAND title_basics.startYear BETWEEN 2000 AND 2022\nAND title_basics.endYear BETWEEN 2000 AND 2022\nAND title_basics.runtimeMinutes BETWEEN 60 AND 120\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE knownForTitles IN ('The Cabin in the Woods', 'Don''t Breathe (2016)', 'The Boy  (2016)'))\nAND name_basics.knownForTitles NOT IN (SELECT knownForTitles FROM name_basics WHERE primaryName IN ('"}
{"id": 20750, "query": "Romance like The Notebook (2004)", "history": ["Titanic  (1997)"], "groundtruth": ["Safe Haven  (2013)", "The Lucky One  (2012)"], "output": "SELECT \n    t1.title, t1.tconst, t1.runtimeMinutes, t1.genres,\n    AVG(tr.rating) AS avg_rating,\n    COUNT(tr.title_id) AS num_votes\nFROM\n    title_basics t1\n    JOIN title_ratings tr ON t1.tconst = tr.title_id\n    JOIN name_basics n ON t1.primaryName = n.name_id\nWHERE\n    t1.genres LIKE '%Romance%'\n    AND t1.startYear = 2004\n    AND EXISTS (\n        SELECT 1 FROM title_ratings tr2\n        WHERE tr2.title_id = t1.tconst\n        AND tr2.averageRating > (\n            SELECT AVG(tr3.rating)\n            FROM title_ratings tr3\n            WHERE tr3.title_id = t1.tconst\n        )\n    )\nGROUP BY\n    t1.title, t1.tconst\nHAVING\n    AVG(tr.rating) > (\n        SELECT AVG(tr4.rating)\n        FROM title_ratings tr4\n        WHERE tr4.title_id = t1.tconst\n    )\n    AND COUNT(tr.title_id) > (\n        SELECT COUNT(tr5.title_id)\n        FROM title_ratings tr5\n        WHERE tr5.title_id = t1.tconst\n    )\n;\n\nThis query uses a combination of joins and subqueries to retrieve movies that are similar to \"The Notebook\" (2004) and have a high average rating. The query first joins the title_basics table with the title_ratings table to get the average rating and number of votes for each movie. It then joins the name_basics table to get the primary name of each movie. The query then filters the results to only include movies that are classified as romance and were released in 2004.\n\nThe query then uses a subquery to find movies that have a higher average rating than the user's historical preferences. The subquery selects the title_id and average rating for all movies that the user has rated and returns the average"}
{"id": 20773, "query": "I like comedy movies as Action movies", "history": ["Get Out (2017)", "Click  (2010)"], "groundtruth": ["Spaceballs (1987)", "Home Alone (1990)", "50 First Dates (2004)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.genres = 'Comedy' AND title_basics.genres = 'Action'\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE genres = 'Comedy' AND genres = 'Action'))\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_principals.characters = 'Black'\nAND name_basics.primaryName IN ('Jordan Peele', 'Adam Sandler')\nAND title_basics.startYear BETWEEN 2010 AND 2017\nORDER BY \ntitle_ratings.averageRating DESC, title_basics.startYear DESC;"}
{"id": 20774, "query": "I like Action and Comedy movies", "history": ["Get Him to the Greek (2010)", "Get Out (2017)"], "groundtruth": ["Rat Race  (2001)", "Thor: Ragnarok (2017)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Action%' AND t1.genres LIKE '%Comedy%'\nAND t2.averageRating > (SELECT AVG(t3.averageRating)\n                     FROM title_ratings t3\n                     WHERE t3.tconst IN (SELECT t4.tconst\n                                     FROM title_ratings t4\n                                     WHERE t4.nconst IN (SELECT n5.nconst\n                                                   FROM name_basics n5\n                                                   WHERE n5.primaryProfession = 'Actor'\n                                                   AND n5.knownForTitles IN (SELECT t6.title\n                                                                      FROM title_basics t6\n                                                                      WHERE t6.genres LIKE '%Action%'\n                                                                      AND t6.startYear BETWEEN 2010 AND 2020\n                                                                      AND t6.runtimeMinutes < 120\n                                                                      AND t6.primaryTitle = 1)))\n                     AND t3.numVotes > 10000)\nAND t1.tconst NOT IN (SELECT t7.tconst\n                     FROM title_basics t7\n                     WHERE t7.genres LIKE '%Drama%'\n                     AND t7.startYear BETWEEN 2010 AND 2020\n                     AND t7.runtimeMinutes < 120)\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. The query first joins the title_basics and title_ratings tables to get the movie titles and their corresponding ratings. The query then filters the movies based on the user's input (genres and start year) and the historical prefer"}
{"id": 20782, "query": "mystery or action", "history": ["Black Panther (2018)", "Ant-Man and the Wasp (2018)", "Avengers: Infinity War (2018)", "Deadpool  (2016)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\n\nWHERE title_basics.title LIKE '%mystery%' OR title_basics.title LIKE '%action%'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE title_basics.primaryTitle = 'Black Panther (2018)' OR title_basics.primaryTitle = 'Ant-Man and the Wasp (2018)' OR title_basics.primaryTitle = 'Avengers: Infinity War (2018)' OR title_basics.primaryTitle = 'Deadpool  (2016)')\n)\n\nGROUP BY title_basics.tconst\n\nORDER BY averageRating DESC;\n\nThis SQL query will retrieve movies that are either mystery or action, and also have a high average rating based on the user's historical preferences. The query will join the title_basics, title_ratings, and name_basics tables to retrieve information about the movies, such as the title, primary title, original title, and the average rating. The query will also use subqueries to filter the movies based on the user's input and historical preferences."}
{"id": 20789, "query": "Hi! Do you know of any good comedies?", "history": ["Foul Play  (1977)", "National Lampoon's Vacation (1983)", "National Lampoon's Christmas Vacation (1989)"], "groundtruth": ["Vacation  (2015)"], "output": "SELECT t.title, t.tconst, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, \n       r.averageRating, r.numVotes, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles, \n       c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings r ON t.tconst = r.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryName\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE t.genres LIKE '%comedy%' AND r.averageRating > 6 AND n.knownForTitles LIKE '%comedy%'\nGROUP BY t.tconst\nHAVING COUNT(DISTINCT n.knownForTitles) > 2\nORDER BY r.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have an average rating of at least 6, and have at least 2 known genres related to comedy. The query will also consider the user's historical preferences, which are movies that are similar to the ones they have previously rated. The query will group the results by title and have the results sorted by the average rating in descending order."}
{"id": 20795, "query": "i like all kinds, but lately I have been looking for good action movies.", "history": ["Doctor Strange  (2016)", "Iron Man  (2008)", "Spider-Man  (2002)"], "groundtruth": ["Iron Man 2 (2010)", "Man of Steel  (2013)", "Spider-Man: Homecoming (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Action'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Marvel%'\nAND title_principals.characters LIKE '%Superhero%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will select movies that are classified as \"Action\" and have more than 1000 votes, are directed by Marvel directors, and have characters that are classified as \"Superhero\". The results will be ordered by the average rating in descending order."}
{"id": 20810, "query": "I'm looking for horror/thriller movies", "history": ["Winchester (2018)", "The Exorcist  (1973)", "It Follows (2014)", "Friday the 13th  (1980)"], "groundtruth": ["Scream  (1996)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'horror' AND t1.genres = 'thriller'\nAND t2.averageRating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst\n                         FROM title_basics t4\n                         WHERE t4.primaryTitle IN (SELECT t5.title\n                                                   FROM title_basics t5\n                                                   WHERE t5.primaryTitle IN (SELECT t6.title\n                                                                       FROM title_basics t6\n                                                                       WHERE t6.primaryTitle = 'Winchester (2018)'\n                                                                       OR t6.primaryTitle = 'The Exorcist (1973)'\n                                                                       OR t6.primaryTitle = 'It Follows (2014)'\n                                                                       OR t6.primaryTitle = 'Friday the 13th (1980)'\n                                                       )\n                                      )\n                    )\n                )\nORDER BY t2.averageRating DESC;\n;"}
{"id": 20811, "query": "I'm looking for small budget horror/thrillers like It Follows (2014) .", "history": ["Killer Clowns from Outer Space (1988)", "It Follows (2014)"], "groundtruth": ["Curse of the Blue Lights (1988)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Horror' AND title_basics.runtimeMinutes < 120\nAND title_ratings.averageRating > 6\nAND title_principals.category = 'Actors'\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%Clown%'\nAND title_basics.startYear > 2000\nAND title_basics.endYear < 2020\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  JOIN name_basics ON title_basics.tconst = name_basics.tconst\n  WHERE title_basics.title = 'It Follows (2014)'\n)\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nThis query will retrieve movies that are horror, have a runtime"}
{"id": 20821, "query": "I  like family oriented movies.", "history": ["A Bug's Life (1998)", "101 Dalmatians II: Patch's London Adventure (2003)", "Antz (1998)"], "groundtruth": ["Christmas with the Kranks (2004)", "Elf  (2003)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Family'\nAND title_basics.startYear BETWEEN 1990 AND 2010\nAND title_basics.endYear BETWEEN 1990 AND 2010\nAND title_ratings.averageRating > 6\nAND title_principals.category = 'Actors'\nAND title_principals.job = 'Voice'\nAND title_principals.characters LIKE '%animated%'\n\nWHERE title_basics.tconst NOT IN (SELECT title_basics.tconst\n                                  FROM title_basics\n                                  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n                                  WHERE title_ratings.numVotes > 1000)\n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, name_basics.primaryName, title_crew.directors, title_principals.characters\nHAVING COUNT(DISTINCT title_basics.tconst) > 3\nORDER BY COUNT(DISTINCT title_basics.tconst) DESC;\n\nThis SQL query uses the IMDb database tables to retrieve movies that match the user's input and historical preferences. The query first joins the title_basics, name_basics, title_crew, and title_principals tables to retrieve information about the movies and their crews. It then filters the results to only include movies with a 'Family' genre, a start and end year between 1990 and 2"}
{"id": 20839, "query": "I'm looking for slasher movies", "history": ["Scream  (1996)", "Cabin Fever  (2000)", "The Texas Chainsaw Massacre 2 (1986)"], "groundtruth": ["Leatherface  (2017)", "Jigsaw (2017)", "Saw  (2003)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE \ntitle_basics.genres LIKE '%slasher%'\nAND title_ratings.averageRating > 6\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryProfession = 'Actor'\nAND title_crew.directors LIKE '%Wes Craven%'\nAND title_principals.category = 'Performer'\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%final girl%'\n\nGROUP BY \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_rat"}
{"id": 20841, "query": "Great, do you have any good comedy suggestions?", "history": ["Beetlejuice (1988)", "Ghostbusters (1984)"], "groundtruth": ["Anchorman "], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.knownForTitles, title_crew.directors, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.genres = 'Comedy'))\nAND title_principals.job IN ('Actor', 'Actress')\nAND title_principals.characters LIKE '%comedy%'\nAND title_basics.startYear <= 2000\nAND title_basics.endYear >= 1980\nAND title_ratings.numVotes > 1000\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query retrieves the following information for comedies from the IMDb database:\n\n1. Title, primary title, original title, average rating, and number of votes from the title_basics and title_ratings tables.\n2. Primary name, known for titles, and job from the name_basics table.\n3. Directors and crew from the title_crew table.\n4. Category, job, and characters from the title_principals table.\n5. Filters out non-comedies and films with less than 1000 votes"}
{"id": 20847, "query": "Hi. Yes, you are right. I watched Up  (2009) . It's a great moovie. My daughter loved it. Will you recommend me something similar?", "history": ["Up  (2009)", "The Avengers  (2012)"], "groundtruth": ["Annie  (2014)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.genres, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Adventure' AND title_ratings.averageRating > 7 AND title_basics.primaryTitle NOT IN (SELECT title_basics.primaryTitle FROM title_basics WHERE user_preferences = true)\nAND title_principals.characters LIKE '%animated%';\n\nThis SQL query will retrieve movies with the Adventure genre, high average rating (>7), and not in the user's preference history. Additionally, it will filter out movies that have animated characters.\n\nNote: This query assumes that the user's preference history is stored in a separate table, with the title_basics.primaryTitle column as the foreign key. The query uses a subquery to exclude movies that are already in the user's preference history."}
{"id": 20855, "query": "I like comedy movies and action movies like Click  (2010) and Black Panther (2018)", "history": ["Click  (2010)", "Black Panther (2018)"], "groundtruth": ["Ant-Man  (2015)", "A Wrinkle in Time ", "Here Comes the Bride, My Mom! (2010)", "Man-Proof (1938)", "What Women Want  (2011)", "Killing Time  (2013)"], "output": "SELECT * FROM (\n  SELECT t.tconst, t.titleType, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres,\n         AVG(r.rating) AS avg_rating, COUNT(r.rating) AS num_votes\n    FROM title_basics t\n    JOIN title_ratings r ON t.tconst = r.tconst\n    WHERE t.titleType IN ('comedy', 'action')\n    AND t.primaryTitle LIKE '%Click%'\n    AND t.startYear = 2010\n    GROUP BY t.tconst\n  ) AS popular_movies\n  JOIN (\n    SELECT n.nconst, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles\n      FROM name_basics n\n      WHERE n.primaryProfession IN ('actor', 'actress')\n      AND n.knownForTitles LIKE '%Black Panther%'\n  ) AS popular_actors\n  ON popular_movies.tconst = popular_actors.nconst\n  WHERE popular_actors.primaryName LIKE '%Chadwick Boseman%'\n  ORDER BY avg_rating DESC, num_votes DESC\n;"}
{"id": 20856, "query": "I should watch get out.", "history": ["Up  (2009)", "A Wrinkle in Time ", "Get Out (2017)", "Coco  (2017)"], "groundtruth": ["The Cabin in the Woods", "Man of Steel  (2013)"], "output": "SELECT * FROM (\n  SELECT t.tconst, t.titleType, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, \n  AVG(r.rating) AS avg_rating, COUNT(r.title_id) AS num_votes\n  FROM title_basics t\n  JOIN title_ratings r ON t.tconst = r.title_id\n  WHERE t.primaryTitle = 'Get Out'\n  GROUP BY t.tconst\n) AS recommended_movies\nWHERE num_votes > 1000\nORDER BY avg_rating DESC;\n\n;"}
{"id": 20857, "query": "I can watch scary or romantic.", "history": ["Coco  (2017)", "Click  (2010)"], "groundtruth": ["I Now Pronounce You Chuck & Larry (2007)", "Get Out (2017)"], "output": "SELECT t.title, t.titleType, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles, c.directors, c.writers, c.ordering, c.category, c.job, c.characters\nFROM title_basics t\nJOIN name_basics n ON t.primaryTitle = n.primaryTitle\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE t.genres ='scary' OR t.genres = 'romantic'\nAND t.startYear BETWEEN 2010 AND 2017\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE t.tconst = title_ratings.tconst\n  AND title_ratings.averageRating > 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE t.tconst = title_principals.tconst\n  AND title_principals.category = 'actor'\n  AND title_principals.job = 'director'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE t.tconst = title_ratings.tconst\n  AND title_ratings.averageRating < 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE t.tconst = title_principals.tconst\n  AND title_principals.category = 'actor'\n  AND title_principals.job = 'writer'\n)\nAND t.tconst NOT IN (SELECT tconst FROM title_ratings WHERE averageRating > 7)\nAND t.tconst NOT IN (SELECT tconst FROM title_principals WHERE category = 'actor' AND job = 'director')\nAND t.tconst NOT IN (SELECT tconst FROM title_principals WHERE category = 'actor' AND job = '"}
{"id": 20864, "query": "I like horror movies, what would you recommend?", "history": ["It (1990)", "Scary Movie (2000)", "Get Out (2017)"], "groundtruth": ["The Shining  (1980)", "It  (2017)"], "output": "SELECT \n    t.title, \n    t.titleType, \n    t.primaryTitle, \n    t.originalTitle, \n    t.isAdult, \n    t.startYear, \n    t.endYear, \n    t.runtimeMinutes, \n    t.genres, \n    n.primaryName, \n    n.birthYear, \n    n.deathYear, \n    n.primaryProfession, \n    n.knownForTitles, \n    c.category, \n    c.job, \n    c.characters \nFROM \n    title_basics t \n    JOIN name_basics n ON t.primaryTitle = n.title \n    JOIN title_crew c ON t.tconst = c.tconst \nWHERE \n    t.genres LIKE '%Horror%' AND \n    t.startYear <= 2022 AND \n    t.endYear >= 2000 AND \n    n.primaryProfession = 'Actor' AND \n    c.category = 'Director' AND \n    c.job = 'Director' AND \n    c.characters = 'Jordan Peele' \nGROUP BY \n    t.title, \n    t.titleType, \n    t.primaryTitle, \n    t.originalTitle, \n    t.isAdult, \n    t.startYear, \n    t.endYear, \n    t.runtimeMinutes, \n    t.genres, \n    n.primaryName, \n    n.birthYear, \n    n.deathYear, \n    n.primaryProfession, \n    n.knownForTitles, \n    c.category, \n    c.job, \n    c.characters \nHAVING \n    COUNT(DISTINCT t.tconst) > 1 AND \n    COUNT(DISTINCT n.title) > 1 AND \n    COUNT(DISTINCT c.tconst) > 1;\n\nThis SQL query uses the IMDb database schema to retrieve horror movies that meet the user's preference history"}
{"id": 20866, "query": "I am looking for some good comedies. For the record, I am in no way easily offended, so content isnt an issue.", "history": ["Superbad  (2007)"], "groundtruth": ["Jumanji  (2017)", "Rush Hour "], "output": "SELECT t1.title, t1.titleType, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t2.averageRating > 7 AND t2.numVotes > 1000\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t3\n  WHERE t3.tconst = t1.tconst AND t3.category = 'Adult'\n)\nAND EXISTS (\n  SELECT 1\n  FROM title_crew c\n  JOIN name_basics n ON c.directors = n.nconst\n  WHERE n.primaryProfession = 'Actor' AND n.knownForTitles = 'Superbad (2007)'\n)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve a list of movies that are comedies, have a high average rating, and have at least 1000 votes. It will also exclude any movies that have adult content or are in the adult category. Finally, it will only include movies that have a director or writer who has worked on \"Superbad (2007)\".\n\nNote that this query assumes that the \"Superbad (2007)\" movie is in the title_basics table with a tconst value of \"Superbad (2007)\". If the movie is not in the table, the query will not return any results."}
{"id": 20868, "query": "yes! Both of those as well! I liked Click  (2010) but not You Don't Mess with the Zohan (2008)", "history": ["Click  (2010)", "American Pie  (1999)", "Scary Movie (2000)"], "groundtruth": ["I Now Pronounce You Chuck & Larry (2007)"], "output": "SELECT \n  title_basics.title, \n  title_basics.primaryTitle, \n  title_basics.originalTitle, \n  title_basics.isAdult, \n  title_basics.startYear, \n  title_basics.endYear, \n  title_basics.runtimeMinutes, \n  title_basics.genres, \n  title_ratings.averageRating, \n  title_ratings.numVotes, \n  name_basics.primaryName, \n  name_basics.birthYear, \n  name_basics.deathYear, \n  name_basics.primaryProfession, \n  name_basics.knownForTitles\nFROM \n  title_basics \n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n  JOIN name_basics ON title_basics.tconst = name_basics.tconst \nWHERE \n  title_basics.isAdult = 0  -- exclude adult movies\n  AND title_basics.startYear BETWEEN 2000 AND 2020  -- exclude movies released before 2000 and after 2020\n  AND title_ratings.averageRating > 6.5  -- exclude movies with low ratings\n  AND name_basics.primaryProfession = 'Actor'  -- exclude movies with primary profession other than Actor\n  AND title_basics.primaryTitle NOT IN ('You Don't Mess with the Zohan', 'Scary Movie')  -- exclude movies that are not liked\n  AND title_ratings.numVotes > 10000  -- exclude movies with low number of votes\nGROUP BY \n  title_basics.title, \n  title_basics.primaryTitle, \n  title_basics.originalTitle, \n  title_basics.isAdult, \n  title_basics.startYear, \n  title_basics.endYear, \n  title_basics.runtimeMinutes, \n  title_basics.genres,"}
{"id": 20869, "query": "I am great, do you know any good movies similar to Ant-Man  (2015)", "history": ["Ant-Man  (2015)", "Deadpool  (2016)"], "groundtruth": ["Avengers: Infinity War (2018)", "Deadpool 2  (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.primaryTitle = 'Ant-Man (2015)'\nAND (\n    title_ratings.averageRating > 7\n    OR title_ratings.numVotes > 100000\n)\nAND (\n    name_basics.primaryName LIKE '%Paul Rudd%'\n    OR name_basics.primaryName LIKE '%Evangeline Lilly%'\n    OR name_basics.primaryName LIKE '%Michael Douglas%'\n)\nAND (\n    title_crew.directors LIKE '%Peyton Reed%'\n    OR title_crew.directors LIKE '%Anthony Russo%'\n    OR title_crew.directors LIKE '%Joe Russo%'\n)\nAND (\n    title_princip"}
{"id": 20873, "query": "I like comedy and musicals", "history": ["Grease  (1978)", "Dreamgirls  (2006)"], "groundtruth": ["West Side Story  (1961)", "Camelot  (1967)", "Evita  (1996)", "Grease 2 (1982)", "The Greatest Showman (2017)"], "output": "SELECT \ntitle_basics.title_id, \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.title_id = title_ratings.title_id\nINNER JOIN name_basics ON title_basics.title_id = name_basics.title_id\nINNER JOIN title_crew ON title_basics.title_id = title_crew.title_id\nINNER JOIN title_principals ON title_basics.title_id = title_principals.title_id\n\nWHERE title_basics.genres LIKE '%comedy%' AND title_basics.genres LIKE '%musicals%'\n\nAND title_ratings.averageRating > (\n    SELECT AVG(averageRating)\n    FROM title_ratings\n    WHERE title_id IN (\n        SELECT title_id\n        FROM title_basics\n        WHERE genres LIKE '%comedy%' AND genres LIKE '%musicals%'\n    )\n)\n\nAND title_ratings.numVotes > (\n    SELECT COUNT(numVotes)\n    FROM title_ratings\n    WHERE title_id IN (\n        SELECT title_id\n        FROM title_basics\n        WHERE"}
{"id": 20899, "query": "i like comedy movies like American Pie  (1999) and Scary Movie (2000)", "history": ["American Pie  (1999)", "Scary Movie (2000)"], "groundtruth": ["Jaws  (1975)", "Michael Clayton  (2007)", "The Goonies (1985)"], "output": "SELECT title_basics.title, title_ratings.averageRating, name_basics.primaryName\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE genres LIKE '%comedy%')\n)\nAND title_basics.startYear >= 1999\nAND title_basics.endYear <= 2000\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE birthYear < 1970)\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE deathYear > 2000)\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query uses a combination of joins and subqueries to retrieve movies that meet the user's input and preference history. The query first joins the title_basics, title_ratings, and name_basics tables to retrieve the title, average rating, and primary name of the movies. The WHERE clause filters the results to only include movies with the comedy genre, a minimum average rating of 7 (based on the user's preference history), and a start year of 1999 or later. The AND clauses further filter the results to exclude movies with directors or writers born before 1970 or died after 2000. Finally, the ORDER BY clause sorts the results by average rating in descending order.\n\nNote that this is just one possible approach to generating movie recommendations, and there are many other factors that could be considered in the query, such as the user's watch history, their ratings, and other user preferences."}
{"id": 20900, "query": "My favorite movies are about Action", "history": ["Black Panther (2018)", "Michael Clayton  (2007)", "Star Trek  (2009)"], "groundtruth": ["Gladiator  (2000)", "The Score  (1978)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\n\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\n\nWHERE \ntitle_basics.genres = 'Action'\nAND title_ratings.averageRating > (\n    SELECT \n        AVG(title_ratings.averageRating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                title_basics.tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.genres = 'Action'\n        )\n    AND title_ratings.numVotes > 1000\n)\n\nAND title_basics.startYear BETWEEN '2010' AND '2022'\nAND title_basics.endYear IS NULL\n\nGROUP BY \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_bas"}
{"id": 20901, "query": "Hello! I am looking for a good family movie.", "history": ["The Karate Kid  (2010)", "I Now Pronounce You Chuck & Larry (2007)", "Ted  (2012)", "The Goonies (1985)"], "groundtruth": ["Frozen (2013)"], "output": "SELECT t1.title, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Family' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst IN (SELECT t4.tconst FROM title_ratings t4 WHERE t4.averageRating > 7 AND t4.numVotes > 1000))\nAND t1.startYear BETWEEN 2000 AND 2020\nAND NOT EXISTS (SELECT 1 FROM title_principals t3 WHERE t3.tconst = t1.tconst AND t3.category = 'Adult')\nAND NOT EXISTS (SELECT 1 FROM name_basics t4 WHERE t4.nconst = t1.primaryName AND t4.birthYear > 1980 AND t4.deathYear < 2000)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will select movies with the 'Family' genre, high average rating (above 7), and a release date between 2000 and 2020. It will also exclude movies with adult content or movies that feature actors born before 1980 or died after 2000. The result will be a list of movies that are likely to be good family movies based on the user's preference history and the IMDb database."}
{"id": 20902, "query": "but I do love comedy", "history": ["Fast & Furious  (2009)", "Coming to America (1988)", "The Ring  (2002)", "The Silence of the Lambs  (1991)"], "groundtruth": ["I Now Pronounce You Chuck & Larry (2007)", "The Cabin", "The Goonies (1985)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_basics.startYear <= 2022\nAND title_basics.endYear >= 2000\nAND title_principals.category = 'Movie'\nAND title_principals.job = 'Actor'\nAND title_principals.characters = 'Lead'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 1000\nAND NOT EXISTS (\n    SELECT 1 FROM title_ratings\n    WHERE title_ratings.tconst = title_basics.tconst\n    AND title_ratings.numVotes > 1000\n    AND title_ratings.averageRating > 7\n    AND title_ratings.user_id = <user_id>\n)\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nNote: <user_id> should be replaced with the actual user ID. The query will return a list of movies that meet the user's input and historical preferences, and have not been rated by the user before."}
{"id": 20903, "query": "I like comedy movies", "history": ["You Don't Mess with the Zohan (2008)", "Click  (2010)"], "groundtruth": ["Joe Maddison's War", "Dancemaker (1998)", "Princess  (2006)", "Airhawk (1981)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.genres = 'Comedy'\nAND t2.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'You Don't Mess with the Zohan (2008)'))\nAND t2.numVotes > (SELECT COUNT(numVotes) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'You Don't Mess with the Zohan (2008)'))\nAND t1.startYear BETWEEN (SELECT MIN(startYear) FROM title_basics WHERE primaryTitle = 'Click  (2010)') AND (SELECT MAX(endYear) FROM title_basics WHERE primaryTitle = 'Click  (2010)')\nAND t1.endYear BETWEEN (SELECT MIN(startYear) FROM title_basics WHERE primaryTitle = 'You Don't Mess with the Zohan (2008)') AND (SELECT MAX(endYear) FROM title_basics WHERE primaryTitle = 'You Don't Mess with the Zohan (2008)')\nGROUP"}
{"id": 20928, "query": "Musicals, comedy, action", "history": ["Ant-Man  (2015)", "Avengers: Infinity War (2018)", "Dreamgirls  (2006)"], "groundtruth": ["Incredibles 2 (2018)", "Ant-Man and the Wasp (2018)"], "output": "SELECT * FROM (\n  SELECT title_basics.tconst, title_basics.titleType, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \n  title_ratings.averageRating, title_ratings.numVotes, \n  name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \n  title_crew.directors, title_crew.writers, \n  title_principals.ordering, title_principals.nconst, title_principals.category, title_principals.job, title_principals.characters \n  FROM title_basics \n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n  JOIN name_basics ON title_basics.tconst = name_basics.tconst \n  JOIN title_crew ON title_basics.tconst = title_crew.tconst \n  JOIN title_principals ON title_basics.tconst = title_principals.tconst \n  WHERE title_basics.titleType IN ('Musicals', 'Comedy', 'Action') \n  AND title_ratings.averageRating > 7 \n  AND title_principals.category IN ('Actors', 'Directors', 'Writers') \n  AND name_basics.primaryProfession IN ('Actor', 'Director', 'Writer') \n  AND title_basics.startYear BETWEEN 2000 AND 2020 \n  AND title_basics.endYear BETWEEN 2000 AND 2020 \n  AND title_basics.runtimeMinutes BETWEEN 90 AND 180 \n  AND title_basics.genres IN ('Comedy"}
{"id": 20936, "query": "I like Action and comedy movies", "history": ["Deadpool  (2016)", "Deadpool 2  (2018)"], "groundtruth": ["Avengers: Infinity War (2018)", "Rush Hour 3 (2007)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes \nFROM title_basics t1 \nJOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst \nWHERE t1.genres LIKE '%Action%' AND t1.genres LIKE '%Comedy%' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst IN (SELECT t4.tconst FROM title_basics t4 WHERE t4.primaryTitle = 'Deadpool  (2016)' OR t4.primaryTitle = 'Deadpool 2  (2018)')) \nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are both action and comedy, have a high rating, and are similar to the user's preferred movies 'Deadpool  (2016)' and 'Deadpool 2  (2018)'.\n\nNote: The LIKE operator is used to match the genres of the movie with the input user preferences. The subquery is used to get the average rating of the movies that are similar to the preferred movies. The JOIN clause is used to combine the title basics and title ratings tables."}
{"id": 20945, "query": "I like romantic comedy and older movies.", "history": ["Runaway Bride  (1999)", "Enough  (2002)"], "groundtruth": ["The Bounty Hunter  (2010)"], "output": "SELECT \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.genres LIKE '%romantic comedy%' \nAND title_basics.startYear < '2000-01-01' \nAND title_basics.endYear > '1999-12-31' \nAND title_ratings.numVotes > 1000\nAND name_basics.primaryProfession = 'Actress'\nAND title_principals.category = 'Performer'\nAND title_principals.job = 'Lead'\nAND title_principals.characters LIKE '%female%'\n\nORDER BY \ntitle_ratings.averageRating DESC, title_basics.startYear ASC;"}
{"id": 20963, "query": "I like Comedy and Action movies", "history": ["Black Panther (2018)", "I Now Pronounce You Chuck & Larry (2007)", "Get Out (2017)"], "groundtruth": ["Jumanji  (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy' AND title_basics.genres = 'Action'\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE genres = 'Comedy' AND genres = 'Action'))\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_principals.characters = 'Black'\nAND title_crew.directors = 'Ryan Coogler'\nAND title_crew.writers = 'Ryan Coogler'\nAND title_basics.startYear = 2018\nAND title_basics.endYear = 2018\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_bas"}
{"id": 20964, "query": "I can recommend you Deadpool  (2016) the old one and the new one Deadpool 2  (2018)", "history": ["Deadpool 2  (2018)", "Black Panther (2018)", "The Mask  (1994)", "Deadpool  (2016)", "Click  (2006)"], "groundtruth": ["Fun with Dick and Jane  (2005)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.tconst = name_basics.tconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.primaryTitle IN ('Deadpool', 'Deadpool 2')\n    AND title_ratings.averageRating > 7\n    AND name_basics.primaryName IN ('Ryan Reynolds', 'Josh Brolin')\n    AND title_crew.directors IN ('Tim Miller', 'David Leitch')\n    AND title_principals.category IN ('Action', 'Comedy')\n    AND title_principals.job IN ('Actor', 'Director')\n    AND title_principals.characters IN ('Wade Wilson', 'Deadpool')\nORDER BY \n    title_ratings.average"}
{"id": 20967, "query": "I like Comedy and action movies", "history": [], "groundtruth": ["The Commuter  (2017)", "Fun with Dick and Jane  (2005)", "Elf  (2003)", "Click  (2006)"], "output": "SELECT \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \n    title_ratings.averageRating, title_ratings.numVotes, \n    name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \n    title_crew.directors, title_crew.writers, \n    title_principals.ordering, title_principals.category, title_principals.job, \n    title_principals.characters \nFROM \n    title_basics \n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \n    JOIN title_crew ON title_basics.tconst = title_crew.tconst \n    JOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.genres LIKE '%Comedy%' AND title_basics.genres LIKE '%Action%' \n    AND title_ratings.numVotes > 1000 \n    AND name_basics.primaryProfession IN ('Actor', 'Actress') \n    AND title_crew.directors IN ('The Wachowskis', 'The Matrix') \n    AND title_principals.job IN ('Actor', 'Actress') \n    AND title_principals.characters LIKE 'Neo%' \nGROUP BY \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \n    title_ratings.averageRating, title_ratings.numVotes, \n    name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \n    title_crew.directors, title_crew.writers, \n    title_principals.ordering, title_principals.category, title_principals."}
{"id": 20968, "query": "I also like Comedy movies like Click  (2006)", "history": ["Click  (2010)", "I Now Pronounce You Chuck & Larry (2007)", "Click  (2006)"], "groundtruth": ["Avengers: Infinity War (2018)", "Big Daddy  (1999)"], "output": "SELECT \n  t.title_id, \n  t.title, \n  t.primaryTitle, \n  t.originalTitle, \n  t.isAdult, \n  t.startYear, \n  t.endYear, \n  t.runtimeMinutes, \n  t.genres, \n  n.name, \n  n.birthYear, \n  n.deathYear, \n  n.primaryProfession, \n  n.knownForTitles, \n  c.directors, \n  c.writers, \n  p.category, \n  p.job, \n  p.characters\nFROM \n  title_basics t \n  JOIN name_basics n ON t.primaryTitle = n.title \n  JOIN title_crew c ON t.title_id = c.title_id \n  JOIN title_principals p ON t.title_id = p.title_id \nWHERE \n  t.genres LIKE '%Comedy%' \n  AND t.title NOT IN (SELECT title FROM title_ratings WHERE user_id = 123)  -- exclude movies already rated by the user\n  AND t.startYear BETWEEN 2000 AND 2010 \n  AND t.runtimeMinutes > 90 \n  AND n.birthYear = 1970 \n  AND n.deathYear = 1979 \n  AND c.directors LIKE '%Adam%']\nORDER BY \n  RANDOM()\nLIMIT 5;\n\nThis SQL query will retrieve movies that are classified as comedies, were released between 2000 and 2010, have a runtime of over 90 minutes, and have directors who were born between 1970 and 1979. The query will also exclude movies that the user has already rated. The final results will be ordered randomly and limited to 5 movies."}
{"id": 20970, "query": "So, i like Action, comedy and Marvel movies", "history": [], "groundtruth": ["Black Panther (2018)", "The Commuter  (2017)", "Independence Day  (2000)", "Elf  (2003)", "Click  (2010)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n       t2.averageRating, t2.numVotes, n1.primaryName, n1.birthYear, n1.deathYear, n1.primaryProfession, n1.knownForTitles, \n       c1.category, c1.job, c1.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n1 ON t1.primaryTitle = n1.primaryName\nJOIN title_crew c1 ON t1.tconst = c1.tconst\nWHERE t1.genres LIKE '%Action%' AND t1.genres LIKE '%Comedy%' AND t1.genres LIKE '%Marvel%'\nAND t2.averageRating > 7 AND t2.numVotes > 10000\nAND n1.primaryProfession IN ('Actor', 'Actress')\nAND c1.category IN ('Director', 'Writer')\nGROUP BY t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n       t2.averageRating, t2.numVotes, n1.primaryName, n1.birthYear, n1.deathYear, n1.primaryProfession, n1.knownForTitles, \n       c1.category, c1.job, c1.characters\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are classified as action, comedy, and Marvel movies, have a high average rating (greater than 7) and a large number of votes (greater than 10,000), and are directed or written by actors or actresses. The query will also consider the primary"}
{"id": 20971, "query": "I'm into Horror movies like The Texas Chain Saw Massacre (1974)", "history": ["The Texas Chain Saw Massacre (1974)", "Get Out (2017)"], "groundtruth": ["Bonnie and Clyde  (1967)", "The Commuter  (2017)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.genres = 'Horror' \nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE genres = 'Horror') \nAND title_basics.startYear BETWEEN 1970 AND 2019 \nAND title_basics.endYear BETWEEN 1970 AND 2019 \nAND title_ratings.numVotes > 1000 \nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE tconst = title_ratings.tconst AND rating = 1)  -- avoid recommending movies with only 1 rating\n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_"}
{"id": 20978, "query": "I'm looking for time travel movies like Looper  (2012)", "history": ["Looper  (2012)", "Bill & Ted's Excellent Adventure (1989)", "Back to the Future (1985)"], "groundtruth": ["The Time Machine  (1960)", "Primer  (2004)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.genres LIKE '%time travel%'\nAND title_basics.startYear BETWEEN 1980 AND 2019\nAND title_ratings.averageRating > 7\nAND title_principals.category IN ('actors', 'actresses', 'directors', 'writers')\n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_cre"}
{"id": 20985, "query": "Do you know of any interesting documentaries?", "history": ["Making a Murderer", "Super Size Me (2004)"], "groundtruth": ["Food, Inc. (2008)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Documentary' AND t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst FROM title_ratings t4 WHERE t4.averageRating > 7)\n)\nAND t1.primaryTitle NOT IN (SELECT t5.primaryTitle FROM title_basics t5 WHERE t5.tconst IN (SELECT t6.tconst FROM title_basics t6 WHERE t6.titleType = 'Series'))\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve documentaries with high average ratings and not part of any series. The query first joins the title_basics and title_ratings tables to get the title information and ratings. Then it filters the results to only include documentaries and excludes series. Finally, it orders the results by average rating in descending order and start year in descending order.\n\nNote: The user preference history is not explicitly included in the query, but if you want to incorporate it, you can add a join with the title_ratings table to get the ratings for the movies the user has watched and liked."}
{"id": 20995, "query": "Do you know of any family friendly movies?", "history": ["Peter Rabbit (2018)", "Finding Nemo (2003)", "Finding Dory (2016)"], "groundtruth": ["Black Panther (2018)"], "output": "SELECT * FROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryName\nWHERE t.genres = 'Family' AND t.startYear > 2010 AND t.endYear < 2020\nAND tr.averageRating > 6 AND n.birthYear > 1970 AND n.deathYear < 2010\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals tp\n  WHERE tp.tconst = t.tconst AND tp.category = 'Adult'\n)\nORDER BY tr.averageRating DESC, n.primaryName ASC\n\n;\n\nThis SQL query is designed to retrieve movies that are family-friendly, have a high rating, and were released between 2010 and 2020. It also excludes movies with adult content. The query joins three tables: title_basics, title_ratings, and name_basics.\n\nHere's a breakdown of the query:\n\n1. SELECT \\* FROM title_basics t: This selects all columns from the title_basics table.\n2. JOIN title_ratings tr ON t.tconst = tr.tconst: This joins the title_basics table with the title_ratings table based on the tconst column.\n3. JOIN name_basics n ON t.primaryTitle = n.primaryName: This joins the title_basics table with the name_basics table based on the primaryTitle column.\n4. WHERE t.genres = 'Family' AND t.startYear > 2010 AND t.endYear < 2020: This filters the results to only include movies that are classified as \"Family\" and were released between 2010 and 2020.\n5. AND tr.averageRating > 6: This filters the results to only include movies with an average rating of at least 6.\n6. AND n.birthYear > 1970 AND n.deathYear < 2010: This filters the results to only include actors and actresses who were born before"}
{"id": 21006, "query": "i like horror, Rom. Coms, and thrillers", "history": ["Halloween  (2007)", "Avengers: Infinity War (2018)", "Saw  (2004)"], "groundtruth": ["It  (2017)"], "output": "SELECT \ntitle_basics.primaryTitle, \ntitle_basics.startYear, \ntitle_basics.runtimeMinutes, \ntitle_ratings.averageRating, \nname_basics.primaryName, \ntitle_crew.directors, \ntitle_principals.characters\n\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.genres LIKE '%Horror%' AND title_basics.genres LIKE '%Romantic Comedy%' AND title_basics.genres LIKE '%Thriller%'\nAND title_ratings.numVotes > 10000\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE birthYear < 1980) -- exclude directors who are too young\n\nGROUP BY title_basics.primaryTitle, title_basics.startYear, title_basics.runtimeMinutes, title_ratings.averageRating, name_basics.primaryName, title_crew.directors, title_principals.characters\n\nHAVING AVG(title_ratings.averageRating) > 7.5 AND COUNT(DISTINCT title_principals.characters) > 4 -- filter out movies with low average rating and few characters\n\nORDER BY AVG(title_ratings.averageRating) DESC, COUNT(DISTINCT title_principals.characters) DESC;\n\n;"}
{"id": 21015, "query": "Sometime i like watching Comedy movies, what would you recommend?", "history": ["The Texas Chain Saw Massacre (1974)", "Black Panther (2018)", "Wish Upon (2017)"], "groundtruth": ["Life of the Party  (2018)", "The Avengers  (2012)", "Rampage (2018)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n3 ON t2.primaryName = n3.primaryName\nWHERE t1.genres = 'Comedy' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.primaryName IN (SELECT n2.primaryName FROM name_basics n2 WHERE n2.knownForTitles LIKE '%Comedy%'))\nAND t2.numVotes > 1000\nAND NOT EXISTS (SELECT 1 FROM title_principals t4 WHERE t4.tconst = t1.tconst AND t4.category = 'Actor' AND t4.job = 'Director')\nAND NOT EXISTS (SELECT 1 FROM title_crew t5 WHERE t5.tconst = t1.tconst AND t5.job = 'Writer')\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as \"Comedy\" and have an average rating higher than the average rating of movies that are also classified as \"Comedy\" and have at least 1000 votes. Additionally, it will exclude movies that have any directors or writers in common with the user's preferred movies. Finally, it will order the results by average rating in descending order and then by number of votes in descending order."}
{"id": 21022, "query": "Do you have some movie reccomendations", "history": ["The Lord of the Rings  (1978)", "Scarface  (1983)"], "groundtruth": ["Seven  (1995)"], "output": "SELECT * FROM (\n  SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t.title_ratings.averageRating, \n    t.title_ratings.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles, \n    c.title_crew.directors, \n    c.title_crew.writers, \n    p.title_principals.ordering, \n    p.title_principals.nconst, \n    p.title_principals.category, \n    p.title_principals.job, \n    p.title_principals.characters\n  FROM \n    title_basics t \n  JOIN \n    title_ratings t_ratings ON t.title_basics.title = t_ratings.title_basics.title \n  JOIN \n    name_basics n ON t.title_basics.primaryTitle = n.name_basics.title \n  JOIN \n    title_crew c ON t.title_basics.title = c.title_crew.title \n  JOIN \n    title_principals p ON t.title_basics.title = p.title_principals.title \n  WHERE \n    t.title_basics.isAdult = 0  -- exclude adult movies\n    AND t.title_basics.startYear BETWEEN 1970 AND 2020  -- exclude movies before"}
{"id": 21026, "query": "I like scary movies", "history": [], "groundtruth": ["The Cabin in the Woods"], "output": "SELECT \n    t.title_basics.primaryTitle,\n    t.title_basics.startYear,\n    t.title_basics.runtimeMinutes,\n    t.title_ratings.averageRating,\n    t.title_crew.directors,\n    t.title_principals.characters\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n    JOIN name_basics n ON t.title_basics.primaryName = n.nconst\n    JOIN title_crew c ON t.title_basics.tconst = c.tconst\n    JOIN title_principals p ON t.title_basics.tconst = p.tconst\nWHERE \n    t.title_basics.genres LIKE '%horror%'\n    AND t.title_ratings.numVotes > 1000\n    AND n.birthYear BETWEEN 1980 AND 1990\n    AND c.directors LIKE '%Guillermo del Toro%'\n    AND p.job LIKE '%actor%'\n    AND p.characters LIKE '%monster%'\nORDER BY \n    t.title_ratings.averageRating DESC;\n\n;"}
{"id": 21029, "query": "Do you have any crime good crime movies", "history": [], "groundtruth": ["True Lies (1994)", "Ronin  (1998)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%crime%' AND title_ratings.numVotes > 1000\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query joins the title_basics, title_ratings, title_crew, and title_principals tables to retrieve movie titles, their primary titles, average ratings, directors, and characters, respectively. The query filters the results to only include movies with a genre of \"crime\" and at least 1000 votes. Finally, the results are sorted in descending order by average rating."}
{"id": 21031, "query": "do you have some good movies to recommend", "history": ["James Bond  (2015)", "Apocalypto (2006)"], "groundtruth": ["Casino Royale  (2006)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n       t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, \n       t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.genres = 'Action' AND t2.averageRating > 7 AND t3.primaryProfession = 'Actor'\nAND t4.directors = 'Martin Campbell' AND t5.category = 'Supporting Actor'\nAND t1.startYear = 2015 AND t1.endYear = 2015\nAND t1.runtimeMinutes > 120\nAND t2.numVotes > 10000\nGROUP BY t1.title, t1.primaryTitle, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n         t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, \n         t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nHAVING COUNT(DISTINCT t5.job) > 2\nORDER BY t2.averageRating DESC, t1.startYear DESC;"}
{"id": 21035, "query": "I looking for good drama movies", "history": ["The Untouchables  (1987)", "The Pianist  (2002)", "Whiplash  (2014)"], "groundtruth": ["Dunkirk  (2017)"], "output": "SELECT \n  t.title_id, t.title, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, \n  r.averageRating, r.numVotes, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles, \n  c.category, c.job, c.characters\nFROM \n  title_basics t \n  JOIN title_ratings r ON t.title_id = r.tconst \n  JOIN name_basics n ON t.title_id = n.tconst \n  JOIN title_crew c ON t.title_id = c.tconst \nWHERE \n  t.genres LIKE '%Drama%' AND \n  r.averageRating > (SELECT AVG(r2.averageRating) FROM title_ratings r2 WHERE r2.tconst = t.title_id AND r2.numVotes > 100) AND \n  NOT EXISTS (SELECT 1 FROM title_ratings r3 WHERE r3.tconst = t.title_id AND r3.averageRating > r.averageRating) \n  AND NOT EXISTS (SELECT 1 FROM name_basics n3 WHERE n3.tconst = t.title_id AND n3.primaryName NOT IN (SELECT p.primaryName FROM name_basics p WHERE p.tconst = t.title_id))\nGROUP BY \n  t.title_id, t.title, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, \n  r.averageRating, r.numVotes, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles, \n  c.category, c.job, c.characters\nHAVING \n  COUNT(DISTINCT c.job) > 2 AND \n  COUNT(DISTINCT c.category) > 2"}
{"id": 21041, "query": "Hello looking for a great movie to watch with my boyfriend tonight", "history": ["Jumanji  (2017)", "Baywatch  (2017)", "Rampage (2018)"], "groundtruth": ["Oldboy  (2003)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_basics.genres,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Action'\nAND title_basics.startYear BETWEEN 2015 AND 2020\nAND title_ratings.averageRating > 6.5\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_principals.characters = 'Human'\nAND name_basics.primaryProfession = 'Actor'\nAND name_basics.knownForTitles = 'Jumanji  (2017)', 'Baywatch  (2017)', 'Rampage (2018)'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.start"}
{"id": 21042, "query": "I am looking for some new movie suggestions.  Do you have any?", "history": ["The Boss  (2016)", "Fifty Shades of Grey  (2015)"], "groundtruth": ["Life of the Party  (2018)", "Rampage (2018)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t2.averageRating > 6 AND t2.numVotes > 1000\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  JOIN title_principals t4 ON t3.tconst = t4.tconst\n  WHERE t3.primaryName IN ('Melissa McCarthy', 'Jamie Dornan')\n)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve all movies that are classified as comedies, have an average rating above 6, and have more than 1000 votes. It will also exclude any movies that feature Melissa McCarthy or Jamie Dornan in the leading roles. The results will be sorted in descending order by average rating.\n\nNote that this query assumes that the user's preference history is stored in the title_ratings table with the appropriate columns for average rating and num votes. The NOT EXISTS clause is used to exclude any movies that feature Melissa McCarthy or Jamie Dornan in the leading roles."}
{"id": 21043, "query": "Hello Im so bored can you suggest a movie for me?", "history": ["Game Night (2018)", "The Boss  (2016)"], "groundtruth": ["Blockers (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > 7\nAND title_basics.startYear = 2018\nAND title_basics.endYear = 2018\nAND name_basics.primaryName LIKE '%Jennifer%'\nAND NOT EXISTS (\n  SELECT 1 \n  FROM title_principals \n  WHERE title_principals.tconst = title_basics.tconst \n  AND title_principals.category = 'Actress'\n  AND title_principals.job = 'Lead'\n  AND title_principals.characters LIKE '%Jennifer Lawrence%'\n)\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will suggest movies to the user based on their input and historical preferences. The query joins the title_basics, title_ratings, and name_basics tables to retrieve information about the movies and their ratings, and then filters the results based on the user's preferences. The query also uses a subquery to exclude movies that feature Jennifer Lawrence in a leading role, as the user has not shown an interest in watching her movies in the past. Finally, the results are sorted in descending order by average rating"}
{"id": 21048, "query": "maybe you sould watch La La Land  (2016) ", "history": ["Notebook  (2006)"], "groundtruth": ["Game Night (2018)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.primaryTitle = 'La La Land' AND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE primaryTitle = 'Notebook' AND startYear = 2006) \nAND title_basics.isAdult = 0 AND title_basics.startYear = 2016 \nAND title_basics.endYear = 2016 \nAND title_basics.runtimeMinutes > 90 \nAND title_basics.genres LIKE '%Musical%'\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;"}
{"id": 21049, "query": "I  am looking for good romance movie.", "history": ["Hangover (2010)", "Yes  (2004)"], "groundtruth": ["Life of the Party  (2018)"], "output": "SELECT \n    t.title,\n    t.titleType,\n    t.primaryTitle,\n    t.originalTitle,\n    t.isAdult,\n    t.startYear,\n    t.endYear,\n    t.runtimeMinutes,\n    t.genres,\n    r.averageRating,\n    r.numVotes,\n    n.primaryName,\n    n.birthYear,\n    n.deathYear,\n    n.primaryProfession,\n    n.knownForTitles\nFROM\n    title_basics t\n    JOIN title_ratings r ON t.tconst = r.tconst\n    JOIN name_basics n ON t.primaryName = n.primaryName\nWHERE\n    t.titleType = 'romance'\n    AND r.averageRating > 7\n    AND EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals tp\n        WHERE \n            tp.category = 'actor'\n            AND tp.job ='main'\n            AND tp.characters = 'Bradley Cooper'\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals tp\n        WHERE \n            tp.category = 'actor'\n            AND tp.job ='main'\n            AND tp.characters = 'Mike Tyson'\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals tp\n        WHERE \n            tp.category = 'actor'\n            AND tp.job ='main'\n            AND tp.characters = 'Dwayne Johnson'\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals tp\n        WHERE \n            tp.category = 'actor'\n            AND tp.job ='main'\n            AND tp.characters = 'Jennifer Lopez'\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals tp\n        WHERE \n            tp."}
{"id": 21050, "query": "I like Hangover (2010) type movies", "history": ["The Commuter  (2017)"], "groundtruth": ["Overboard (2018)"], "output": "SELECT * FROM (\n  SELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, \n    AVG(rating) AS avg_rating, COUNT(rating) AS num_votes\n    FROM title_ratings \n    WHERE titleType = 'feature film' AND isAdult = 0 \n    GROUP BY tconst\n  ) AS popular_movies \n  JOIN (\n    SELECT nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles\n    FROM name_basics\n    WHERE primaryProfession IN ('actor', 'actress')\n    GROUP BY nconst\n  ) AS popular_actors \n  ON popular_movies.tconst = popular_actors.nconst\n  WHERE popular_movies.avg_rating > 7 AND popular_movies.num_votes > 1000\n  AND popular_actors.knownForTitles LIKE '%Hangover%'\n  AND popular_actors.primaryName NOT IN (SELECT nconst FROM name_basics WHERE deathYear > 2020)\n  ORDER BY popular_movies.avg_rating DESC, popular_actors.primaryName ASC\nLIMIT 5;\n\nThis SQL query will retrieve the top 5 movies that are similar to \"The Hangover\" (2010) based on their genres, directors, and actors. The query will also consider the user's historical preferences, which are stored in the \"title_ratings\" table. The query will only consider movies that have a high average rating and a large number of votes. Additionally, the query will only consider actors who are still alive and have worked on movies similar to \"The Hangover\". Finally, the query will order the results by the average rating of the movies and the primary name of the actors."}
{"id": 21051, "query": "I have not seen it. I like mystery movies", "history": [], "groundtruth": ["Inception (2010)", "The Dark Knight Rises (2012)", "Die Hard (1988)", "Lethal Weapon (1987)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    r.averageRating, \n    r.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles, \n    c.category, \n    c.job, \n    c.characters\nFROM \n    title_basics t \n    JOIN title_ratings r ON t.title_basics.tconst = r.tconst \n    JOIN name_basics n ON t.title_basics.primaryTitle = n.primaryName \n    JOIN title_crew c ON t.title_basics.tconst = c.tconst \nWHERE \n    t.title_basics.genres ='mystery' \n    AND r.averageRating > 7 \n    AND r.numVotes > 1000 \n    AND n.primaryProfession = 'actor' \n    AND c.category = 'director' \n    AND c.job = 'writer' \n    AND c.characters = 'lead'\nORDER BY \n    r.averageRating DESC, \n    r.numVotes DESC;\n\n;"}
{"id": 21059, "query": "have you seen good drama movie lately?", "history": ["Die Hard (1988)", "Deadpool  (2016)", "The Terminator (1984)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Drama' AND t2.averageRating > (SELECT AVG(t3.rating)\n                                                   FROM title_ratings t3\n                                                   WHERE t3.title IN (SELECT t4.title\n                                                                   FROM title_basics t4\n                                                                   WHERE t4.primaryTitle = 'Die Hard (1988)'\n                                                                   UNION\n                                                         SELECT t5.title\n                                                         FROM title_basics t5\n                                                         WHERE t5.primaryTitle = 'Deadpool (2016)'\n                                                         UNION\n                                                         SELECT t6.title\n                                                         FROM title_basics t6\n                                                         WHERE t6.primaryTitle = 'The Terminator (1984)'))\nORDER BY t2.averageRating DESC;\n\nThis SQL query uses a combination of joins and subqueries to retrieve movies that are classified as \"Drama\" and have an average rating higher than the average rating of the user's input movies. The query first joins the \"title_basics\" table with the \"title_ratings\" table to get the title and rating information. Then, it uses a subquery to retrieve the average rating of the user's input movies and compares it with the average rating of the joined movies. Finally, the query orders the results by the average rating in descending order and returns the top recommendations to the user."}
{"id": 21060, "query": "i need one good action movie too!", "history": [], "groundtruth": ["Incredibles 2 (2018)", "Peter Rabbit (2018)"], "output": "SELECT \n    title_basics.primaryTitle,\n    title_basics.startYear,\n    title_basics.runtimeMinutes,\n    title_ratings.averageRating,\n    title_crew.directors,\n    title_principals.characters\nFROM\n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE\n    title_basics.genres LIKE '%Action%'\n    AND title_ratings.numVotes > 1000\n    AND title_crew.directors LIKE '%Christopher Nolan%'\n    AND title_principals.characters LIKE '%Leonardo DiCaprio%'\nORDER BY\n    title_ratings.averageRating DESC;\n\nThis SQL query joins four tables: title_basics, title_ratings, title_crew, and title_principals to retrieve information about movies that are action movies, have more than 1000 votes, are directed by Christopher Nolan, and have Leonardo DiCaprio in the cast. The query then orders the results by the average rating in descending order.\n\nNote that this is just one possible query that could be used for movie recommendations. Depending on the specific requirements of the system, additional criteria could be added or removed from the query."}
{"id": 21075, "query": "I especially like family films like Frozen (2013)", "history": ["Jurassic Park", "The Dawns Here Are Quiet (1972)", "Jurassic Park III (2001)", "Jumanji  (2017)"], "groundtruth": ["The Waterboy (1998)", "Black Panther (2018)", "The Commuter  (2017)", "Vacation  (2015)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t3.directors, t3.writers, t4.ordering, t4.category, t4.job, t4.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nWHERE t1.genres = 'Family'\nAND t2.averageRating > 7\nAND t3.primaryProfession = 'Actor'\nAND t4.category = 'Acting'\nAND t4.job = 'Lead'\nAND t4.characters = 'Princess'\nAND t1.title NOT IN (SELECT title FROM title_ratings WHERE nconst = 'Jurassic Park')\nAND t1.title NOT IN (SELECT title FROM title_ratings WHERE nconst = 'The Dawns Here Are Quiet (1972)')\nAND t1.title NOT IN (SELECT title FROM title_ratings WHERE nconst = 'Jurassic Park III (2001)')\nAND t1.title NOT IN (SELECT title FROM title_ratings WHERE nconst = 'Jumanji  (2017)')\nORDER BY t1.averageRating DESC, t4.ordering ASC\nLIMIT 10;\n\nThis SQL query will retrieve movies that are rated highly (average rating > 7), have a primary profession of 'Actor', and have a job of 'Lead' and 'Princess' in the movie, and are not in the user's preference history (i.e., not in the titles 'Jurassic Park', 'The Dawns Here Are Quiet (1972)', 'Jurassic Park III (2001)', or 'Jumanji  (2017)'). The results will be ordered by average rating in descending order and then"}
{"id": 21076, "query": "Can you recommend me fun movies ?", "history": ["Hollow  (2014)", "A Walk in the Clouds (1995)", "The Little Mermaid  (1989)", "Hercules  (1997)"], "groundtruth": ["Am\u00e9lie (2001)", "Spaceballs (1987)", "The Hundred-Foot Journey  (2014)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.category, title_principals.job, title_principals.characters\n\nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \n\nWHERE \ntitle_basics.isAdult = '0' -- exclude adult movies\nAND title_ratings.numVotes > 1000 -- only consider movies with more than 1000 ratings\nAND title_basics.startYear BETWEEN 1980 AND 2019 -- only consider movies released between 1980 and 2019\nAND title_basics.genres LIKE '%fun%' -- only consider movies with 'fun' in their genres\n\nGROUP BY \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.category, title_principals.job, title_principals.characters\n\nHAVING \nSUM(title_ratings.numVotes) > 5000 -- only consider movies with more than 50"}
{"id": 21078, "query": "I like action and comedy", "history": ["Coming Home  (2012)", "Mermaid  (2000)", "Black Panther (2018)", "Jumanji  (2017)", "Train Ride (2005)"], "groundtruth": ["Elf  (2003)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%action%' AND title_basics.genres LIKE '%comedy%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Ridley Scott%'\nAND title_principals.characters LIKE '%Dwayne Johnson%'\nGROUP BY title_basics.title, title_basics.primaryTitle\nHAVING COUNT(DISTINCT title_basics.title) > 2\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies that are both action and comedy, have a high number of ratings (>1000), are directed by Ridley Scott, and have Dwayne Johnson as a principal actor. The query will also group the results by title and primary title, and return the top 3 movies with the highest average rating. Finally, the query will order the results by average rating in descending order and primary title in ascending order."}
{"id": 21079, "query": "I can even watch Coming Home  (2012)", "history": ["Jumanji  (2017)", "Rampage (2018)"], "groundtruth": ["Ever After (1998)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.title = 'Coming Home' AND \ntitle_ratings.averageRating > (\n    SELECT \n        AVG(title_ratings.averageRating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                title_basics.tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.title = 'Jumanji' AND \n                title_basics.startYear = 2017\n        )\n    AND \n        title_ratings.numVotes > 100\n)\nAND \ntitle_basics.isAdult = 0\nAND \ntitle_basics.endYear = 2"}
{"id": 21089, "query": "What should I watch? Well I am into science and comedy.", "history": ["Rush Hour  (1998)", "Men in Black  (1997)", "The Avengers  (2012)"], "groundtruth": ["Rampage (2018)"], "output": "SELECT * FROM title_basics tb\nJOIN (\n  SELECT title_id, AVG(rating) AS avg_rating\n  FROM title_ratings\n  GROUP BY title_id\n) tr ON tb.title_id = tr.title_id\nJOIN (\n  SELECT n_const, primary_name, birth_year, death_year, primary_profession, known_for_titles\n  FROM name_basics\n  WHERE primary_profession IN ('Actress', 'Actor')\n  GROUP BY n_const\n) nb ON tb.title_id = nb.known_for_titles\nWHERE tb.genres LIKE '%Science Fiction%' AND tb.genres LIKE '%Comedy%' AND tb.startYear > 1990 AND tb.endYear < 2020\nAND EXISTS (\n  SELECT 1 FROM title_ratings\n  WHERE title_id = tb.title_id AND numVotes > 10000\n)\nAND EXISTS (\n  SELECT 1 FROM name_basics\n  WHERE n_const = tb.primaryName AND primary_profession IN ('Actress', 'Actor')\n)\nORDER BY avg_rating DESC;\n\nThis SQL query will retrieve movies that are rated highly by users, have a primary profession of 'Actress' or 'Actor', and are classified under both 'Science Fiction' and 'Comedy' genres. The query will also filter out movies that were released before 1990 or after 2020, and only consider movies with more than 10,000 votes and have a primary name that matches the user's input.\n\nNote that this is just one possible approach to generating movie recommendations based on user input and historical preferences. There are many other factors that could be considered, such as the user's watch history, their ratings, and other attributes of the movies. The specific query will depend on the details of the database and the requirements of the recommendation system."}
{"id": 21116, "query": "Hey, I'm looking for horror/thriller movies from 2016 or 2017", "history": ["Zodiac  (2007)", "Murder on the Orient Express (2017)"], "groundtruth": ["Seven  (1995)", "The Girl with the Dragon Tattoo  (2011)", "Identity  (2003)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.startYear >= 2016 AND title_basics.startYear <= 2017\nAND title_basics.genres LIKE '%horror%' OR title_basics.genres LIKE '%thriller%'\nAND title_ratings.averageRating > 6\nAND name_basics.primaryName NOT IN ('David Fincher', 'Kenneth Branagh')\nAND title_principals.category NOT IN ('Actress', 'Actor')\nAND title_principals.job NOT IN ('Director', 'Writer')\nAND title_principals.characters NOT IN ('Detective', 'Protagonist')\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;"}
{"id": 21117, "query": "Hi can you please recommend a detective moovie?", "history": ["Memento  (2000)", "Clue  (1985)", "It  (2017)"], "groundtruth": ["The Ring  (2002)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n       t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, \n       t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters \nFROM title_basics t1 \nJOIN title_ratings t2 ON t1.tconst = t2.tconst \nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName \nJOIN title_crew t4 ON t1.tconst = t4.tconst \nJOIN title_principals t5 ON t1.tconst = t5.tconst \nWHERE t1.genres = 'detective' AND t2.averageRating > (\n    SELECT AVG(t6.rating) \n    FROM title_ratings t6 \n    WHERE t6.tconst IN (SELECT t4.tconst FROM title_crew t4 WHERE t4.job = 'director')\n)\nAND t1.startYear > (SELECT MAX(t7.startYear) FROM title_basics t7 WHERE t7.genres = 'detective')\nAND t1.endYear < (SELECT MIN(t8.endYear) FROM title_basics t8 WHERE t8.genres = 'detective')\nAND t1.runtimeMinutes > (SELECT AVG(t9.runtimeMinutes) FROM title_basics t9 WHERE t9.genres = 'detective')\nAND EXISTS (SELECT 1 FROM title_principals t10 WHERE t10.tconst = t1.tconst AND t10.category = 'actor' AND t10.job = 'lead')\nAND NOT EXISTS (SELECT 1 FROM title_principals t11 WHERE t11.tconst"}
{"id": 21118, "query": "Hi, can you recommend me mystery? I liked Memento  (2000)", "history": ["She's All That (1999)"], "groundtruth": ["Big Fat Liar (2002)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.name, t2.birthYear, t2.primaryProfession, t3.category, t3.job, t3.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nWHERE t1.genres LIKE '%mystery'\nAND t2.averageRating > (SELECT AVG(t4.averageRating) FROM title_ratings t4 WHERE t4.tconst = t1.tconst)\nAND t3.knownForTitles NOT IN (SELECT nconst FROM name_basics WHERE birthYear = 1999)\nORDER BY t1.averageRating DESC;\n\nThis SQL query will first select all the movies with the genre \"mystery\" from the title_basics table. Then it will join the title_ratings and name_basics tables to get more information about the movies and the people who made them.\n\nThe query will then filter out the movies that have an average rating lower than the average rating of the movies with the same title const (tconst) in the title_ratings table. This will ensure that the user only sees movies that have a high average rating.\n\nFinally, the query will filter out the movies that are known for titles released in 1999, as the user has no history of watching movies from that year.\n\nThe result will be a list of movies that meet the user's input and preference history, ordered by average rating in descending order."}
{"id": 21120, "query": "How about a comedy.", "history": ["The Lord of the Rings: The Fellowship of the Ring (2001)"], "groundtruth": ["Harry Potter and the Chamber of Secrets  (2002)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'comedy'\nAND t2.averageRating > (SELECT AVG(t3.averageRating)\n                     FROM title_ratings t3\n                     WHERE t3.tconst IN (SELECT t4.tconst\n                                     FROM title_basics t4\n                                     WHERE t4.primaryTitle = 'The Lord of the Rings: The Fellowship of the Ring (2001)'\n                                     UNION\n                                     SELECT t5.tconst\n                                     FROM title_basics t5\n                                     WHERE t5.primaryTitle = 'The Lord of the Rings: The Return of the King (2003)'\n                                     )\n                    )\nORDER BY t2.averageRating DESC;\n\nThis SQL query will select movies that are comedies, have a high average rating, and have at least one of the primary titles matching the user's preference history. The query first joins the title_basics and title_ratings tables to get the title, primary title, and average rating for each movie. It then filters the results to only include movies that are comedies and have a high average rating. Finally, it orders the results by the average rating in descending order.\n\nNote that this query assumes that the user's preference history is stored in the title_ratings table with the primary key being the tconst column. The query uses a subquery to get the average rating for the movies that match the user's preference history, and then filters the results based on that average rating."}
{"id": 21123, "query": "how about action like Avengers: Infinity War (2018)", "history": ["Blade  (1998)", "Justice League  (2017)", "Thor: Ragnarok (2017)"], "groundtruth": ["Highlander  (1986)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Action' AND t1.startYear = 2018\nAND EXISTS (\n  SELECT 1\n  FROM name_basics n\n  JOIN title_principals tp ON n.nconst = tp.nconst\n  WHERE n.primaryProfession = 'Actor' AND tp.category = 'Acting' AND tp.job = 'Starring'\n  AND EXISTS (\n    SELECT 1\n    FROM title_crew c\n    WHERE c.directors = 'The Russo Brothers'\n  )\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings tr\n  WHERE tr.tconst = t1.tconst AND tr.averageRating < 5\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals tp2\n  WHERE tp2.nconst = t1.nconst AND tp2.category = 'Acting' AND tp2.job = 'Starring'\n  AND EXISTS (\n    SELECT 1\n    FROM title_basics t3\n    WHERE t3.tconst = tp2.tconst AND t3.genres = 'Superhero'\n  )\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\n;"}
{"id": 21124, "query": "How about action like Black Panther (2018)", "history": [], "groundtruth": ["The Odd Couple  (1968)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle LIKE '%Black Panther%' AND title_ratings.averageRating > 7 AND title_principals.category = 'action'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nHAVING COUNT(DISTINCT title_principals.ordering) > 2;\n\nThis SQL query will retrieve movies that"}
{"id": 21125, "query": "Looking for a funny one!", "history": ["La La Land  (2016)", "Hairspray  (2007)", "Dreamgirls  (2006)"], "groundtruth": ["Rent  (2005)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.numVotes > 1000\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%funny%'\nAND title_basics.startYear = 2010\nAND title_basics.endYear = 2020\n\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC\n\n;\n\nThis SQL query retrieves movies that are comedies, have more than 1000 votes, have actors with funny characters, were released between 2010 and 2020, and have the primary title that matches the user's preference history. The query joins four tables: title_basics, name_basics, title_ratings, and title_principals. The results are sorted by average rating in descending order and primary title in ascending order."}
{"id": 21141, "query": "How about a comedy?", "history": ["Pain & Gain (2013)", "Faster  (2010)", "Deepwater Horizon  (2016)", "Deadpool  (2016)"], "groundtruth": ["Rush Hour  (1998)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (\n        SELECT tconst\n        FROM title_basics\n        WHERE title_basics.genres = 'Comedy'\n    )\n)\nAND title_principals.category IN ('Actor', 'Actress')\n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.category, title_principals.job, title_principals.characters\n\nHAVING COUNT(DISTINCT title_principals.job) > 2\n\nORDER BY title_ratings.averageRating DESC, title_bas"}
{"id": 21142, "query": "Hi, what kind of action movies can you recommend? I like things like Faster  (2010)", "history": ["Hitch  (2005)", "27 Dresses (2008)", "Maid in Manhattan"], "groundtruth": ["10 Things I Hate About You (1999)"], "output": "SELECT \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \n    title_ratings.averageRating, title_ratings.numVotes\nFROM \n    title_basics \nINNER JOIN \n    title_ratings \nON \n    title_basics.tconst = title_ratings.tconst \nWHERE \n    title_basics.genres = 'action' \nAND (\n    title_basics.title LIKE '%Faster%' \nOR title_basics.originalTitle LIKE '%Faster%' \nOR title_ratings.title LIKE '%Faster%' \nOR title_ratings.originalTitle LIKE '%Faster%'\n) \nAND title_basics.startYear >= 2010 \nAND title_basics.endYear <= 2010 \nAND NOT EXISTS (\n    SELECT \n        1 \n    FROM \n        title_ratings \n    WHERE \n        title_ratings.tconst = title_basics.tconst \n        AND title_ratings.numVotes > (\n            SELECT \n                AVG(numVotes) \n            FROM \n                title_ratings \n            WHERE \n                title_ratings.tconst = title_basics.tconst\n        )\n) \nAND title_basics.nconst NOT IN (\n    SELECT \n        nconst \n    FROM \n        name_basics \n    WHERE \n        name_basics.primaryName = 'Dwayne Johnson'\n)\n\nORDER BY \n    title_ratings.averageRating DESC, title_basics.startYear DESC;\n\n;"}
{"id": 21150, "query": "What can you suggest for a romantic comedy?", "history": ["Fast Times at Ridgemont High", "The Breakfast Club (1985)", "Avengers: Infinity War (2018)"], "groundtruth": ["Ghostbusters (1984)", "Footloose  (1984)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t3.primaryName\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nWHERE t2.averageRating > 7 AND t1.genres LIKE '%romantic comedy%' AND t3.birthYear > 1960\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE t1.tconst = title_principals.tconst AND category = 'comedy' AND job = 'actor')\nAND NOT EXISTS (SELECT 1 FROM title_crew WHERE t1.tconst = title_crew.tconst AND job = 'director')\nORDER BY t2.averageRating DESC, t1.startYear ASC;\n\nThis SQL query suggests movies that are romantic comedies, have a high average rating, and were released after 1960. It also excludes movies that have comedy actors or directors in the title_principals or title_crew tables, respectively. The query joins the title_basics, title_ratings, and name_basics tables to get the required information, and then uses the NOT EXISTS clause to filter out movies that have comedy actors or directors. Finally, the query orders the results by average rating in descending order and start year in ascending order."}
{"id": 21165, "query": "You would probably like The Hangover (2009)", "history": ["Mean Girls (2004)"], "groundtruth": ["Life of the Party  (2018)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    name_basics.knownForTitles\nFROM\n    title_basics\nINNER JOIN\n    title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN\n    name_basics ON title_basics.tconst = name_basics.tconst\nWHERE\n    title_basics.title LIKE '%The Hangover%'\n    AND title_ratings.averageRating > (\n        SELECT\n            AVG(title_ratings.averageRating)\n        FROM\n            title_ratings\n        WHERE\n            title_ratings.tconst IN (\n                SELECT\n                    title_basics.tconst\n                FROM\n                    title_basics\n                WHERE\n                    title_basics.title LIKE '%Mean Girls%'\n            )\n    )\n    AND title_basics.isAdult = 0\n    AND title_basics.startYear >= 2000\n    AND title_basics.endYear <= 2010\n    AND name_basics.primaryName NOT IN (\n        SELECT\n            name_basics.primaryName\n        FROM\n            name_basics\n        WHERE\n            name_basics.primaryProfession = 'Actor'\n            AND name_basics.knownForTitles LIKE '%Mean Girls%'\n    )\nORDER BY\n    title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"The Hangover\" (2009) based on the user's preference history of"}
{"id": 21180, "query": "I would love to watch an action movie. Do you have any suggestions?", "history": ["Game Night (2018)", "Girls Trip (2017)"], "groundtruth": ["The Hangover (2009)", "Hangover  (2014)"], "output": "SELECT t.title, t.startYear, t.runtimeMinutes, t.genres, c.name AS director, w.name AS writer\nFROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics n ON t.directors = n.nconst\nJOIN title_crew c ON t.directors = c.directors\nJOIN title_principals p ON t.tconst = p.tconst\nWHERE t.genres LIKE '%Action%'\nAND tr.averageRating > (\n    SELECT AVG(tr2.averageRating)\n    FROM title_ratings tr2\n    WHERE tr2.tconst IN (SELECT tconst FROM title_ratings WHERE user_id = <current_user_id>)\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_ratings tr3\n    WHERE tr3.tconst = t.tconst AND tr3.user_id = <current_user_id>\n)\nORDER BY t.startYear DESC, t.runtimeMinutes ASC\nLIMIT 5;\n\nThis SQL query will recommend action movies to the user based on their input and historical preferences. It will consider the user's previous ratings and exclude movies they have already rated. The query will also consider the start year and runtime minutes of the movies to provide a diverse set of recommendations.\n\nNote: <current_user_id> should be replaced with the actual user ID."}
{"id": 21185, "query": "I love stoner movies, so Pineapple Express  (2008) is a good movie and How High (2001)  do you have any recommendations?", "history": ["The Incredibles (2004)", "Wreck-It Ralph (2012)"], "groundtruth": ["Peter Rabbit (2018)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres LIKE '%stoner%'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst = 'Pineapple Express (2008)')\nAND title_ratings.numVotes > (SELECT COUNT(title_ratings.numVotes) FROM title_ratings WHERE title_ratings.tconst = 'Pineapple Express (2008)')\nAND NOT EXISTS (SELECT 1 FROM title_basics WHERE title_basics.tconst = 'How High (2001)')\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as \"stoner\" movies, have a high average rating, and a large number of votes, and do not have the title \"How High (2001)\". The query will also use the user's preference history to filter the results. The history is represented by the two movies they have previously rated, \"The Incredibles (2004)\" and \"Wreck-It Ralph (2012)\". The query will only return movies that are similar to these two movies in terms of genre and rating."}
{"id": 21191, "query": "Hi. Can you please recommend a good action movie. Something similar to The Matrix (1999)", "history": ["The Matrix (1999)", "John Wick (2014)"], "groundtruth": ["The Matrix Revolutions (2003)"], "output": "SELECT title_basics.title, title_ratings.averageRating, name_basics.primaryName\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nWHERE title_basics.genres = 'Action'\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE title_basics.tconst = title_ratings.tconst)\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_basics.tconst = title_principals.tconst AND category = 'John Wick')\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve a list of action movies that are similar to \"The Matrix (1999)\" and have a high average rating, but do not include any movies that are part of the \"John Wick\" franchise. The query will join the \"title_basics\" table with the \"title_ratings\" table to retrieve the average rating and the \"name_basics\" table to retrieve the primary name of the movie. The query will also use subqueries to filter out movies that are part of the \"John Wick\" franchise and to calculate the average rating of movies that are similar to \"The Matrix (1999)\". Finally, the query will order the results by the average rating in descending order."}
{"id": 21195, "query": "I love animation movies, would you recommend any?", "history": ["Ant-Man  (2015)", "Deadpool 2  (2018)", "Black Panther (2018)", "The Avengers  (2012)", "Avengers: Infinity War (2018)", "Deadpool  (2016)"], "groundtruth": ["Incredibles 2 (2018)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Animation' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst IN (SELECT t4.tconst FROM title_ratings t4 WHERE t4.averageRating > 7 AND t4.numVotes > 10000))\nAND t1.tconst NOT IN (SELECT t5.tconst FROM title_ratings t5 WHERE t5.averageRating < 7)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve all animation movies from the title_basics table that have a high average rating (greater than 7) and a large number of votes (greater than 10,000). It will also exclude movies with low ratings (less than 7) and movies that have already been rated by the user.\n\nNote that this query assumes that the user's preference history is stored in the title_ratings table with the tconst column representing the title ID. The query joins the title_ratings table with the title_basics table to get the movie titles and their corresponding ratings. The subqueries are used to filter the results based on the user's preference history and the average rating of the movies."}
{"id": 21197, "query": "I want to see Ant-Man and the Wasp (2018)", "history": ["Black Panther (2018)", "The Incredibles (2004)", "Game Night (2018)", "Girls Trip (2017)"], "groundtruth": ["Incredibles 2 (2018)"], "output": "SELECT \n  t.title_id, \n  t.title, \n  t.primaryTitle, \n  t.originalTitle, \n  t.isAdult, \n  t.startYear, \n  t.endYear, \n  t.runtimeMinutes, \n  t.genres, \n  n.name, \n  n.birthYear, \n  n.deathYear, \n  n.primaryProfession, \n  n.knownForTitles, \n  c.category, \n  c.job, \n  c.characters \nFROM \n  title_basics t \n  JOIN name_basics n ON t.primaryTitle = n.primaryName \n  JOIN title_crew c ON t.tconst = c.tconst \nWHERE \n  t.title = 'Ant-Man and the Wasp' AND \n  t.startYear = 2018 AND \n  EXISTS (\n    SELECT \n      1 \n    FROM \n      title_ratings tr \n    WHERE \n      tr.tconst = t.tconst AND \n      tr.averageRating > (\n        SELECT \n          AVG(rating) \n        FROM \n          title_ratings tr2 \n        WHERE \n          tr2.tconst IN (\n            SELECT \n              tconst \n            FROM \n              title_basics t3 \n            WHERE \n              t3.title = 'Black Panther' AND \n              t3.startYear = 2018\n          )\n      )\n  )\nORDER BY \n  t.startYear DESC, \n  t.primaryTitle ASC;\n\n;"}
{"id": 21198, "query": "I like comedy Game Night (2018)", "history": ["Zootopia", "The Incredibles (2004)", "Wreck-It Ralph (2012)"], "groundtruth": ["Peter Rabbit (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_ratings.averageRating, \nname_basics.primaryName, \ntitle_crew.directors, \ntitle_principals.category\nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \ntitle_basics.title LIKE '%Game Night%' \nAND title_ratings.averageRating > 7 \nAND name_basics.primaryName NOT IN ('Zootopia', 'The Incredibles (2004)', 'Wreck-It Ralph (2012)') \nGROUP BY \ntitle_basics.title, \ntitle_ratings.averageRating, \nname_basics.primaryName, \ntitle_crew.directors, \ntitle_principals.category\nHAVING \nCOUNT(DISTINCT title_basics.tconst) > 10;\n\nThis SQL query will retrieve movies that are similar to \"Game Night\" (2018) and have an average rating above 7, while excluding movies that are already in the user's preference history. The query will also group the results by title, average rating, primary name, directors, and category, and return only the top 10 results based on the number of distinct titles."}
{"id": 21199, "query": "I love movies like Zootopia  The Incredibles (2004) and Wreck-It Ralph (2012) - what would you recommend?", "history": ["Pineapple Express  (2008)", "Girls Trip (2017)", "Game Night (2018)", "How High (2001)"], "groundtruth": ["Blockers (2018)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle IN ('Zootopia', 'The Incredibles', 'Wreck-It Ralph')\nAND title_ratings.averageRating > 7\nAND title_principals.category = 'Comedy'\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%animated%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_pr"}
{"id": 21204, "query": "I love movies like Black Panther (2018)  Guardians of the Galaxy  (2014)  and Guardians of the Galaxy Vol. 2 (2017) and The Avengers  (2012)  - what would you recommend?", "history": ["Game Night (2018)", "Think Like a Man Too (2014)", "Girls Trip (2017)", "The Hangover (2009)", "Bridesmaids  (2011)"], "groundtruth": ["Avengers: Infinity War (2018)"], "output": "SELECT * FROM (\nSELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, \n       AVG(rating) AS avg_rating, COUNT(rating) AS num_votes\nFROM title_ratings\nWHERE titleType IN ('movie') AND startYear >= 2012 AND endYear <= 2018\nGROUP BY tconst\nHAVING avg_rating > 7 AND num_votes > 10000\n) AS popular_movies\nJOIN (\nSELECT nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles\nFROM name_basics\nWHERE primaryProfession IN ('actor', 'actress')\nAND birthYear >= 1980 AND deathYear <= 2018\nGROUP BY nconst\nHAVING COUNT(knownForTitles) > 5\n) AS popular_actors\nON popular_movies.tconst = popular_actors.nconst\nWHERE popular_movies.genres LIKE '%Action' AND popular_movies.runtimeMinutes > 120\nORDER BY popular_movies.avg_rating DESC, popular_actors.primaryName ASC;\n\nThis SQL query will retrieve popular movies and actors from the IMDb database that match the user's input and preference history. The query will first select popular movies released between 2012 and 2018 with an average rating above 7 and at least 10,000 votes. It will then join these movies with popular actors who have been active between 1980 and 2018, have at least 5 known titles, and are associated with the movies. Finally, the query will filter the results to only include movies in the action genre and with a runtime of over 120 minutes. The results will be ordered by average rating in descending order and actor name in ascending order."}
{"id": 21205, "query": "Do you know any good comedies like Girls Trip (2017) or Game Night (2018)", "history": ["Titanic  (1997)", "Casino  (1995)", "The Godfather (1972)", "Godfather  (1991)"], "groundtruth": ["The Fault in Our Stars  (2014)", "Goodfellas (1990)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Kevin Hart%'\nAND title_principals.characters LIKE '%Tiffany Haddish%'\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics\n  WHERE title_basics.tconst = title_principals.tconst AND title_basics.primaryTitle = title_principals.primaryTitle\n  AND title_basics.startYear = title_principals.startYear\n  AND title_basics.endYear = title_principals.endYear\n)\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are comedies, have more than 1000 votes, have Kevin Hart as a director or Tiffany Haddish as an actor, and do not have the same title, start year, and end year as a movie in the user's preference history. The results will be ordered by average rating in descending order."}
{"id": 21220, "query": "Hi. Could you please recommend me a movie with happy ending? Something simmilat to Waiting for Forever (2010)", "history": ["Jumanji  (2017)", "Baywatch  (2017)", "Rampage (2018)"], "groundtruth": ["The Commuter  (2017)"], "output": "SELECT \n    t1.title_basics.title,\n    t1.title_basics.primaryTitle,\n    t1.title_basics.originalTitle,\n    t1.title_basics.isAdult,\n    t1.title_basics.startYear,\n    t1.title_basics.endYear,\n    t1.title_basics.runtimeMinutes,\n    t1.title_basics.genres,\n    t2.averageRating,\n    t2.numVotes\nFROM\n    title_basics t1\n    JOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nWHERE\n    t1.title_basics.isAdult = 0 -- Happy Ending\n    AND t2.averageRating > (\n        SELECT \n            AVG(t3.rating)\n        FROM \n            title_ratings t3\n            JOIN name_basics n4 ON t3.nconst = n4.nconst\n            WHERE \n                n4.primaryProfession = 'Actor'\n                AND t3.tconst IN (\n                    SELECT \n                        t5.tconst\n                    FROM \n                        title_ratings t5\n                        JOIN name_basics n6 ON t5.nconst = n6.nconst\n                        WHERE \n                            n6.primaryProfession = 'Actor'\n                            AND t5.tconst IN (\n                                SELECT \n                                    t7.tconst\n                                FROM \n                                    title_ratings t7\n                                    JOIN name_basics n8 ON t7.nconst = n8.nconst\n                                    WHERE \n                                        n8.primaryProfession = 'Actor'\n                                        AND t7.tconst IN (\n                                            SELECT \n                                                t9.tconst\n                                            FROM \n                                                title_ratings t9\n                                                JOIN name_basics n10 ON t9.nconst = n10.nconst\n                                                WHERE \n                                                    n10.primaryProfession ="}
{"id": 21225, "query": "Have you seen any good animated movies like The Boss Baby (2017)", "history": ["Casino  (1995)", "Training Day (2001)", "Scarface  (1983)", "Goodfellas (1990)"], "groundtruth": ["Inside Man (2006)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'The Boss Baby'\nAND title_ratings.averageRating > 7\nAND title_principals.category = 'Animation'\nAND title_principals.job = 'Director'\nAND title_crew.directors = 'Tom McGrath'\nAND title_basics.isAdult = 0\nAND title_basics.startYear = 2017\nAND title_basics.endYear = 2017\nAND title_basics.runtimeMinutes > 80\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;"}
{"id": 21229, "query": "Looking for a good romantic movie", "history": ["The Avengers  (2012)"], "groundtruth": ["Guardians of the Galaxy Vol. 2 (2017)"], "output": "SELECT t.title, t.startYear, t.runtimeMinutes, t.genres, \n       COUNT(DISTINCT n.primaryName) AS numActors, \n       AVG(r.averageRating) AS avgRating\nFROM title_basics t\nJOIN title_ratings r ON t.tconst = r.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryTitle\nWHERE t.genres LIKE '%romance%' AND t.startYear >= 2000 AND t.endYear <= 2020\nGROUP BY t.title\nHAVING COUNT(DISTINCT n.primaryName) > 5 AND AVG(r.averageRating) > 7\nORDER BY AVG(r.averageRating) DESC;\n\nThis query first joins the title_basics and title_ratings tables to get the title information and the average rating. It then joins the name_basics table to get the list of actors in each movie. The WHERE clause filters out movies that are not romantic comedies and are not released between 2000 and 2020. The GROUP BY clause groups the movies by title, and the HAVING clause filters out movies with fewer than 5 actors or an average rating below 7. Finally, the ORDER BY clause sorts the results by average rating in descending order."}
{"id": 21239, "query": "I'm looking for something scary, like Saw  (2004)", "history": ["The Shawshank Redemption (1994)", "Mr. Holland's Opus (1995)"], "groundtruth": ["What About Bob%3F (1991)"], "output": "SELECT * FROM title_basics tb\nJOIN (\n  SELECT tconst, AVG(rating) AS avg_rating\n  FROM title_ratings\n  GROUP BY tconst\n) AS tr ON tb.tconst = tr.tconst\nJOIN (\n  SELECT nconst, birth_year, death_year, primary_profession, known_for_titles\n  FROM name_basics\n  WHERE primary_profession IN ('Actress', 'Actor')\n  GROUP BY nconst\n) AS nb ON tb.directors = nb.nconst\nWHERE tb.genres LIKE '%Horror%'\nAND tb.start_year <= 2004\nAND tb.end_year >= 2004\nAND EXISTS (\n  SELECT 1 FROM title_ratings\n  WHERE tconst = tb.tconst AND num_votes > 1000\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_ratings\n  WHERE tconst = tb.tconst AND rating < 5\n)\nAND NOT EXISTS (\n  SELECT 1 FROM name_basics\n  WHERE nconst = tb.directors OR nconst = tb.writers\n  AND known_for_titles NOT IN ('The Shawshank Redemption (1994)', 'Mr. Holland's Opus (1995)')\n)\nORDER BY avg_rating DESC, start_year DESC;\n\nThis SQL query will retrieve movies that are horror, released between 2004, and have a high average rating (above 5) and a minimum of 1000 votes. It will also exclude movies that are directed or written by the same people who directed or wrote \"The Shawshank Redemption\" or \"Mr. Holland's Opus\". Finally, it will order the results by average rating in descending order and start year in descending order.\n\nNote that this is just one possible way to write a movie recommendation system based on the given database schema. There are many other possible approaches and variations, depending on the specific requirements and constraints of the system."}
{"id": 21249, "query": "I'm looking for something like Rain Man (1988)", "history": ["The Break-Up (2006)", "Love Happens", "Friends  (1993)"], "groundtruth": ["Horrible Bosses (2011)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle LIKE '%Rain Man%'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryName LIKE '%Asperger''s%'\nAND title_principals.category = 'Actors'\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%autistic%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles"}
{"id": 21269, "query": "I love animated films like The Secret Life of Pets (2016) and Moana  (2016)", "history": ["Taxi Driver (1976)", "The Curious Case of Benjamin Button  (2008)", "Cruel Intentions (1999)", "Mr. & Mrs. Smith  (2005)", "Fight Club (1999)", "The Mask  (1994)", "Troy  (2004)"], "groundtruth": ["Fury  (2014)", "Inglourious Basterds (2009)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Animation'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'The Secret Life of Pets' OR primaryTitle = 'Moana')\n)\nAND title_basics.startYear > (SELECT MAX(startYear) FROM title_basics WHERE primaryTitle = 'The Secret Life of Pets' OR primaryTitle = 'Moana')\nAND title_basics.endYear < (SELECT MIN(endYear) FROM title_basics WHERE primaryTitle = 'The Secret Life of Pets' OR primaryTitle = 'Moana')\nAND title_basics.runtimeMinutes > (SELECT AVG(runtimeMinutes) FROM title_basics WHERE primaryTitle = 'The Secret Life of Pets' OR primaryTitle = 'Moana')\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Voice'\nAND title_crew.directors = 'Byron Howard'\nAND title_crew.writers = 'Jared Bush'\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nThis SQL query will retrieve movies that are animated, have a high average"}
{"id": 21300, "query": "I will watch The Big Sick (2017), not a fan of Charlize though so will pass on Tully  . I like anything like American Pie  (1999).", "history": ["The Shawshank Redemption (1994)", "Chasing Amy (1997)"], "groundtruth": ["Good Will Hunting (1997)", "Lady Bird  (2017)", "Despicable Me (2010)"], "output": "SELECT \n  t.title_basics.title, \n  t.title_basics.primaryTitle, \n  t.title_basics.originalTitle, \n  t.title_basics.isAdult, \n  t.title_basics.startYear, \n  t.title_basics.endYear, \n  t.title_basics.runtimeMinutes, \n  t.title_basics.genres, \n  n.name_basics.primaryName, \n  n.name_basics.birthYear, \n  n.name_basics.deathYear, \n  n.name_basics.primaryProfession, \n  n.name_basics.knownForTitles, \n  c.title_crew.directors, \n  c.title_crew.writers, \n  p.title_principals.ordering, \n  p.title_principals.category, \n  p.title_principals.job, \n  p.title_principals.characters\nFROM \n  title_basics t\n  JOIN name_basics n ON t.title_basics.primaryTitle = n.title_basics.title\n  JOIN title_crew c ON t.title_basics.title = c.title_crew.title\n  JOIN title_principals p ON t.title_basics.title = p.title_principals.title\nWHERE \n  t.title_basics.title = 'The Big Sick' AND \n  NOT EXISTS (\n    SELECT \n      1 \n    FROM \n      title_ratings tr \n    WHERE \n      tr.title_basics.title = t.title_basics.title AND \n      tr.averageRating < 5\n  ) AND \n  NOT EXISTS (\n    SELECT \n      1 \n    FROM \n      title_ratings tr2 \n    WHERE \n      tr2.title_basics.title = t.title_basics.title AND \n      tr2.averageRating > 8\n  ) AND"}
{"id": 21304, "query": "Hi. How are you? I feel like watching a good drama today. Do you have any suggestions? My favorite is The Shawshank Redemption (1994)", "history": ["She's All That (1999)", "The Ring  (2002)", "A Walk to Remember (2002)"], "groundtruth": ["Saw  (2004)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Drama'\nAND title_ratings.averageRating > (\n    SELECT \n        AVG(title_ratings.averageRating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                title_basics.tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.primaryName IN (\n                    SELECT \n                        name_basics.primaryName\n                    FROM \n                        name_basics\n                    WHERE \n                        name_basics.birthYear = '1994'\n                )\n        )\n    AND title_ratings.numVotes > 10000\n)\nAND title_basics.tconst NOT IN (\n    SELECT \n        title_basics.tconst\n    FROM \n        title_basics\n    WHERE \n        title_basics.primaryName IN (\n            SELECT \n                name_basics.primaryName\n            FROM \n                name_basics\n            WHERE \n                name_basics.birthYear = '1994'\n        )\n)\nAND title_basics.startYear <= '2002-12-31'"}
{"id": 21313, "query": "I am looking for some comedies I've never seen before.", "history": ["Killer Clowns from Outer Space (1988)", "Tucker & Dale vs. Evil (2010)", "Shaun of the Dead (2004)", "A Nightmare on Elm Street (1984)"], "groundtruth": ["Dead Before Dawn (2012)"], "output": "SELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres\nFROM title_basics\nWHERE isAdult = 0 AND genres LIKE '%comedy%'\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE tconst = title_basics.tconst AND numVotes > 100\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM name_basics\n  JOIN title_crew ON name_basics.nconst = title_crew.directors OR name_basics.nconst = title_crew.writers\n  WHERE title_basics.tconst = title_crew.tconst\n  AND name_basics.primaryProfession = 'Actor'\n  AND title_crew.directors NOT IN (SELECT directors FROM title_crew WHERE tconst = title_basics.tconst)\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE title_basics.tconst = title_principals.tconst AND category = 'Actor' AND job = 'Lead'\n)\nAND startYear > 2000\nAND endYear < 2020\nAND runtimeMinutes > 80\n\n;\n\nThis SQL query will retrieve movies that are comedies, have no adult content, have more than 100 votes, have not been rated by the user, have not been directed or written by the same person, have not been acted by the same person in a leading role, were released between 2000 and 2020, have a runtime of more than 80 minutes, and have not been previously rated by the user. The query will also exclude movies that have been rated by the user in the past.\n\nPlease note that this is just one possible solution and there are many other ways to write a movie recommendation query. The query will return a list of movies that meet the specified criteria and are not in the user's preference history."}
{"id": 21330, "query": "I love The Lord of the Rings: The Return of the King (2003) , what can you recommend?", "history": ["John Q. (2002)"], "groundtruth": ["Remember the Titans (2000)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.name_basics.primaryName, t2.name_basics.birthYear, t2.name_basics.deathYear, t2.name_basics.primaryProfession, t3.title_crew.directors, t3.title_crew.writers, t4.title_principals.ordering, t4.title_principals.category, t4.title_principals.job, t4.title_principals.characters\nFROM title_basics t1\nJOIN name_basics t2 ON t1.title_basics.primaryTitle = t2.primaryName\nJOIN title_crew t3 ON t1.title_basics.directors = t3.directors\nJOIN title_principals t4 ON t1.title_basics.ordering = t4.ordering\nWHERE t1.title_basics.title = 'The Lord of the Rings: The Return of the King'\nAND t2.name_basics.primaryName NOT IN (SELECT n1.primaryName FROM name_basics n1 WHERE n1.birthYear < 1980)\nAND t3.title_crew.directors NOT IN (SELECT d1.directors FROM title_crew d1 WHERE d1.title_basics.startYear < 2000)\nAND t4.title_principals.category = 'actor'\nAND t4.title_principals.job = 'actor'\nAND t4.title_principals.characters NOT IN (SELECT c1.characters FROM title_principals c1 WHERE c1.title_basics.startYear < 2000)\nORDER BY t1.title_basics.runtimeMinutes DESC;\n\nThis SQL query recommends movies based on the user's input of \"The Lord of the Rings: The Return of the King\" and their historical prefer"}
{"id": 21339, "query": "I am looking for a movie starring Sandra Bullock. Do you know of any good ones?", "history": ["The Matrix (1999)", "Total Recall  (1990)"], "groundtruth": ["The Maze Runner  (2014)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle LIKE '%Sandra Bullock%'\nAND title_ratings.averageRating > 7\nAND title_principals.characters LIKE '%Sandra Bullock%'\nAND NOT EXISTS (\n  SELECT 1 FROM title_basics\n  WHERE title_basics.tconst = title_principals.tconst\n  AND title_basics.startYear < 2000\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_basics\n  WHERE title_basics.tconst = title_crew.tconst\n  AND title_basics.startYear < 2000\n)\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nThis SQL query will retrieve movies starring Sandra Bullock, with a high average rating and a release date after 2000, and also take into account the user's historical preferences (The Matrix and Total Recall) to recommend movies that are similar in genre and style."}
{"id": 21340, "query": "I am a huge fan of sci-fi? Got any good recommendations?", "history": ["28 Days Later (2002)", "The Matrix (1999)"], "groundtruth": ["Event Horizon  (1997)", "A Tale of Two Sisters (2003)", "Contagion  (2011)"], "output": "SELECT t1.title, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n ON t1.primaryName = n.primaryName\nJOIN title_crew c ON t1.directors = c.directors\nJOIN title_principals p ON t1.tconst = p.tconst\nWHERE t1.genres = 'Science Fiction'\nAND t2.averageRating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (\n        SELECT t4.tconst\n        FROM title_ratings t4\n        WHERE t4.averageRating > 7\n        AND t4.numVotes > 1000\n    )\n)\nAND p.category = 'Actor'\nAND p.job = 'Lead'\nAND p.characters LIKE '%alien%'\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies from the IMDb database that are classified as \"Science Fiction\", have a high average rating (above 7), and have at least 1000 votes. It will also filter out movies that do not have an actor in a lead role and do not have the word \"alien\" in their character description. Finally, it will order the results by the average rating in descending order.\n\nNote that this query assumes that the user's preference history is stored in the title_ratings table with the tconst column representing the title ID. The query joins the title_ratings table with the title_basics table to retrieve the title information and the average rating for each movie. The query also joins the name_basics table to retrieve the primary name of the actors in the movie."}
{"id": 21347, "query": "I love a good Adam Sandler movie. Got any recommendations?", "history": ["Jurassic Park", "Jaws  (1975)", "Jurassic Park  (1993)"], "groundtruth": ["E.T. the Extra-Terrestrial (1982)", "Ready Player One  (2018)"], "output": "SELECT t1.title, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Comedy%' AND t2.averageRating > 6\nAND EXISTS (\n  SELECT 1\n  FROM name_basics n\n  JOIN title_crew c ON n.primaryName = c.directors\n  WHERE c.directors = 'Adam Sandler'\n)\nORDER BY t2.averageRating DESC, t1.runtimeMinutes ASC;\n\nThis SQL query will retrieve movies that are comedies, have an average rating of at least 6, and are directed by Adam Sandler. The query uses the JOIN clause to combine the title_basics and title_ratings tables, and the EXISTS clause to check if there is at least one movie directed by Adam Sandler in the title_crew table. The order of the results is based on the average rating and the runtime minutes."}
{"id": 21348, "query": "Excellent! Do you know of any good movies directed by Steven Spielberg?", "history": ["Jeepers Creepers  (2001)", "Scream  (1996)", "Saw  (2004)", "I Know What You Did Last Summer (1997)"], "groundtruth": ["Jigsaw (2017)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.director, t3.job\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.directors = t3.primaryName\nWHERE t1.directors = 'Steven Spielberg' AND t1.genres = 'Horror' AND t2.averageRating > 7\nGROUP BY t1.title\nHAVING COUNT(DISTINCT t3.job) > 2\nORDER BY t1.averageRating DESC;\n\nThis SQL query will retrieve movies directed by Steven Spielberg that are classified as horror and have an average rating above 7. The query will also consider the user's preference history, which includes movies from the horror genre. The results will be grouped by movie title and sorted in descending order of average rating."}
{"id": 21352, "query": "I really enjoy scary movies but haven't seen a good one in a while. Know of any?", "history": ["Avengers: Infinity War (2018)", "Planet of the Apes  (1968)"], "groundtruth": ["War for the Planet of the Apes (2017)", "Dawn of the Planet of the Apes (2014)", "Rise of the Planet of the Apes (2011)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Horror' AND t2.averageRating > 7 AND t2.numVotes > 1000\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE t1.tconst = title_principals.tconst AND category = 'Actors' AND job = 'Director')\nAND NOT EXISTS (SELECT 1 FROM name_basics WHERE t1.primaryName = name_basics.primaryName)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve horror movies with high ratings (average rating > 7 and more than 1000 votes) and no directors or actors in common with the user's preferred movies. It will also order the results by average rating in descending order and start year in descending order.\n\nNote: This query assumes that the user's preferred movies are stored in the title_ratings table with the column names 'averageRating' and 'numVotes'. If the preferred movies are stored in a different table or with different column names, the query will need to be adjusted accordingly."}
{"id": 21355, "query": "Can you recommend anything non-ape related?", "history": ["High School Musical 2", "High School Musical 3: Senior Year (2008)", "Where the Red Fern Grows  (1974)", "High School Musical "], "groundtruth": ["Dream House  (2011)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_principals.category, title_crew.directors, title_crew.writers\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nWHERE title_basics.isAdult = '0' AND title_basics.startYear > 2000 AND title_basics.endYear < 2020 AND title_ratings.numVotes > 1000\nAND title_principals.category NOT IN ('ape')\nAND title_crew.directors NOT IN ('Franklin J. Schaffner')\nAND title_crew.writers NOT IN ('Joe Eszterhas')\nAND title_basics.primaryTitle NOT IN ('High School Musical 2', 'High School Musical 3: Senior Year (2008)', 'Where the Red Fern Grows  (1974)', 'High School Musical ')\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC\nLIMIT 5;\n\nThis SQL query recommends movies to users based on their input and historical preferences. The query first joins the title_basics, name_basics, title_ratings, title_principals, and title_crew tables to retrieve information about the movies and their crew. It then filters out movies that are adult-rated, have a start year before 2000, or have an end year after 2020. Additionally, it excludes movies that have the word \"ape\" in their category, or have directors or writers named Franklin J. Schaffner or Joe Eszterhas, respectively. Finally, it orders the results by average rating in descending order and primary title in asc"}
{"id": 21358, "query": "Can you think of anything like The Evil Dead (1981) ?", "history": ["City of Angels ", "Dumb and Dumber (1994)", "Pretty Woman (1990)"], "groundtruth": ["Sleepless in Seattle (1993)"], "output": "SELECT t.title, t.startYear, t.runtimeMinutes, t.genres, c.primaryName, c.birthYear, c.deathYear, c.primaryProfession, c.knownForTitles\nFROM title_basics t\nJOIN name_basics c ON t.directors = c.nconst\nWHERE t.titleType = 'Feature Film' AND t.isAdult = 'No' AND t.startYear = 1981 AND t.runtimeMinutes > 90\nAND EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title = t.title AND averageRating > 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE category = 'Actress' AND job = 'Lead' AND characters = 'Mia Sara'\n)\nLIMIT 5\n\n;\n\nThis SQL query will retrieve movies that are similar to \"The Evil Dead\" (1981) based on the user's preference history and current input. The query joins the \"title_basics\" and \"name_basics\" tables to get information about the directors and primary names of the movies. It then filters the results to only include feature films released in 1981 with a runtime of over 90 minutes and an average rating of at least 7. Finally, it excludes movies with Mia Sara in the lead role. The LIMIT 5 clause is used to return only the top 5 recommendations."}
{"id": 21359, "query": "I would really like to find a comedy from the 90s! Can you recommend anything?", "history": ["I Saw the Devil (2010)", "Shutter Island  (2010)", "The Sixth Sense (1999)", "Gone Girl  (2014)"], "groundtruth": ["Girls Trip (2017)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.startYear BETWEEN 1990 AND 1999\nAND t1.genres LIKE '%comedy%'\nAND t2.averageRating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst\n                         FROM title_ratings t4\n                         WHERE t4.nconst IN (SELECT nconst\n                                             FROM name_basics\n                                             WHERE primaryProfession = 'Director'))\n)\nAND t2.numVotes > 1000\nORDER BY t2.averageRating DESC;\n\n;"}
{"id": 21361, "query": "I love Lost  (2004) , can you think of more sci-fi?", "history": [], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Science Fiction'\nAND t2.averageRating > (SELECT AVG(t3.averageRating)\n                      FROM title_ratings t3\n                      WHERE t3.tconst = t1.tconst\n                      LIMIT 1)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies with the genre of Science Fiction and have a higher average rating than the average rating of the movies the user has already rated. The user's preference history is empty, so there is no need to consider past ratings in this query. The query will return the title, start year, runtime, average rating, and number of votes for each recommended movie."}
{"id": 21366, "query": "I'm fine thanks! Can you recommend any good Tom Hanks movies?", "history": ["Saving Private Ryan (1998)", "Training Day (2001)", "Avengers: Infinity War (2018)"], "groundtruth": ["Heat  (1996)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Drama' AND title_ratings.numVotes > 10000\nAND title_principals.job = 'Actor' AND title_principals.characters LIKE '%Tom Hanks%'\nAND NOT EXISTS (SELECT 1 FROM title_basics WHERE title_basics.tconst = title_principals.tconst AND title_basics.endYear > 2018)\nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE title_ratings.tconst = title_principals.tconst AND title_ratings.numVotes < 1000)\nAND NOT EXISTS (SELECT 1 FROM name_basics WHERE name_basics.nconst = title_principals.nconst AND name_basics.deathYear > 2018)\n\nORDER BY title_ratings.averageRating DESC, title_basics.startYear ASC;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. The query joins the title_basics, name_basics, title_ratings, and title_principals tables to get the required information. The WHERE clause filters the results based on the user's preference for drama movies, the number of votes, and the presence of Tom Hanks in the movie. The NOT EXISTS clauses exclude movies that are too recent (i.e., released after 2018) or have too few votes (i.e., less than 1000). Finally, the ORDER BY clause sorts the results by the average rating in descending order and the start year in ascending order."}
{"id": 21367, "query": "my favorite movie is Training Day (2001) i love thrillers with action", "history": ["The Matrix (1999)", "Avengers: Infinity War (2018)"], "groundtruth": ["Fargo  (1996)", "Sling Blade (1996)"], "output": "SELECT \n  t.title_id, t.title, t.original_title, t.start_year, t.end_year, t.runtime_minutes, t.genres, \n  n.name, n.birth_year, n.death_year, n.primary_profession, n.known_for_titles, \n  c.category, c.job, c.characters\nFROM \n  title_basics t \n  JOIN name_basics n ON t.primary_title = n.primary_name \n  JOIN title_crew c ON t.directors = c.directors OR t.writers = c.writers \nWHERE \n  t.title = 'Training Day' AND \n  t.genres LIKE '%thriller' AND \n  t.start_year = 2001 AND \n  NOT EXISTS (\n    SELECT \n      1 \n    FROM \n      title_ratings tr \n    WHERE \n      tr.tconst = t.title_id AND \n      tr.average_rating < 7\n  ) AND \n  NOT EXISTS (\n    SELECT \n      1 \n    FROM \n      title_principals tp \n    WHERE \n      tp.title_id = t.title_id AND \n      tp.category = 'action'\n  )\nJOIN (\n  SELECT \n    t.title_id, t.average_rating, COUNT(1) as numVotes \n  FROM \n    title_ratings tr \n  GROUP BY \n    t.title_id\n) rated ON t.title_id = rated.title_id AND rated.average_rating > 7\nJOIN (\n  SELECT \n    t.title_id, COUNT(1) as numCharacters \n  FROM \n    title_principals tp \n  GROUP BY \n    t.title_id\n) char ON t.title_id = char.title_id AND char.numCharacters > 5\nORDER BY \n  rated.average_rating DESC, char.numCharacters DESC;\n\nThis SQL query recommends mov"}
{"id": 21376, "query": "What movie is good to see for fans of The Matrix (1999)", "history": ["Room  (2015)", "The Commuter  (2017)", "Taken  (2008)"], "groundtruth": ["The Grey  (2011)"], "output": "SELECT \ntitle_basics.primaryTitle,\ntitle_basics.genres,\ntitle_ratings.averageRating\nFROM\ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nWHERE\ntitle_basics.genres LIKE '%Action%'\nAND title_basics.startYear = 2000\nAND title_ratings.numVotes > 10000\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE title_principals.tconst = title_basics.tconst AND title_principals.category = 'Actress'\n  AND title_principals.job = 'Lead'\n  AND title_principals.characters = 'Trinity'\n)\n\n;\n\nThis SQL query joins the title_basics, title_ratings, and name_basics tables to retrieve movie titles, genres, and average ratings. It also filters the results to only include movies with at least 10,000 votes and action genres. Finally, it uses a NOT EXISTS clause to exclude movies that feature Carrie-Anne Moss as Trinity in a leading role.\n\nThe query is designed to provide movie recommendations to users who have previously rated movies in the action genre and are fans of The Matrix (1999). The user's preference history is used to filter the results to only include movies that are similar to the movies they have previously rated."}
{"id": 21379, "query": "Can you tell me any black and white romance classics I can watch this weekend?", "history": ["Talladega Nights: The Ballad of Ricky Bobby (2006)", "Game Night (2018)"], "groundtruth": ["Waterworld (1995)", "The Postman  (1997)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.genres = 'Romance' AND title_basics.startYear < 1980 AND title_basics.endYear > 1970\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating)\n                                    FROM title_ratings\n                                    WHERE title_ratings.tconst IN (SELECT title_basics.tconst\n                                                                    FROM title_basics\n                                                                    WHERE title_basics.genres = 'Romance'\n                                                                    AND title_basics.startYear < 1980\n                                                                    AND title_basics.endYear > 1970))\nAND NOT EXISTS (SELECT 1\n                  FROM title_ratings\n                  WHERE title_ratings.tconst = title_basics.tconst\n                  AND title_ratings.numVotes > 100\n                  AND title_ratings.averageRating > 7.5)\nAND title_basics.isAdult = 0\nAND title_basics.runtimeMinutes < 120\nAND name_basics.birthYear > 1900\nAND name_basics.deathYear < 2000\nAND name_basics.primaryProfession = 'Actor'\nAND name_basics.knownForTitles = 'The African Queen (1951)'\n\n;\n\nThis SQL query will retrieve romance movies from the IMDb database that are black and white, have a primary title, and have a start year before 1980 and an end year after 1970. The query will also filter out movies with more than 100 votes and an average rating above 7.5, as well as movies that are"}
{"id": 21382, "query": "I love Nocturnal Animals  (2016) , what else should I see?", "history": ["Little Nicky (2000)", "Superbad  (2007)", "The 40-Year-Old Virgin (2005)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t3.category, t3.job, t3.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nWHERE t1.title = 'Nocturnal Animals (2016)'\nAND t2.averageRating > (SELECT AVG(t4.averageRating) FROM title_ratings t4 WHERE t4.tconst = t1.tconst)\nAND t3.primaryProfession IN ('Actor', 'Director', 'Writer')\nAND t3.knownForTitles IN (SELECT DISTINCT t5.title FROM name_basics t5 WHERE t5.primaryName = t3.primaryName)\nORDER BY t1.averageRating DESC, t3.primaryProfession ASC;\n\nThis SQL query will retrieve movies that are similar to \"Nocturnal Animals (2016)\" based on the user's historical preferences and the ratings of the movies. The query will also filter out movies that do not have a primary profession of Actor, Director, or Writer, and will only include movies that the user has not already rated.\n\nThe query will first join the title_basics, title_ratings, and name_basics tables to get the title, average rating, and the primary name of the movie. It will then join the title_basics table again to get the category, job, and characters of the movie. Finally, it will filter the results based on the user's historical preferences and the ratings of the movies.\n\nThe ORDER BY clause will sort the results by the average rating in descending order, and then by the primary profession in ascending order. This will ensure that the most highly rated movies with the primary profession of Actor, Director, or Writer are recommended first."}
{"id": 21384, "query": "I can't wait to see Deadpool 2  (2018) , how about one I can rent?", "history": ["The Sixth Sense (1999)", "Oldboy  (2003)"], "groundtruth": ["Gone Girl  (2014)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.primaryTitle = 'Deadpool 2' AND t2.averageRating > 7\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  JOIN title_principals t4 ON t3.tconst = t4.tconst\n  WHERE t4.category = 'actor' AND t3.primaryName IN (SELECT n1.primaryName FROM name_basics n1 WHERE n1.birthYear = 1970 AND n1.deathYear IS NULL)\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are similar to \"Deadpool 2\" (2018) and have a high rating (average rating > 7). The query will also exclude movies that have actors who are still alive and were born in 1970. The results will be ordered by average rating in descending order and then by start year in descending order.\n\nNote: This query assumes that the user's preference history is stored in the \"title_ratings\" table, with the \"averageRating\" and \"numVotes\" columns representing the average rating and number of votes for each movie, respectively. The query also uses the \"NOT EXISTS\" clause to exclude movies that have actors who are still alive and were born in 1970, based on the \"name_basics\" table."}
{"id": 21387, "query": "I love The Silence of the Hams (1994) , what can you recommend?", "history": ["The Incredibles (2004)", "Isle Of Dogs (2018)", "Despicable Me 2 (2013)"], "groundtruth": ["Mulan (1998)"], "output": "SELECT \ntitle_basics.title_id, title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, \nname_basics.deathYear, title_crew.directors, title_crew.writers, title_principals.ordering, \ntitle_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.title_id = title_ratings.title_id\nJOIN name_basics ON title_basics.title_id = name_basics.title_id\nJOIN title_crew ON title_basics.title_id = title_crew.title_id\nJOIN title_principals ON title_basics.title_id = title_principals.title_id\nWHERE title_basics.title LIKE '%The Silence of the Hams%' \nAND title_ratings.averageRating > 7.5 \nAND title_ratings.numVotes > 10000\nAND name_basics.primaryName NOT IN ('The Incredibles', 'Isle Of Dogs', 'Despicable Me 2')\nGROUP BY title_basics.title_id, title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, \nname_basics.deathYear, title_crew.directors, title_crew.writers, title_principals.ordering, \ntitle_principals.category, title_principals.job, title_principals.characters\nHAVING COUNT(DISTINCT name_basics.primaryName) > 2;\n\nThis query will retrieve movies that are similar to \"The Silence of the"}
{"id": 21388, "query": "I am looking for a kids movie for my son what do you suggest?", "history": ["Love Actually (2003)"], "groundtruth": ["Twins  (1988)", "Rocky V (1990)", "Rambo  (2012)", "Rambo III (1988)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.titleType = 'Kids' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst IN (SELECT t4.tconst FROM title_ratings t4 WHERE t4.primaryName = 'Love Actually (2003)'))\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve kids movies with high ratings and a large number of votes, taking into account the user's preference for \"Love Actually (2003)\". The query joins the title_basics and title_ratings tables to retrieve the movie titles, average ratings, and number of votes. The WHERE clause filters the results to only include kids movies, and the subquery compares the average rating of the user's preferred movie to the average rating of the recommended movies. The ORDER BY clause sorts the results by average rating in descending order and then by number of votes in descending order."}
{"id": 21396, "query": "Hiya. I like rom-com movies. Can you recommend any?", "history": ["The Goonies (1985)", "Pirates of the Caribbean "], "groundtruth": ["In the Heart of the Sea  (2015)", "Cast Away (2000)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%romantic comedy%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors NOT LIKE 'None'\nAND title_principals.characters NOT LIKE 'None'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will select movies that are classified as romantic comedies, have more than 1000 votes, have a director and at least one character. It will also order the results by the average rating in descending order.\n\nPlease note that this query is just an example and may need to be modified to fit the specific requirements of the IMDb database. Additionally, the user input and preference history should be incorporated into the query to provide personalized recommendations."}
{"id": 21398, "query": "I really like the The Goonies (1985). Not similar but I just thought of the pirate ship haha", "history": ["The Sixth Sense (1999)"], "groundtruth": ["Die Hard (1988)", "The Good Life  (1997)", "Die Hard 2 (1990)", "Daylight  (1996)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.tconst = name_basics.tconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.primaryTitle = 'The Goonies' \n    AND title_ratings.averageRating > 7 \n    AND title_ratings.numVotes > 1000\n    AND name_basics.primaryName NOT IN ('The Sixth Sense')\nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_bas"}
{"id": 21399, "query": "Hi, I LOVE action films! Can you recommend any from the 90s?", "history": ["Pretty Woman (1990)"], "groundtruth": ["Mona Lisa Smile (2003)", "Erin Brockovich  (2000)", "Stepmom  (1998)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.startYear = 1990 AND t1.genres LIKE '%Action%'\nAND t2.averageRating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.tconst = t1.tconst\n    AND t3.numVotes > 100\n)\nAND t1.primaryTitle NOT IN (SELECT t4.primaryTitle FROM title_basics t4 WHERE t4.tconst = t1.tconst)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve action movies from the 1990s with a high average rating and a minimum number of votes, while excluding movies that the user has already rated. The query joins the title_basics and title_ratings tables to get the movie titles, start year, and ratings, and uses a subquery to filter out movies that have a low average rating. The primaryTitle column is used to exclude movies that the user has already rated. The results are sorted in descending order of average rating."}
{"id": 21400, "query": "I've seen it and love it which is why I am looking for another film with her in it", "history": ["Pineapple Express  (2008)"], "groundtruth": ["Up in Smoke (1978)", "This Is the End (2013)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nWHERE t2.averageRating > 7 AND t2.numVotes > 10000 AND t3.knownForTitles LIKE '%Rose Byrne%'\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE t1.tconst = title_principals.tconst AND title_principals.category = 'Actress'\n  AND title_principals.job = 'Lead'\n  AND title_principals.characters = 'Rose Byrne'\n)\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nHAVING COUNT(DISTINCT t3.primaryName) > 1\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that:\n\n1. Have a high average rating (above 7) and a large number of votes (above 10,000).\n2. Have at least one actor/actress known for their work in the movie.\n3. Do not have Rose Byrne as a lead actress.\n4. Have a runtime of at least 60 minutes.\n5. Are not documentaries or short films.\n\nThe query will then group the results by movie title, start year, runtime, average rating, and number of votes. It will also have a HAVING clause that filters out movies with only one actor/actress known for their work in the movie. Finally, the results will be ordered by average rating in descending order and start year in descending order."}
{"id": 21401, "query": "I do! I really enjoy stoner comedies!", "history": ["Twins  (1988)", "Matilda  (1996)"], "groundtruth": ["Throw Momma from the Train (1987)", "Even Money  (2006)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_ratings.numVotes, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy' AND title_basics.startYear >= 1980 AND title_basics.endYear <= 2010\nAND (title_ratings.averageRating > 6 AND title_ratings.numVotes > 1000)\nAND name_basics.primaryProfession = 'Actor'\nAND title_crew.directors = 'Arnold Schwarzenegger'\nAND title_principals.characters = 'Stoner'\nGROUP BY title_basics.title, title_basics.primaryTitle, name_basics.primaryName\nHAVING COUNT(DISTINCT title_principals.characters) > 1\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are comedies, released between 1980 and 2010, have a high average rating and a large number of votes, feature Arnold Schwarzenegger as a director or actor, and have at least two stoner characters. The results will be grouped by title, primary title, and primary name, and sorted by average rating in descending order."}
{"id": 21402, "query": "Good evening! Do you know any movies starring Danny Devito?", "history": ["Sunset Boulevard  (1950)"], "groundtruth": ["The Hateful Eight (2015)", "The Game  (1997)", "The Prestige  (2006)"], "output": "SELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, \n       AVG(averageRating) AS avgRating, \n       COUNT(DISTINCT nconst) AS numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE titleType ='movie' AND \n      primaryName = 'Danny DeVito' AND \n      startYear <= '2022-02-28' AND \n      endYear >= '1950-01-01' AND \n      runtimeMinutes > 80 AND \n      genres LIKE '%comedy%'\nGROUP BY tconst\nHAVING avgRating > (SELECT AVG(averageRating) FROM title_ratings WHERE nconst = (SELECT nconst FROM name_basics WHERE primaryName = 'Danny DeVito'))\nORDER BY avgRating DESC;\n\n;"}
{"id": 21405, "query": "I like crime movies", "history": ["Citizen Kane (1941)", "The Wizard of Oz  (1939)", "Psycho  (1960)"], "groundtruth": ["Casablanca  (1942)"], "output": "SELECT \ntitle_basics.title, \ntitle_ratings.averageRating, \nname_basics.primaryName, \ntitle_crew.directors, \ntitle_principals.characters \nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryTitle \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \ntitle_basics.genres LIKE '%crime%' \nAND title_ratings.numVotes > 1000 \nAND name_basics.primaryProfession = 'Director' \nAND title_crew.directors IN (SELECT nconst FROM name_basics WHERE primaryName = 'Orson Welles') \nAND title_principals.characters IN (SELECT nconst FROM name_basics WHERE primaryName = 'Humphrey Bogart') \nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE tconst = title_basics.tconst AND averageRating > 8) \nORDER BY \ntitle_ratings.averageRating DESC;\n\nThis SQL query is designed to retrieve movies that are classified as crime movies, have a high number of votes, are directed by Orson Welles, and have Humphrey Bogart in a leading role. Additionally, the query excludes movies that have an average rating above 8. The final result is a list of movies that meet the user's input and preference history."}
{"id": 21408, "query": "What are the best movies with Oprah in them?", "history": ["The Hunger Games  (2012)", "Oldboy  (2003)", "Battle Royale  (2000)"], "groundtruth": ["Oldboy  (2013)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.name, t3.category, t4.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nJOIN title_crew t4 ON t1.directors = t4.directors\nJOIN title_principals t5 ON t1.ordering = t5.ordering\nWHERE t1.primaryTitle = 'The Hunger Games' OR t1.originalTitle = 'The Hunger Games'\nAND t2.averageRating > 7\nAND t3.birthYear = 1954\nAND t4.job = 'Director'\nAND t5.category = 'Actress'\nAND t5.characters = 'Oprah'\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes, t2.name, t3.category, t4.job, t5.characters\nHAVING COUNT(DISTINCT t5.characters) > 1;\n\nThis SQL query will retrieve movies that have Oprah in them, have a high average rating, were released in 2012 or earlier, and have a runtime of at least 90 minutes. The query will also filter out movies that are not in the title_basics or title_ratings tables. The result set will include the title, start year, runtime, name of the primary actor, category, job, and characters of the movies that meet the specified criteria."}
{"id": 21409, "query": "I am home all weekend and am looking for some movie recommendations. I'm not picky.", "history": ["Sex and Lucia (2001)", "The Pianist  (2002)", "The Shawshank Redemption (1994)"], "groundtruth": ["Life of Pi "], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.nconst = name_basics.nconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.isAdult = 'no' -- exclude adult movies\nAND title_ratings.averageRating > (\n    SELECT \n    AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.primaryTitle = 'The Shawshank Redemption') -- get the average rating of movies similar to The Shawshank Redemption\n)\nAND title_ratings.numVotes > 10000 -- exclude movies with fewer than 10,000 votes\nAND name_basics.primaryName NOT IN ('The Shawshank Redemption', 'Sex and Lucia', 'The Pianist') -- exclude movies that are already in the user's preference history\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name"}
{"id": 21411, "query": "I love 80s films? Can you tell me any good ones?", "history": [], "groundtruth": ["The Cabin in the Woods"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.startYear >= 1980 AND title_basics.endYear <= 1989\nAND title_ratings.averageRating > 7\nAND name_basics.primaryProfession = 'Actor'\nAND title_crew.directors = 'John Hughes'\nAND title_principals.category = 'Comedy'\nAND title_principals.job = 'Writer'\nAND title_principals.characters = 'Teenagers'\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;"}
{"id": 21412, "query": "I love horror films. Have you seen any you can recommend?", "history": ["How to Be a Latin Lover (2017)", "Frida (2002)", "Dogma  (1999)"], "groundtruth": ["Desperado  (1995)", "Ask the Dust  (2006)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\nINNER JOIN \n    title_ratings ON \n        title_basics.tconst = title_ratings.tconst\nINNER JOIN \n    name_basics ON \n        title_basics.tconst = name_basics.tconst\nINNER JOIN \n    title_crew ON \n        title_basics.tconst = title_crew.tconst\nINNER JOIN \n    title_principals ON \n        title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.genres LIKE '%Horror%' AND \n    title_ratings.averageRating > 6 AND \n    title_ratings.numVotes > 10000\nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMin"}
{"id": 21416, "query": "Mystery, know any?", "history": [], "groundtruth": ["Dance Flick (2009)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Mystery%' AND t2.numVotes > 100\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve all movies from the title_basics table that have the genre 'Mystery' and have more than 100 votes in the title_ratings table. The query will also retrieve the start year, runtime minutes, and genres for each movie, as well as the average rating and number of votes from the title_ratings table. The results will be sorted in descending order by average rating."}
{"id": 21417, "query": "I am looking to watch anything with the Wayans Brothers. Know any good ones?", "history": ["Star Wars  (1977)"], "groundtruth": ["The Empire Strikes Back (1980)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Comedy%' AND title_basics.originalTitle LIKE '%Wayans Brothers%'\nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.numVotes > 1000)\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_principals.tconst = title_basics.tconst AND title_principals.category = 'Actor' AND title_principals.job = 'Director')\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies that are classified as comedies, have the original title containing \"Wayans Brothers\", and have fewer than 1000 votes and no directors in the title principals table. The results will be ordered by average rating in descending order and primary title in ascending order."}
{"id": 21418, "query": "Oh I really liked Star Wars  (1977) What's the next one you think I should see?", "history": ["American Psycho  (2000)", "Psycho  (1960)"], "groundtruth": ["Escape from Alcatraz  (1979)", "Casablanca  (1942)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    c.name, \n    c.birthYear, \n    c.deathYear, \n    c.primaryProfession, \n    c.knownForTitles\nFROM \n    title_basics t \nINNER JOIN \n    name_basics c ON t.directors = c.nconst \nWHERE \n    t.titleType = 'feature film' \n    AND t.primaryTitle = 'Star Wars' \n    AND t.startYear = 1977 \n    AND exists ( \n        SELECT \n            1 \n        FROM \n            title_ratings tr \n        WHERE \n            tr.tconst = t.tconst \n            AND tr.averageRating > (SELECT \n                                     AVG(rating) \n                                     FROM \n                                         title_ratings tr2 \n                                     WHERE \n                                         tr2.tconst = t.tconst) \n            AND tr.numVotes > (SELECT \n                                 COUNT(DISTINCT user_id) \n                                 FROM \n                                     title_ratings tr3 \n                                 WHERE \n                                     tr3.tconst = t.tconst) \n    ) \n    AND NOT EXISTS ( \n        SELECT \n            1 \n        FROM \n            title_ratings tr4 \n        WHERE \n            tr4.tconst = t.tconst \n            AND tr4.averageRating < (SELECT \n                                     AVG(rating) \n                                     FROM \n                                         title_ratings tr5 \n                                     WHERE \n                                         tr5.tconst = t.tconst) \n            AND tr4.num"}
{"id": 21424, "query": "do you know some good sexy movies?", "history": ["Seven  (1995)", "The Godfather (1972)", "Godfather  (1991)"], "groundtruth": ["The Hateful Eight (2015)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.name, t2.birthYear, t2.primaryProfession, t3.job\nFROM title_basics t1\nJOIN name_basics t2 ON t1.primaryTitle = t2.title\nJOIN title_crew t3 ON t1.directors = t3.director\nWHERE t1.genres LIKE '%Drama%' AND t1.startYear >= 1990 AND t1.startYear <= 2010\nAND (t2.knownForTitles LIKE '%Sexy%' OR t3.job LIKE '%Director%')\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.name, t2.birthYear, t2.primaryProfession, t3.job\nHAVING COUNT(*) > (SELECT COUNT(*) FROM title_ratings WHERE averageRating > 7 AND numVotes > 1000);\n\nThis SQL query is designed to retrieve movies that are classified as dramas, released between 1990 and 2010, and have a high average rating. The query also includes a clause to filter out movies that are not sexy, based on the user's preference history. The query joins three tables: title_basics, name_basics, and title_crew. The join conditions are based on the primary title, primary name, and directors. The GROUP BY clause groups the results by title, start year, runtime minutes, genres, name, birth year, primary profession, and job. The HAVING clause filters out movies that do not have a high enough average rating.\n\nNote that this is just one possible approach to generating movie recommendations based on user preferences. There are many other factors that could be taken into account, such as the user's watch history, their ratings, and their search history. Additionally, the query could be optimized for performance by using indexes on the relevant columns and by limiting the number of joins."}
{"id": 21425, "query": "do you know Any good crime movies", "history": ["The Ring  (2002)", "The Silence of the Lambs  (1991)"], "groundtruth": ["The Exorcist  (1973)", "Omen  (2003)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.genres LIKE '%crime%' AND \ntitle_ratings.numVotes > 1000 AND \ntitle_crew.directors LIKE '%Sam Mendes%' AND \ntitle_principals.characters LIKE '%detective%';\n\nThis SQL query will select movies with the genre \"crime\", at least 1000 votes, directed by Sam Mendes, and have a character that is a detective. The query will join the title_basics, title_ratings, title_crew, and title_principals tables to get the desired information."}
{"id": 21431, "query": "do you have some horror movies to recommend please!", "history": ["Godfather  (1991)"], "groundtruth": ["Life of the Party  (2018)", "Scarface  (1983)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'horror'\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE numVotes > 1000)\nAND title_principals.category = 'actor'\nAND title_principals.job = 'director'\nAND title_principals.characters = 'Francis Ford Coppola'\nAND name_basics.primaryName = 'Francis Ford Coppola'\nAND name_basics.birthYear = 1939\nAND name_basics.deathYear = 2022\nAND title_basics.startYear = 1991\nAND title_basics.endYear = 2022\nAND title_basics.runtimeMinutes > 90\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;"}
{"id": 21454, "query": "Hi. I am good. Thanks for asking.  How are you today? Can you recommend me a  crime moovie that you liked?", "history": ["Highlander  (1986)"], "groundtruth": ["Thor: Ragnarok (2017)", "Braveheart (1995)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t2.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE tconst = 'Highlander (1986)')\nAND t5.category = 'crime'\nORDER BY t2.numVotes DESC, t1.startYear DESC;\n\nThis SQL query will select movies that have an average rating higher than the average rating of \"Highlander (1986)\", and that have the category \"crime\". The results will be ordered by the number of votes in descending order and then by the start year in descending order."}
{"id": 21456, "query": "I love Highlander  (1986) , what can you recommend?", "history": ["The Master of Disguise (2002)"], "groundtruth": ["Ferris Bueller's Day Off (1986)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.title LIKE '%Highlander%' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.title LIKE '%The Master of Disguise (2002)%')\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are similar to \"Highlander\" (1986) and have a higher average rating than \"The Master of Disguise\" (2002), which is the user's preference history. The query joins the \"title_basics\" and \"title_ratings\" tables to get the title, average rating, and number of votes for each movie. The WHERE clause filters the results to only include movies with the title \"Highlander\" and a higher average rating than \"The Master of Disguise\". The ORDER BY clause sorts the results by average rating in descending order and number of votes in descending order."}
{"id": 21458, "query": "What about something like The Master of Disguise (2002) ?", "history": ["John Wick (2014)", "Taken  (2008)", "Taken 2 (2012)"], "groundtruth": ["Unknown  (2011)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.title LIKE '%The Master of Disguise%'\nAND title_ratings.averageRating > (\n    SELECT \n        AVG(title_ratings.averageRating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                title_basics.tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.title LIKE '%John Wick%' OR \n                title_basics.title LIKE '%Taken%'\n        )\n    AND title_ratings.numVotes > 1000\n)\nAND title_basics.genres LIKE '%Action%'\nAND title_basics.startYear BETWEEN 2000 AND 2020\nORDER BY \n    title_ratings.averageRating DESC;\n\nThis SQL query is designed to retrieve movies that are similar to \"The Master of Disguise\" (2002) based on the user's preference history and historical ratings. The query first joins the title_basics, title_ratings, and name_basics tables to retrieve information about the movies and their ratings. It then filters the results to only include movies with a high average rating (greater than"}
{"id": 21466, "query": "Great! Thanks. I like epic historical pieces. And recommendations?", "history": ["The Lost Boys (1987)", "Bram Stoker's Dracula (1992)"], "groundtruth": ["Interview with the Vampire  (1994)", "The Vampire Diaries (2009)"], "output": "SELECT \ntitle_basics.title_id,\ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_basics.genres,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.title_id = title_ratings.title_id\nJOIN name_basics ON title_basics.title_id = name_basics.title_id\nWHERE title_basics.genres LIKE '%historical%'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.title_id IN (\n        SELECT title_id\n        FROM title_basics\n        WHERE primaryTitle = 'The Lost Boys (1987)'\n        OR primaryTitle = 'Bram Stoker\\'s Dracula (1992)'\n    )\n)\nORDER BY title_ratings.averageRating DESC;\n\n;"}
{"id": 21473, "query": "I love The Lost Boys (1987) , can you recommend me some vampire movies?", "history": ["A Quiet Place (2018)"], "groundtruth": ["The Reader  (2008)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.primaryTitle = 'The Lost Boys' AND title_basics.isAdult = 0\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (\n        SELECT tconst\n        FROM title_basics\n        WHERE primaryTitle = 'A Quiet Place'\n    )\n)\n\nGROUP BY title_basics.tconst, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear"}
{"id": 21489, "query": "hello how are you do you have any suggestions for horror films similar to Poltergeist  (1982) ?", "history": ["The Incredibles (2004)", "A Quiet Place (2018)"], "groundtruth": ["Game Night (2018)"], "output": "SELECT title_basics.title, title_ratings.averageRating, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Horror'\nAND title_ratings.averageRating > 7\nAND name_basics.primaryProfession = 'Director'\nAND title_crew.directors IN ('Steven Spielberg', 'J.J. Abrams')\nAND title_principals.characters LIKE '%ghost%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will select movies that are classified as horror, have an average rating above 7, and have directors that are either Steven Spielberg or J.J. Abrams. Additionally, the query will only consider movies with characters that are related to ghosts. The results will be ordered by the average rating in descending order.\n\nNote: The query is not executed and the results are not shown. The purpose of this query is to provide movie recommendations based on the user's input and historical preferences."}
{"id": 21490, "query": "I love suspense, horror, drama anything with a catchy mind twisting plot", "history": ["Poltergeist  (1982)", "Mama  (2013)"], "groundtruth": ["Wind River  (2017)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t.title_ratings.averageRating, \n    t.title_ratings.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles, \n    c.title_crew.directors, \n    c.title_crew.writers, \n    p.title_principals.ordering, \n    p.title_principals.nconst, \n    p.title_principals.category, \n    p.title_principals.job, \n    p.title_principals.characters \nFROM \n    title_basics t \n    JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst \n    JOIN name_basics n ON t.title_basics.primaryTitle = n.primaryName \n    JOIN title_crew c ON t.title_basics.tconst = c.tconst \n    JOIN title_principals p ON t.title_basics.tconst = p.tconst \nWHERE \n    t.genres LIKE '%suspense%' \n    AND t.genres LIKE '%horror%' \n    AND t.genres LIKE '%drama%' \n    AND t.isAdult = 0 \n    AND tr.averageRating > 7 \n    AND tr.numVotes > 1000 \n    AND n.primaryProfession = 'Actor'"}
{"id": 21494, "query": "Any other good alien movies you know about?", "history": ["Annie Hall (1977)", "When Harry Met Sally... (1989)", "Sleepless in Seattle (1993)"], "groundtruth": ["Leap Year  (2010)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t3.job, t3.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.primaryName = t3.primaryName\nWHERE t1.genres = 'alien' AND t2.averageRating > 7 AND t3.knownForTitles NOT IN (SELECT n2.knownForTitles FROM name_basics n2 WHERE n2.primaryName = 'Woody Allen')\nORDER BY t1.averageRating DESC;\n\nThis SQL query will retrieve movies with the genre 'alien' that have an average rating above 7 and do not have any of the known for titles of Woody Allen. The query will also join the title_basics, title_ratings, and name_basics tables to retrieve additional information such as the title, average rating, number of votes, primary name, birth year, death year, primary profession, and characters. The results will be ordered by average rating in descending order."}
{"id": 21496, "query": "I am looking for doog comedy movie to watch tonight", "history": ["The Butterfly Effect (2004)", "Crash  (2004)"], "groundtruth": ["The Next Three Days (2010)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t2.averageRating > (SELECT AVG(t3.averageRating)\n                                                    FROM title_ratings t3\n                                                    WHERE t3.tconst IN (SELECT t4.tconst\n                                                                     FROM title_basics t4\n                                                                     WHERE t4.primaryGenre = 'Comedy'))\n                                                    AND t1.startYear BETWEEN 2000 AND 2020\n                                                    AND t1.runtimeMinutes < 120\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes\nHAVING COUNT(DISTINCT t2.nconst) > (SELECT COUNT(DISTINCT n1.nconst)\n                                        FROM name_basics n1\n                                        WHERE n1.primaryProfession = 'Actor'\n                                        AND n1.birthYear BETWEEN 1970 AND 1990)\nORDER BY t1.startYear DESC, t1.runtimeMinutes ASC;\n\nThis SQL query will retrieve comedy movies with high ratings and popularity, released between 2000 and 2020, and have a runtime of less than 120 minutes. The query will also consider the user's preference history, which includes 'The Butterfly Effect (2004)' and 'Crash (2004)'. The final result will be a list of recommended movies, sorted by release year in descending order and runtime in ascending order."}
{"id": 21497, "query": "hello how are you. I am looking for movies similar to Crash  (2004)", "history": ["Seven  (1995)", "Hannibal  (2001)", "Wind River  (2017)"], "groundtruth": ["Zodiac  (2007)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n    JOIN name_basics n ON t.title_basics.primaryTitle = n.title_basics.primaryTitle\nWHERE \n    t.title_basics.title LIKE '%Crash%'(2004)'\n    AND EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals tp, \n            name_basics np\n        WHERE \n            tp.title_basics.tconst = np.title_basics.tconst\n            AND tp.title_principals.ordering ='main cast'\n            AND np.name_basics.primaryName IN (\n                'Brad Pitt', \n                'Cate Blanchett', \n                'Matt Dillon'\n            )\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals tp, \n            name_basics np\n        WHERE \n            tp.title_basics.tconst = np.title_basics.tconst\n            AND tp.title_principals.ordering ='main cast'\n            AND np.name_basics.primaryName NOT IN (\n                'Brad Pitt', \n                '"}
{"id": 21501, "query": "I want to see Avengers: Infinity War (2018) have you seen it?", "history": ["The Shawshank Redemption (1994)", "Hollywood  (1923)"], "groundtruth": ["Jane Eyre  (1970)"], "output": "SELECT \ntitle_basics.tconst, title_basics.titleType, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.nconst, title_principals.category, title_principals.job, title_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.primaryTitle = 'Avengers: Infinity War' AND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'The Shawshank Redemption')\n    AND title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'Hollywood')\n)\n\nORDER BY title_ratings.averageRating DESC;\n\n;"}
{"id": 21502, "query": "i need some great movies to watch with a lover tonight", "history": ["The Departed (2006)", "Goodfellas (1990)"], "groundtruth": ["Once Upon a Time in America (1984)", "Zodiac  (2007)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nWHERE t1.genres LIKE '%romance%' AND t1.startYear BETWEEN 2000 AND 2020\nAND t2.averageRating > 7 AND t2.numVotes > 1000\nAND t3.primaryProfession = 'Actor'\nAND t3.knownForTitles NOT IN (SELECT title FROM title_basics WHERE primaryName = 'Leonardo DiCaprio')\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes\nHAVING COUNT(DISTINCT t3.primaryName) > 2\nORDER BY t1.startYear DESC, t1.runtimeMinutes ASC;\n\nThis SQL query will retrieve movies that are romantic, released between 2000 and 2020, have high ratings and more than 1000 votes, and have at least two actors known for their roles in the movie. The query will also exclude movies that Leonardo DiCaprio is known for, as the user has not shown any preference for his movies.\n\nNote that this query is just a suggestion and may need to be adjusted based on the specific requirements of the movie recommendation system. Additionally, the query assumes that the \"title_basics\" and \"name_basics\" tables have appropriate indexes to support efficient query execution."}
{"id": 21504, "query": "Oh yes! Now some good crime movie to recommend.", "history": ["The Proposal  (2009)", "La La Land  (2016)"], "groundtruth": ["Notebook  (2006)"], "output": "SELECT * FROM (\n  SELECT \n    title_basics.tconst, \n    title_basics.titleType, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.nconst, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\n  FROM title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n  JOIN title_crew ON title_basics.tconst = title_crew.tconst\n  JOIN title_principals ON title_basics.tconst = title_principals.tconst\n  WHERE title_basics.genres = 'crime'\n  AND title_ratings.averageRating > 7\n  AND title_ratings.numVotes > 1000\n  AND name_basics.primaryProfession = 'Actor'\n  AND title_crew.directors = 'Martin Scorsese'\n  AND title_principals.category = 'Actor'\n  AND title_principals.job = 'Lead'\n  AND title_principals.characters = 'Detective"}
{"id": 21509, "query": "do you know some good disney movie", "history": ["Hidden Figures (2016)", "Terms of Endearment (1983)", "Beaches  (1988)"], "groundtruth": ["20th Century Women (2016)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'Disney'\nAND title_ratings.averageRating > 7\nAND title_principals.category = 'Animated'\nAND title_principals.job = 'Movie'\nAND title_principals.characters = 'Animals'\nAND name_basics.primaryName = 'Meryl Streep'\nAND name_basics.birthYear = 1949\nAND name_basics.deathYear = NULL\nAND title_basics.startYear = 2010\nAND title_basics.endYear = 2020\nAND title_basics.runtimeMinutes > 90\nAND title_crew.directors = 'Jennifer Lee'\nAND title_crew.writers = 'Jennifer Lee'\nAND title_principals.characters = 'Queen Elsa'\n\n;"}
{"id": 21527, "query": "Yeah, I'm in the mood for a female-oriented drama like Beaches  (1988) or Terms of Endearment (1983). I like those kinds of films.", "history": ["It Follows (2014)", "Sinister  (2012)"], "groundtruth": ["Ring  (1998)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t4.job, t4.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nWHERE t1.genres LIKE '%drama%' AND t1.originalTitle NOT LIKE '%Documentary%' AND t1.startYear BETWEEN 1980 AND 1990\nAND (t2.averageRating > 7 OR t2.numVotes > 10000)\nAND t3.knownForTitles LIKE '%Beaches%' OR t3.knownForTitles LIKE '%Terms of Endearment%'\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE t1.tconst = title_principals.tconst AND title_principals.category = 'actress')\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t4.job, t4.characters\nHAVING COUNT(DISTINCT t4.job) > 1 AND COUNT(DISTINCT t4.characters) > 2\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are female-oriented dramas, released between 1980 and 1990, have a high average rating or many votes, and are not documentaries. It will also exclude movies that have actresses in leading roles. Finally, it will group the results by movie title, start year, runtime, average rating, num votes, primary name, birth year, death year, primary"}
{"id": 21528, "query": "I am looking for good horror movie.", "history": ["The Lion King (1994)", "Beauty and the Beast  (1992)", "Pocahontas  (1995)"], "groundtruth": ["Tangled (2010)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.genres = 'Horror'\nAND title_ratings.averageRating > (\n    SELECT \n    AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE primaryTitle = 'The Lion King (1994)' OR primaryTitle = 'Beauty and the Beast  (1992)' OR primaryTitle = 'Pocahontas  (1995)')\n)\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve horror movies from the IMDb database that have a high average rating and are similar to the user's preferred movies 'The Lion King (1994)', 'Beauty and the Beast  (1992)' and 'Pocahontas  (1995)'. The query will first join the title_basics and title_ratings tables to retrieve the title information and the average rating for each title. Then, it will use a subquery to filter out the horror movies that have a high average rating and are similar to the user's preferred movies. Finally, the results will be sorted in descending order by the average rating."}
{"id": 21560, "query": "I am great, I am looking for disney movies to watch tonight", "history": ["Step Brothers  (2008)", "Zoolander (2001)"], "groundtruth": ["Tropic Thunder (2008)"], "output": "SELECT t1.title, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.name, t2.primaryProfession, t3.category, t3.job, t3.characters\nFROM title_basics t1\nJOIN name_basics t2 ON t1.primaryTitle = t2.title\nJOIN title_crew t3 ON t1.directors = t3.director\nWHERE t1.genres = 'Disney' AND t1.startYear BETWEEN 2000 AND 2019\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE t1.title = title_ratings.title AND title_ratings.averageRating < 5\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE t1.title = title_principals.title AND title_principals.category = 'Actors' AND title_principals.job = 'Actor'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE t1.title = title_principals.title AND title_principals.category = 'Directors' AND title_principals.job = 'Director'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE t1.title = title_ratings.title AND title_ratings.averageRating > 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE t1.title = title_principals.title AND title_principals.category = 'Writers' AND title_principals.job = 'Writer'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE t1.title = title_principals.title AND title_principals.category = 'Actors' AND title_principals.job = 'Actor'\n)\nORDER BY t1.startYear DESC, t1."}
{"id": 21568, "query": "I'm looking for something like The Sixth Sense (1999) , can you help?", "history": ["Avenger  (2006)", "Avengers: Age of Ultron (2015)"], "groundtruth": ["Blade  (1998)", "Blade II (2002)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE \ntitle_basics.title LIKE '%The Sixth Sense%'  -- User input search criteria\nAND title_ratings.averageRating > 7  -- Minimum average rating threshold\nAND title_ratings.numVotes > 1000  -- Minimum number of votes threshold\nAND name_basics.primaryName NOT IN ('Bruce Willis', 'Haley Joel Osment')  -- Exclude specific actors\nAND title_crew.directors NOT IN ('M. Night Shyamalan')  -- Exclude specific director\nAND title_principals.category = 'actor'  -- Only consider actors\nAND title_principals.job = 'lead'  -- Only consider lead actors\nAND title_principals.char"}
{"id": 21583, "query": "Not sure really. Maybe a romantic comedy.", "history": ["Step Brothers  (2008)", "Talladega Nights: The Ballad of Ricky Bobby (2006)"], "groundtruth": ["Chicago  (2002)", "Ocean's 8 (2018)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%romantic comedy%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Adam McKay%'\nAND title_principals.characters LIKE '%Will Ferrell%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as romantic comedies, have more than 1000 votes, are directed by Adam McKay, and have Will Ferrell in the cast. The results will be ordered by average rating in descending order."}
{"id": 21592, "query": "I love the movie Pan's Labyrinth (2006) , what do you recommend?", "history": ["Argo  (2012)", "Kingsman: The Secret Service (2014)"], "groundtruth": ["Bridge of Spies  (2015)", "The Manchurian Candidate  (1962)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'Pan''s Labyrinth' AND title_ratings.averageRating > 7 AND title_ratings.numVotes > 10000\nAND (name_basics.primaryProfession = 'Director' OR name_basics.primaryProfession = 'Writer')\nAND title_crew.directors OR title_crew.writers\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_principals.characters = 'Complex'\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nThis SQL query is designed to recommend movies to users based on their input and historical preferences. The query first joins the title_basics table with the title_ratings table to get the average rating and number of votes for the movie \"Pan's Labyrinth\". It then joins the title_basics table with the name_basics table to get the primary name"}
{"id": 21593, "query": "I love Argo  (2012) , can you recommend an action or spy movie?", "history": ["Pulp Fiction (1994)"], "groundtruth": ["The Gold Rush (1925)", "Planes, Trains and Automobiles (1986)", "Invasion of the Body Snatchers (1956)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.startYear, title_basics.runtimeMinutes, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.startYear = 2012 AND title_basics.genres LIKE '%Action%' OR title_basics.genres LIKE '%Spy%'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.primaryTitle = 'Argo')\n    AND title_ratings.numVotes > 1000\n)\nAND name_basics.primaryName NOT IN (SELECT name_basics.primaryName FROM name_basics WHERE name_basics.birthYear < 1980)\nAND title_principals.characters NOT LIKE '%animated%'\nGROUP BY title_basics.tconst\nHAVING COUNT(DISTINCT title_principals.job) > 2\nORDER BY title_basics.startYear, title_basics.primaryTitle;\n\nThis SQL query will retrieve movies that are action or spy movies, released in 2012, have a high average rating, and are not animated. It will also consider the user's preference for the movie \"Argo\" and return movies with a similar genre and style. Additionally, it will only consider movies with a primary name that is not from an actor born before 1980."}
{"id": 21596, "query": "I like a great mystery what do you have in mind?", "history": ["Pulp Fiction (1994)", "Kill Bill: Volume 1 (2003)"], "groundtruth": ["The Rock  (1996)", "I Saw the Devil (2010)"], "output": "SELECT t.title, t.startYear, t.runtimeMinutes, t.genres, c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryName\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE tr.averageRating > 8 AND\n      t.genres LIKE '%mystery%' AND\n      NOT EXISTS (\n        SELECT 1\n        FROM title_principals\n        WHERE t.tconst = title_principals.tconst AND\n              category = 'Actress' AND\n              job = 'Lead' AND\n              characters = 'Uma Thurman'\n      )\nORDER BY startYear DESC, runtimeMinutes ASC;\n\nThis SQL query will retrieve movies with high ratings (average rating > 8), genre'mystery', and do not have Uma Thurman as the lead actress. The query will also order the results by start year in descending order and runtime minutes in ascending order.\n\nPlease note that this is just an example query and you may need to adjust it based on the actual schema and data of your IMDb database. Additionally, the query does not take into account the user's historical preferences, but rather uses the given input to filter the results. To incorporate the user's historical preferences, you could add a join with a table storing the user's ratings and preferences."}
{"id": 21597, "query": "I like crime movies like Pulp Fiction (1994)", "history": ["Toy Story (1995)", "Peter Rabbit (2018)"], "groundtruth": ["Mulan (1998)", "Isle Of Dogs (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.genres LIKE '%crime%'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'Pulp Fiction (1994)'))\nAND title_basics.startYear BETWEEN (SELECT MIN(startYear) FROM title_basics WHERE primaryTitle = 'Toy Story (1995)') AND (SELECT MAX(endYear) FROM title_basics WHERE primaryTitle = 'Toy Story (1995)')\nAND NOT EXISTS (SELECT 1 FROM title_basics WHERE primaryTitle = 'Peter Rabbit (2018)')\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nThis SQL query will retrieve movies that are classified as crime movies, have a high average rating, and were released between the start and end years of \"Toy Story (1995)\", and do not include \"Peter Rabbit (2018)\". The query will also take into account the user's preference history, which includes \"Pulp Fiction (1994)\" and \"Toy Story (1995)\". The"}
{"id": 21599, "query": "My son loved Peter Rabbit (2018) do you know any movies thats similar?", "history": ["The Martian  (2015)", "Mission to Mars (2000)"], "groundtruth": ["Red Planet  (2000)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres,\ntitle_ratings.averageRating, \ntitle_ratings.numVotes,\nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.primaryTitle = 'Peter Rabbit (2018)'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.genres = 'Adventure' AND title_basics.startYear = 2015))\nAND title_basics.genres = 'Adventure'\nAND title_basics.startYear = 2015\nAND NOT EXISTS (SELECT 1 FROM title_crew WHERE title_crew.tconst = title_basics.tconst AND title_crew.job = 'Director' AND title_crew.primaryName IN ('Ridley Scott', 'James Gunn'))\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_principals.tconst = title_basics.tconst AND title_principals.category = 'Actor' AND title_principals.job = 'Lead' AND title_principals.characters = 'Matt Damon')\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nThis SQL query"}
{"id": 21600, "query": "I love The Martian  (2015) , what else would I like?", "history": ["Mission: Impossible \u2013 Ghost Protocol (2011)", "Mission: Impossible ", "Gone Girl  (2014)"], "groundtruth": ["Edge of Tomorrow (2014)", "Pi  (1998)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE \ntitle_basics.title LIKE '%The Martian%'\nAND title_ratings.averageRating > (\n    SELECT \n        AVG(title_ratings.averageRating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.title LIKE '%Mission: Impossible%'\n        )\n    AND title_ratings.numVotes > 1000\n)\nAND name_basics.primaryName NOT IN (\n    SELECT \n        primaryName\n    FROM \n        name_basics\n    WHERE \n        name_basics.primaryProfession = 'Director'\n)\nORDER BY \ntitle_basics.startYear DESC, \ntitle_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"The Martian\" (2015) based on the user's preference history and historical ratings. The query will first select all movies with the title containing \"The Martian\" and then join them with the title ratings and name basics tables to get the average rating and other information about the movies. The query will then apply filters"}
{"id": 21602, "query": "I like movies like Gone Girl  (2014) do you know anything else that is worth watching?", "history": ["Love Actually (2003)", "The Notebook (2004)"], "groundtruth": ["When Harry Met Sally... (1989)", "Serendipity  (2001)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles\nFROM\n    title_basics t\nINNER JOIN\n    title_ratings tr ON t.tconst = tr.tconst\nINNER JOIN\n    name_basics n ON t.primaryTitle = n.primaryName\nWHERE\n    t.primaryTitle LIKE '%Gone Girl%'\n    AND t.genres LIKE '%Drama%'\n    AND t.genres LIKE '%Mystery%'\n    AND t.startYear BETWEEN 2000 AND 2019\n    AND t.endYear IS NULL\n    AND n.primaryProfession = 'Actor'\n    AND n.knownForTitles LIKE '%Love Actually%'\n    AND n.knownForTitles LIKE '%The Notebook%'\nGROUP BY\n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,"}
{"id": 21604, "query": "Hello, I am looking for a great movie for date night?", "history": ["The Big Sick (2017)", "Saving Private Ryan (1998)"], "groundtruth": ["Equilibrium  (2002)", "GoldenEye (1995)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.tconst = name_basics.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = 'no'  -- filter out adult movies\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'The Big Sick (2017)' OR primaryTitle = 'Saving Private Ryan (1998)')\n)\nAND title_basics.genres LIKE '%romance%'  -- filter out movies that are not romance\nAND title_basics.startYear BETWEEN 2010 AND 2022  -- filter out movies released before 2010 or after 2022"}
{"id": 21605, "query": "I am looking for something similar to The Big Sick (2017)", "history": ["Saving Private Ryan (1998)", "Black Hawk Down  (2002)"], "groundtruth": ["Jarhead  (2005)", "Letters from Iwo Jima (2006)"], "output": "SELECT t1.title_id, t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.title_id = t4.tconst\nJOIN title_principals t5 ON t1.title_id = t5.tconst\nWHERE t1.isAdult = 0 -- exclude adult movies\nAND t2.averageRating > 7.5 -- only consider movies with high ratings\nAND t3.primaryProfession = 'Actor' -- only consider movies with actors as main profession\nAND t4.directors = 'Michael Showalter' -- only consider movies directed by Michael Showalter\nAND t5.category = 'Comedy' -- only consider comedies\nAND t5.job = 'Actor' -- only consider movies with actors as main profession\nAND t5.characters = 'Kumail' -- only consider movies with characters named Kumail\n\nAND (t1.title LIKE '%The Big Sick%' OR t1.title LIKE '%Sick%' OR t1.title LIKE '%Comedy%' OR t1.title LIKE '%Romance%') -- include movies similar to The Big Sick\n\nGROUP BY t1.title_id, t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t"}
{"id": 21610, "query": "I love Saving Private Ryan (1998) , could you recommend more?", "history": [], "groundtruth": ["Equilibrium  (2002)", "Oblivion  (2013)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.titleType = 'feature film'\nAND t1.isAdult = 0\nAND t1.startYear = 1998\nAND t2.averageRating > (SELECT AVG(t3.averageRating)\n                      FROM title_ratings t3\n                      WHERE t3.tconst = t1.tconst)\nORDER BY t2.numVotes DESC;\n\nThis SQL query will recommend movies similar to \"Saving Private Ryan\" (1998) based on the user's input and historical preferences. The query joins the \"title_basics\" and \"title_ratings\" tables to get the movie titles, start year, and average rating. It then filters the results to only include feature films released in 1998 and with a high average rating. The final order is by the number of votes, with the most popular movies appearing first."}
{"id": 21614, "query": "I love Highlander II: The Quickening (1991) , what can you recommend for fantasy/action?", "history": ["Jack Reacher: Never Go Back (2016)", "Mission: Impossible II (2000)", "Mission: Impossible  (1996)"], "groundtruth": ["Knight and Day (2010)"], "output": "SELECT \ntitle_basics.tconst,\ntitle_basics.titleType,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_basics.genres,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres LIKE '%fantasy' AND title_basics.genres LIKE '%action'\nAND NOT EXISTS (\n    SELECT 1 \n    FROM title_ratings \n    WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.averageRating < 5\n)\nAND title_basics.tconst NOT IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'Highlander II: The Quickening')\n\nGROUP BY title_basics.tconst, title_basics.titleType, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles\n\nHAVING AVG(title_ratings.averageRating) > AVG(title_ratings.averageRating)\n\nORDER BY AVG(title_ratings.averageRating) DESC;\n\nThis SQL query will recommend movies to the user based on"}
{"id": 21616, "query": "I love Rain Man (1988) , what else would I enjoy?", "history": [], "groundtruth": ["Get Out (2017)", "Breaking In (2018)", "Panic Room (2002)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.title = 'Rain Man' AND t2.averageRating > 8\nAND t1.genres LIKE '%Drama%'\nAND t1.startYear BETWEEN 1980 AND 1990\nAND t1.runtimeMinutes BETWEEN 90 AND 120\n\nThis SQL query will retrieve movies that are similar to \"Rain Man\" (1988) based on the user's preference history, which is empty in this case. The query will select the title, start year, runtime minutes, genres, average rating, and number of votes for movies that have a similar title to \"Rain Man\" and are rated above 8, belong to the drama genre, and were released between 1980 and 1990, and have a runtime between 90 and 120 minutes."}
{"id": 21619, "query": "I love K-19: The Widowmaker (2002) , can you recommend action or drama?", "history": ["Pitch Perfect (2012)"], "groundtruth": ["Whiplash  (2014)", "This Is Spinal Tap (1984)"], "output": "SELECT t1.title_id, t1.title, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nJOIN name_basics t3 ON t2.averageRating > (SELECT AVG(rating) FROM title_ratings WHERE title_id = t1.title_id)\nWHERE t1.genres LIKE '%Action%' OR t1.genres LIKE '%Drama%'\nAND t2.numVotes > 1000\nAND t3.primaryProfession = 'Actor'\nAND t3.knownForTitles LIKE '%Pitch Perfect (2012)%'\nORDER BY t2.averageRating DESC;\n\nThis SQL query will select movies that are either action or drama, have a high average rating, and have at least 1000 votes. It will also select movies that have an actor in common with \"Pitch Perfect (2012)\" and have a primary profession of \"Actor\". Finally, it will order the results by the average rating in descending order.\n\nNote that this query assumes that the user has previously rated \"Pitch Perfect (2012)\" and has a preference for action and drama movies. The query will return a list of movies that are similar to \"Pitch Perfect (2012)\" and fit the user's preferred genres."}
{"id": 21620, "query": "Pitch Perfect (2012)", "history": ["Les Mis\u00e9rables  (2012)", "The Greatest Showman (2017)", "Into the Woods  (2014)"], "groundtruth": ["Moulin Rouge! (2001)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.title = 'Pitch Perfect' AND \ntitle_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE title = 'Les Mis\u00e9rables') AND \ntitle_ratings.numVotes > (SELECT COUNT(numVotes) FROM title_ratings WHERE title = 'Les Mis\u00e9rables') AND \ntitle_basics.genres LIKE '%Musical%' AND \ntitle_basics.startYear BETWEEN 2010 AND 2020 AND \ntitle_basics.endYear IS NULL;"}
{"id": 21626, "query": "I love chick flicks like Mother's Day  (1980) . Can you recommend any movies like that?", "history": ["The Secret Life of Walter Mitty  (2013)"], "groundtruth": ["Indiana Jones and the Last Crusade (1989)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n1 ON t1.primaryName = n1.primaryName\nWHERE t1.genres LIKE '%romance%' AND t1.startYear = 1980\nAND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst = t1.tconst)\nAND t1.runtimeMinutes > (SELECT AVG(t4.runtimeMinutes) FROM title_basics t4 WHERE t4.tconst = t1.tconst)\nAND NOT EXISTS (SELECT 1 FROM title_principals t5 WHERE t5.tconst = t1.tconst AND t5.category = 'actress')\nAND NOT EXISTS (SELECT 1 FROM title_crew t6 WHERE t6.tconst = t1.tconst AND t6.job = 'director')\nAND NOT EXISTS (SELECT 1 FROM title_principals t7 WHERE t7.tconst = t1.tconst AND t7.job = 'actor')\nAND NOT EXISTS (SELECT 1 FROM title_crew t8 WHERE t8.tconst = t1.tconst AND t8.job = 'writer')\nAND NOT EXISTS (SELECT 1 FROM title_ratings t9 WHERE t9.tconst = t1.tconst AND t9.numVotes > 1000)\nAND NOT EXISTS (SELECT 1 FROM title_basics t10 WHERE t10.tconst = t1.tconst AND t10.endYear > 2015)\n\n;\n\nThis query uses a combination of joins and subqueries to retrieve movies that match the user's preferences and historical ratings. It first joins the title_basics and title_ratings tables to get the movie's title, start year, and average rating. It then joins the name_basics table to get the primary name of the movie.\n\nThe query then applies several filters"}
{"id": 21632, "query": "I Love action and adventure style movies.", "history": [], "groundtruth": ["Black Mass  (2015)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE \n    title_basics.genres LIKE '%Action and Adventure%'\n    AND title_ratings.numVotes > 1000\n    AND title_ratings.averageRating > 7\nORDER BY \n    title_ratings.averageRating DESC,\n    title_basics.startYear DESC\nLIMIT \n    5;\n\nThis SQL query will retrieve movies that are classified as Action and Adventure, have at least 1000 votes and an average rating of at least 7. The results will be ordered by average rating in descending order and start year in descending order, with a limit of 5 movies."}
{"id": 21633, "query": "Do you know some good crime movies!", "history": ["Forrest Gump (1994)", "Big Fish (2003)"], "groundtruth": ["Spotlight  (2015)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.genres = 'Crime'\n    AND title_ratings.averageRating > 7\n    AND title_principals.category = 'Performance'\n    AND title_principals.job = 'Actor'\n    AND title_principals.characters = 'Lawyer'\n    AND name_basics.primaryProfession = 'Actor'\n    AND name_basics.knownForTitles = 'Goodfellas (1990), The Godfather: Part III (1990)'\nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle"}
{"id": 21634, "query": "I do! Do you know any good drama movies?", "history": ["Notebook  (2006)"], "groundtruth": ["Singing Lovebirds (1939)"], "output": "SELECT t.title, t.startYear, t.runtimeMinutes, t.genres, c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics n ON t.primaryName = n.nconst\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE t.genres = 'Drama' AND tr.averageRating > 7 AND n.birthYear > 1980 AND n.knownForTitles NOT LIKE '%Notebook%'\nORDER BY tr.averageRating DESC, t.startYear DESC;\n\nThis SQL query will retrieve drama movies with high average ratings, released after 2000, and not in the user's preference history. The result will be ordered by average rating and release year in descending order."}
{"id": 21640, "query": "I do too! I l really liked Wonder Woman  (2017) . What other movies like that do you recommend?", "history": ["Batman Returns (1992)", "Batman Begins", "Deadpool  (2016)"], "groundtruth": ["Superman: Unbound (2013)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Superhero'\nAND t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst FROM title_basics t4 WHERE t4.genres = 'Superhero')\n)\nAND t1.startYear BETWEEN 2010 AND 2020\nAND EXISTS (\n    SELECT 1 FROM title_crew t3\n    JOIN name_basics t4 ON t3.directors = t4.nconst\n    WHERE t4.primaryProfession = 'Actor' AND t4.knownForTitles IN (SELECT t5.tconst FROM title_basics t5 WHERE t5.genres = 'Superhero')\n)\nAND NOT EXISTS (\n    SELECT 1 FROM title_principals t6\n    JOIN name_basics t7 ON t6.ordering = t7.nconst\n    WHERE t7.primaryProfession = 'Actor' AND t7.knownForTitles IN (SELECT t8.tconst FROM title_basics t8 WHERE t8.genres = 'Superhero')\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will recommend movies that are in the 'Superhero' genre, were released between 2010 and 2020, have high average ratings, and have at least one actor who has worked on a Superhero movie before. The query will also exclude movies that have actors who have worked on non-Superhero movies.\n\nNote that this query is just an example and may need to be adjusted based on the specifics of the IMDb database and the user's input. Additionally, the query will return a list of movies that meet the specified criteria, but do not guarantee that they will be the exact same movies"}
{"id": 21641, "query": "I love Deadpool  (2016) can you recommend some movies like that one", "history": ["A Beautiful Mind  (2001)"], "groundtruth": ["Boyhood  (2014)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE \n    title_basics.primaryTitle = 'Deadpool' AND \n    title_ratings.averageRating > (\n        SELECT \n            AVG(title_ratings.averageRating)\n        FROM \n            title_ratings\n            JOIN name_basics ON title_ratings.nconst = name_basics.nconst\n            WHERE \n                name_basics.primaryName = 'Russell Crowe' AND \n                title_ratings.tconst = 'A Beautiful Mind'\n    )\n    AND title_basics.genres LIKE '%Action%'\n    AND title_basics.genres LIKE '%Comedy%'\n    AND title_basics.startYear = 2016\nORDER BY \n    title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"Deadpool\" (2016) and have a similar average rating to \"A Beautiful Mind\" (2001), which is one of the user's preferred movies. The query will also filter the results to only include movies that are in the action and comedy genres, and were released in 2016. Finally, the results will be sorted in descending order by the average rating."}
{"id": 21642, "query": "I'm great! I love drama movies. Do you have any recommendations?", "history": ["Seven  (1995)", "Wind River  (2017)"], "groundtruth": ["Memento  (2000)"], "output": "SELECT \n  t.title_basics.title,\n  t.title_basics.primaryTitle,\n  t.title_basics.originalTitle,\n  t.title_basics.isAdult,\n  t.title_basics.startYear,\n  t.title_basics.endYear,\n  t.title_basics.runtimeMinutes,\n  t.title_basics.genres,\n  r.averageRating,\n  r.numVotes\nFROM \n  title_basics t\n  JOIN title_ratings r ON t.title_basics.tconst = r.tconst\nWHERE \n  t.genres = 'drama'\n  AND r.averageRating > (\n    SELECT \n      AVG(r2.averageRating)\n    FROM \n      title_ratings r2\n      JOIN title_basics t2 ON r2.tconst = t2.tconst\n    WHERE \n      t2.primaryTitle = 'Seven'\n      OR t2.primaryTitle = 'Wind River'\n  )\nORDER BY \n  r.averageRating DESC;\n\nThis SQL query will retrieve all drama movies that have a higher average rating than the average rating of the user's preferred movies 'Seven' and 'Wind River'. The query will first join the title_basics and title_ratings tables to get the movie details and ratings, and then apply the filter on the genres and ratings. Finally, the query will order the results by the average rating in descending order."}
{"id": 21643, "query": "I need good mystery movies", "history": ["Black Mass  (2015)", "The Tourist  (2010)"], "groundtruth": ["The Astronaut's Wife (1999)", "Dark Shadows  (2012)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.genres LIKE '%mystery%' \nAND title_ratings.averageRating > 7 \nAND title_principals.category = 'actor' \nAND title_principals.job = 'lead' \nAND title_principals.characters = 'detective' \nAND name_basics.birthYear > 1970 \nAND name_basics.deathYear < 2020 \nAND NOT exists (\n  SELECT 1 \n  FROM title_ratings \n  WHERE title_ratings.tconst = title_basics.tconst \n  AND title_ratings.numVotes > 1000 \n) \nAND NOT exists (\n  SELECT 1 \n  FROM title_principals \n  WHERE title_principals.tconst = title_basics.tconst \n  AND title_principals.category = 'actor' \n  AND title_principals.job = 'lead' \n  AND title_principals.characters = 'detective' \n)"}
{"id": 21648, "query": "I love The Place Beyond the Pines (2012) , what can you recommend?", "history": ["The Shawshank Redemption (1994)", "Anchorman: The Legend of Ron Burgundy (2004)"], "groundtruth": ["Evil Dead  (2013)", "Life  (1999)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.primaryTitle = 'The Place Beyond the Pines' AND \ntitle_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) \nFROM title_ratings WHERE title_ratings.tconst IN (SELECT tconst \nFROM title_basics WHERE primaryTitle = 'The Shawshank Redemption') AND \ntitle_ratings.numVotes > 1000) AND \ntitle_basics.genres LIKE '%Drama%' AND \ntitle_basics.startYear BETWEEN 2000 AND 2019 AND \ntitle_basics.endYear IS NULL;\n\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. The query first joins the title_basics table with the title_ratings table to get the average rating and number of votes for the user's input movie. It then joins the name_basics table to get the primary name, birth year, and death year of the actors and directors. Next, it joins the title_crew"}
{"id": 21651, "query": "I like comedies.", "history": ["Insidious  (2011)", "A Quiet Place (2018)"], "groundtruth": ["Truth or Dare  (2013)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.name, t2.primaryProfession, t3.category, t4.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.genres LIKE '%comedy%'\nAND t2.averageRating > (\n    SELECT AVG(t6.rating)\n    FROM title_ratings t6\n    WHERE t6.nconst IN (SELECT nconst FROM name_basics WHERE primaryProfession = 'Actor')\n    AND t6.tconst = t1.tconst\n)\nAND t3.primaryProfession NOT IN (SELECT primaryProfession FROM name_basics WHERE birthYear > 1980)\nAND t4.job NOT IN (SELECT job FROM title_principals WHERE category = 'Director')\nAND t5.characters NOT IN (SELECT characters FROM title_principals WHERE job = 'Actor')\nORDER BY t1.averageRating DESC;\n\nThis query will retrieve movies that are comedies, have high ratings, and do not feature actors or directors who were born after 1980. It will also exclude movies that have actors in leading roles. The query uses a subquery to find the average rating of movies that have actors in supporting roles, and then filters the results based on that average rating. Finally, the results are sorted in descending order by average rating."}
{"id": 21653, "query": "Yeah I feel like watching a good horror movie tonight", "history": ["Anchorman: The Legend of Ron Burgundy (2004)"], "groundtruth": ["Spy  (2015)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'horror' AND t2.averageRating > (SELECT AVG(t3.averageRating)\n                                                    FROM title_ratings t3\n                                                    WHERE t3.tconst = t1.tconst)\n                                                    AND t2.numVotes > (SELECT COUNT(t4.tconst)\n                                                                     FROM title_ratings t4\n                                                                     WHERE t4.tconst = t1.tconst)\n                                                    AND t1.startYear >= (SELECT MIN(t5.startYear)\n                                                                     FROM title_basics t5\n                                                                     WHERE t5.primaryTitle = t1.primaryTitle)\n                                                    AND t1.endYear <= (SELECT MAX(t6.endYear)\n                                                                     FROM title_basics t6\n                                                                     WHERE t6.primaryTitle = t1.primaryTitle)\n                                                    AND t2.numVotes > 100\n                                                    AND t1.isAdult = 0\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve horror movies that have a high average rating, a large number of votes, and are within the specified time period. The query will also filter out adult movies and movies that are not in the user's preference history. The final result will be a list of movie recommendations based on the user's input and historical preferences."}
{"id": 21654, "query": "Got any ideas for a funny movie?", "history": ["Meet the Parents (2000)"], "groundtruth": ["I Love You, Man (2009)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.numVotes > 1000\nAND title_principals.characters LIKE '%funny%'\nAND NOT EXISTS (\n  SELECT 1 FROM title_basics\n  WHERE title_basics.tconst = title_principals.tconst AND title_basics.primaryTitle = 'Meet the Parents (2000)'\n)\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query joins multiple tables to retrieve information about movies that are classified as comedies, have a high number of votes, and have characters that are described as funny. It also excludes movies that are the same as \"Meet the Parents (2000)\" in the user's preference history. Finally, it orders the results by average rating in descending order and primary title in ascending order."}
{"id": 21657, "query": "I would like to watch a good action movie tonight. any recommendations?", "history": ["The Matrix (1999)", "Source Code (2011)", "Primer  (2004)"], "groundtruth": ["Inception (2010)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.tconst = name_basics.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = 'no'\nAND title_basics.genres LIKE '%action%'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 10000\nAND name_basics.primaryProfession = 'actor'\nAND title_crew.directors LIKE '%The Wachowskis%'\nAND title_principals.category = 'actor'\nAND title_principals.job = 'lead'\nAND title_principals.characters LIKE '%Keanu Reeves%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics."}
{"id": 21658, "query": "I love The Matrix (1999) , can you recommend something like that?", "history": ["Pan's Labyrinth (2006)"], "groundtruth": ["Looper  (2012)", "Die Hard (1988)", "Die Hard 2 (1990)", "Live Free or Die Hard (2007)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.knownForTitles, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.category, title_principals.job, \ntitle_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.tconst = name_basics.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'The Matrix' \nAND title_ratings.averageRating > 7 \nAND title_principals.category = 'Science Fiction'\nAND title_principals.job = 'Action'\nAND title_principals.characters = 'Mystery'\nAND NOT EXISTS (\n  SELECT 1 \n  FROM title_basics \n  WHERE title_basics.tconst = title_principals.tconst \n  AND title_basics.endYear < '2000-01-01'\n)\nAND NOT EXISTS (\n  SELECT 1 \n  FROM title_ratings \n  WHERE title_ratings.tconst = title_principals.tconst \n  AND title_ratings.numVotes < 1000\n)\nAND NOT EXISTS (\n  SELECT 1 \n  FROM name_basics \n  WHERE name_basics.nconst = title_principals.nconst \n  AND name_basics.deathYear < '2000-01-01'\n)\nAND NOT EXISTS (\n  SELECT 1 \n  FROM title_crew"}
{"id": 21664, "query": "I would like to relax with some robot apocalypse-type movies", "history": ["Game Night (2018)", "Jumanji  (2017)"], "groundtruth": ["Spaceballs (1987)", "Show Dogs (2018)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t.title_ratings.averageRating, \n    t.title_ratings.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n    JOIN name_basics n ON t.title_basics.primaryTitle = n.primaryName\nWHERE \n    t.genres = 'Science Fiction' \n    AND t.genres = 'Action' \n    AND t.title_basics.isAdult = 0\n    AND tr.averageRating > (\n        SELECT \n            AVG(tr2.averageRating)\n        FROM \n            title_ratings tr2\n            JOIN name_basics n2 ON tr2.tconst = n2.primaryName\n            WHERE \n                n2.primaryName = 'Game Night (2018)'\n                OR n2.primaryName = 'Jumanji (2017)'\n            GROUP BY \n                tr2.tconst\n    )\nORDER BY \n    t.title_basics.startYear DESC, \n    t.title_basics.endYear DESC, \n    t.title_basics.runtimeMinutes ASC;\n\nThis SQL query will retrieve movies that are classified as science fiction and action, have a high average rating, and do not have adult content. The query will also consider the user's preference history"}
{"id": 21665, "query": "Im looking for a good comedy what would you suggest", "history": ["Fargo  (1996)", "The Usual Suspects (1995)", "Reservoir Dogs (1992)", "Pulp Fiction (1994)", "Oldboy  (2003)"], "groundtruth": ["I Saw the Devil (2010)"], "output": "SELECT t.*, n.*, c.*, p.*, r.*\nFROM title_basics t\nJOIN name_basics n ON t.primaryTitle = n.title\nJOIN title_crew c ON t.directors = c.director\nJOIN title_principals p ON t.ordering = p.ordering\nJOIN genres r ON t.genres = r.genre\nWHERE t.genres = 'Comedy'\nAND t.startYear > 1990\nAND t.endYear < 2010\nAND EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title_id = t.tconst\n  AND averageRating > 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title_id = t.tconst\n  AND averageRating < 5\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM name_basics\n  WHERE n.primaryName = t.primaryTitle\n  AND n.birthYear > 1960\n  AND n.deathYear < 2010\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE p.ordering = t.ordering\n  AND p.category = 'Actor'\n  AND p.job = 'Lead'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE p.ordering = t.ordering\n  AND p.category = 'Director'\n  AND p.job = 'Director'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE p.ordering = t.ordering\n  AND p.category = 'Writer'\n  AND p.job = 'Writer'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title_id = t.tconst\n  AND numVotes > 1000\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title_id = t.tconst\n  AND numVotes < 100\n)\nLI"}
{"id": 21667, "query": "I love horror and comedies though", "history": ["Fargo  (1996)", "Apocalypse Now (1979)", "The Usual Suspects (1995)", "Predator  (1987)", "Pulp Fiction (1994)", "Ocean's 11 (1960)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT * FROM title_basics tb\nJOIN (\n  SELECT title_id, AVG(rating) AS avg_rating\n  FROM title_ratings\n  GROUP BY title_id\n) tr ON tb.title_id = tr.title_id\nJOIN (\n  SELECT nb.name_id, COUNT(DISTINCT tc.category) AS num_categories\n  FROM name_basics nb\n  JOIN title_crew tc ON nb.name_id = tc.name_id\n  GROUP BY nb.name_id\n) nc ON tb.title_id = nc.name_id\nWHERE tb.genres LIKE '%horror%' OR tb.genres LIKE '%comedy%'\nAND tb.startYear BETWEEN 1970 AND 2010\nAND tb.runtimeMinutes > 90\nAND NOT EXISTS (\n  SELECT 1 FROM title_ratings\n  WHERE title_id = tb.title_id AND user_id = ANY (\n    SELECT user_id\n    FROM user_preferences\n    WHERE title_id = tb.title_id\n  )\n)\nORDER BY avg_rating DESC, num_categories DESC;\n\nThis SQL query will select movies that are classified as horror or comedy, were released between 1970 and 2010, have a runtime of over 90 minutes, and do not have any ratings from the user's preference history. The query will also join the title_basics table with the title_ratings table to get the average rating for each movie, and join the name_basics table with the title_crew table to get the number of categories for each movie. Finally, the query will order the results by average rating and number of categories in descending order."}
{"id": 21669, "query": "I loved Ant-Man  (2015) , can you recommend more?", "history": ["Ant-Man  (2015)", "The Avengers  (2012)", "Deadpool 2  (2018)"], "groundtruth": ["Ant-Man and the Wasp (2018)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles\nFROM \n    title_basics \nINNER JOIN \n    title_ratings \nON \n    title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics \nON \n    title_basics.nconst = name_basics.nconst \nWHERE \n    title_basics.title LIKE '%Ant-Man%' \n    AND title_ratings.averageRating > 7 \n    AND title_ratings.numVotes > 10000 \n    AND name_basics.primaryName LIKE '%Paul Rudd%' \n    AND name_basics.knownForTitles LIKE '%The Avengers%' \n    AND name_basics.knownForTitles LIKE '%Deadpool 2%' \nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics."}
{"id": 21670, "query": "Right now I'm looking for a good bunch of superhero movies", "history": ["Terminator 2: Judgment Day (1991)", "Star Wars: Episode I \u2013 The Phantom Menace (1999)"], "groundtruth": ["The Guest  (2014)", "Equilibrium  (2002)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.knownForTitles, title_crew.directors, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Superhero'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryName NOT IN ('George Lucas', 'James Cameron')\nAND title_crew.directors NOT IN ('George Lucas', 'James Cameron')\nAND title_principals.category NOT IN ('Actor', 'Actress')\nAND title_principals.job NOT IN ('Director', 'Writer')\nAND title_principals.characters NOT IN ('Han Solo', 'Darth Vader')\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC\nLIMIT 10;\n\nThis SQL query will retrieve movies that are classified as \"Superhero\" and have a high average rating (> 7) and a large number of votes (> 1000), while excluding movies directed by George Lucas or James Cameron, and movies that have Han Solo or Darth Vader in the cast. The results will be ordered by average rating in descending order and then by primary title in ascending order, with a limit of 10 movies."}
{"id": 21682, "query": "Let's see, I like weird foreign films, you know, like Cinema Paradiso (1988)", "history": ["Superbad  (2007)", "The 40-Year-Old Virgin (2005)", "The Naked Gun 2\u00bd: The Smell of Fear (1991)"], "groundtruth": ["Game Night (2018)"], "output": "SELECT t1.title_id, t1.title, t1.original_title, t1.start_year, t1.end_year, t1.runtime_minutes, t1.genres, t2.average_rating, t2.num_votes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nJOIN name_basics n ON t1.primary_title = n.primary_name\nWHERE t1.genres LIKE '%foreign%' AND t1.start_year BETWEEN 1980 AND 1999\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE title_id = t1.title_id AND category = 'comedy'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_crew\n  WHERE title_id = t1.title_id AND job = 'director'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE title_id = t1.title_id AND job = 'actor'\n)\nAND t2.average_rating > (\n  SELECT AVG(t3.rating)\n  FROM title_ratings t3\n  WHERE t3.title_id = t1.title_id\n)\nAND t2.num_votes > 100\nORDER BY t2.average_rating DESC;\n\nThis SQL query will retrieve movies that are foreign, not comedies, not directed by anyone in the crew table, not acted by anyone in the principals table, and have a high average rating and a large number of votes. The query also filters out movies that are not from the specified start and end years.\n\nNote that this is just one possible query, and there are many other ways to design a movie recommendation system. The query above assumes that the input and preference history are in the format you provided, and that the tables have the columns you listed. You may need to modify the query to fit your specific use case."}
{"id": 21683, "query": "Hi, I'm kinda bored, I'm looking for a movie. One that is funny but not too stupid. I like parodies, like The Naked Gun 2\u00bd: The Smell of Fear (1991)", "history": ["La La Land  (2016)", "The Great Gatsby  (2013)"], "groundtruth": ["The Notebook (2004)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%comedy%' AND title_basics.isAdult = '0' AND title_ratings.numVotes > 1000\nAND title_basics.title NOT IN (SELECT title FROM title_basics WHERE nconst IN (SELECT name FROM name_basics WHERE birthYear = 1991))\nAND title_basics.title NOT IN (SELECT title FROM title_basics WHERE nconst IN (SELECT name FROM name_basics WHERE deathYear = 1991))\nAND title_basics.primaryTitle IN (SELECT title FROM title_basics WHERE nconst IN (SELECT name FROM name_basics WHERE primaryProfession = 'Actor'))\nAND title_basics.primaryTitle NOT IN (SELECT title FROM title_basics WHERE nconst IN (SELECT name FROM name_basics WHERE primaryProfession = 'Director'))\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE numVotes > 1000 AND title NOT IN (SELECT title FROM title_basics WHERE nconst IN (SELECT name FROM name_basics WHERE primaryProfession = 'Actor')));\n\nThis query will find movies that are comedies, have more than 1000 votes, and are not from the years 1991, and are not parodies, and have at least one actor in the main cast, and have an average rating higher than the average rating of all movies with more than 1000 votes that do not have a director in the main cast.\n\nPlease note that this is just an example query, you may need to adjust it based on the specifics of your database and"}
{"id": 21684, "query": "I love The Great Gatsby  (2013) , can you recommend more?", "history": ["The Rock  (1996)", "The Hunt for Red October  (1990)", "Indiana Jones and the Last Crusade (1989)"], "groundtruth": ["The Last Boy Scout (1991)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n ON t1.primaryName = n.nconst\nWHERE t1.genres = 'Drama' AND t1.startYear = 2013 AND t1.endYear = 2013 AND t2.averageRating > 7 AND t2.numVotes > 10000\nAND (\n    SELECT COUNT(*)\n    FROM title_principals\n    WHERE category = 'Actor' AND job = 'Lead' AND characters = 'Jay Gatsby'\n    LIMIT 1\n) > 1\nAND EXISTS (\n    SELECT 1\n    FROM title_crew\n    WHERE directors = 'Baz Luhrmann'\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_principals\n    WHERE category = 'Actor' AND job = 'Lead' AND characters = 'Nick Carraway'\n)\nLIMIT 5;\n\nThis SQL query will retrieve movies that are dramas released in 2013, have a high average rating and a large number of votes, and are not led by actors who played the character of Nick Carraway. Additionally, the query will only consider movies that have a director named Baz Luhrmann and do not have any actors who played the character of Jay Gatsby. Finally, the query will limit the results to the top 5 movies.\n\nNote that this query is just a suggestion and may need to be modified based on the specific requirements of your movie recommendation system."}
{"id": 21685, "query": "I love The Hunt for Red October  (1990) , can you recommend some movies?", "history": ["Horrible Bosses 2 (2014)", "Game Night (2018)", "Horrible Bosses (2011)"], "groundtruth": ["Arsenic and Old Lace "], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.startYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'The Hunt for Red October'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryName IN ('Mark Wahlberg', 'Will Ferrell', 'Zach Galifianakis')\nAND title_crew.directors IN ('Sean Anders', 'Jason Bateman', 'Jamie Foxx')\nAND title_principals.category IN ('Comedy', 'Crime', 'Thriller')\nAND title_principals.job IN ('Actor', 'Director', 'Writer')\nAND title_principals.characters LIKE '%horrible%';\n\nNote: This query is designed to recommend movies based on the user's input and historical preferences. The query joins multiple tables to gather information about the movies and their crew, and uses various conditions to filter the results based on the user's preferences."}
{"id": 21686, "query": "I like movies like Game Night (2018) any suggestions", "history": ["Eragon  (2006)", "Harry Potter and the Philosopher's Stone  (2001)"], "groundtruth": ["Warcraft  (2016)", "Percy Jackson & the Olympians: The Lightning Thief"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t2.averageRating > 7 AND t2.numVotes > 10000\nAND (t1.title_basics.title LIKE '%Game%' OR t1.title_basics.title LIKE '%Night%')\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  JOIN title_principals t4 ON t3.tconst = t4.tconst\n  WHERE t3.title_basics.title = t1.title_basics.title AND t4.category = 'Fantasy'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t5\n  JOIN title_crew t6 ON t5.tconst = t6.tconst\n  WHERE t5.title_basics.title = t1.title_basics.title AND t6.directors = 'Chris McKay'\n)\nORDER BY t2.averageRating DESC, t1.title_basics.title ASC;\n\nThis SQL query will retrieve movies that are comedies with high ratings (average rating > 7 and at least 10,000 votes) and contain the words \"Game\" or \"Night\" in the title, and do not belong to the fantasy or science fiction genres. Additionally, the query will exclude movies directed by Chris McKay. The results will be ordered by average rating in descending order and then by title in ascending order."}
{"id": 21687, "query": "I love Eragon  (2006) , what else would I like?", "history": ["Teaching Mrs. Tingle (1999)", "Date Night (2010)", "Deadpool 2  (2018)", "Game Night (2018)", "Deadpool  (2016)"], "groundtruth": ["Charade  (1953)"], "output": "SELECT t1.title, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.title LIKE '%Eragon%' AND t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst\n                         FROM title_basics t4\n                         WHERE t4.title LIKE '%Teaching Mrs. Tingle%' OR\n                             t4.title LIKE '%Date Night%' OR\n                             t4.title LIKE '%Deadpool 2%' OR\n                             t4.title LIKE '%Game Night%'\n                         )\n)\nORDER BY t2.averageRating DESC, t1.runtimeMinutes ASC;\n\n;"}
{"id": 21689, "query": "I am. Can you recommend me something like my favorite movie The 'Burbs (1989) ?", "history": ["Battlefield Earth  (2000)"], "groundtruth": ["Warcraft  (2016)", "Ender's Game  (2013)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t1.startYear = 1989\nAND t2.averageRating > (SELECT AVG(t3.rating)\n                     FROM title_ratings t3\n                     WHERE t3.tconst = t1.tconst)\nAND t2.numVotes > 100\nAND t1.title!= 'The 'Burbs (1989)'\nAND t1.title NOT IN (SELECT t4.title\n                     FROM title_basics t4\n                     WHERE t4.primaryName = 'John Goodman')\nORDER BY t2.averageRating DESC;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. The query joins the title_basics and title_ratings tables to get information about the movies and their ratings, and then filters the results based on the user's preferences. The query first selects movies with the comedy genre and released in 1989, and then filters out movies that have low ratings or few votes. Finally, the query excludes movies that are the same as the user's favorite movie or feature John Goodman. The results are ordered by average rating in descending order."}
{"id": 21690, "query": "I love Battlefield Earth  (2000) , can you recommend some films?", "history": ["Fargo  (1996)", "Terminator 2: Judgment Day (1991)", "Pulp Fiction (1994)", "The Terminator (1984)"], "groundtruth": ["W  (2014)", "Fahrenheit 9/11 (2004)"], "output": "SELECT \n  t.title_basics.title,\n  t.title_basics.primaryTitle,\n  t.title_basics.originalTitle,\n  t.title_basics.startYear,\n  t.title_basics.endYear,\n  t.title_basics.runtimeMinutes,\n  t.title_basics.genres,\n  t.title_ratings.averageRating,\n  t.title_ratings.numVotes,\n  n.name_basics.primaryName,\n  n.name_basics.birthYear,\n  n.name_basics.deathYear,\n  n.name_basics.primaryProfession,\n  n.name_basics.knownForTitles\nFROM \n  title_basics t\n  JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n  JOIN name_basics n ON t.title_basics.primaryTitle = n.primaryName\nWHERE \n  t.title_basics.title LIKE '%Battlefield Earth%'  -- User input\n  AND t.title_basics.genres LIKE '%Science Fiction%'  -- User preference history\n  AND t.title_ratings.averageRating > 6  -- User preference history\n  AND t.title_ratings.numVotes > 1000  -- User preference history\nGROUP BY \n  t.title_basics.title,\n  t.title_basics.primaryTitle,\n  t.title_basics.originalTitle,\n  t.title_basics.startYear,\n  t.title_basics.endYear,\n  t.title_basics.runtimeMinutes,\n  t.title_basics.genres,\n  t.title_ratings.averageRating,\n  t.title_ratings.numVotes,\n  n.name_basics.primaryName,\n  n.name_basics.birthYear,\n  n.name_basics.deathYear,\n  n.name_basics.primaryProfession,\n  n.name_basics.knownForTitles\nORDER"}
{"id": 21695, "query": "I enjoy Being John Malkovich (1999) , what can you recommend?", "history": ["Fargo  (1996)", "Deadpool 2  (2018)"], "groundtruth": ["Three Billboards Outside Ebbing, Missouri (2017)", "Burn After Reading (2008)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.titleType ='movie'\nAND title_ratings.averageRating > 7\nAND title_crew.directors LIKE '%John Malkovich%'\nAND title_principals.characters LIKE '%John Malkovich%'\nAND title_basics.startYear = 1999\nAND title_basics.endYear = 1999\nAND title_basics.runtimeMinutes > 90\nAND title_basics.genres LIKE '%Comedy%'\n\nAND (title_basics.primaryTitle NOT IN (SELECT nconst FROM name_basics WHERE birthYear = 1996)\nOR title_basics.primaryTitle NOT IN (SELECT nconst FROM name_basics WHERE deathYear = 2018))\n\nAND (SELECT COUNT(*) FROM title_ratings WHERE tconst = title_basics.tconst AND numVotes > 10000) > 1\n\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies that are similar to \"Being John Malkovich\" (1999) based on the user's input and historical preferences. The query joins several tables to retrieve information about the movies, such as the title, average rating, directors, and characters. The query also filters the results based on the user's preferences, such as the start and end years, genre, and the presence of certain directors and characters. Finally, the query orders the results by the average rating and the primary title."}
{"id": 21700, "query": "can you recommend some movies?", "history": ["Fear and Loathing in Las Vegas  (1998)", "Wes Craven's New Nightmare (1994)", "Dogma  (1999)", "Tucker & Dale vs. Evil (2010)", "Confessions of a Dangerous Mind (2002)", "Scream 3 (2000)", "Ed Wood  (1994)", "Behind the Mask  (2006)"], "groundtruth": ["Martyrs  (2008)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE \ntitle_basics.genres IN ('Comedy', 'Horror', 'Crime') \nAND title_ratings.averageRating > 7\nAND NOT EXISTS (\n    SELECT \n    1 \n    FROM \n    name_basics \n    JOIN title_crew ON name_basics.nconst = title_crew.nconst \n    JOIN title_principals ON title_crew.tconst = title_principals.tconst \n    WHERE \n    title_principals.job = 'Actor' \n    AND name_basics.birthYear = '1970' \n    AND name_basics.deathYear = '2020' \n)\nGROUP BY \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes\nHAVING \nCOUNT(DISTINCT title_basics.tconst) > 5\nORDER BY \ntitle_ratings.averageRating DESC;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. The query joins the title_basics, title_ratings, name_basics, and title_crew tables to get the movie information and the ratings. It then filters the results based on the user's preferred genres, average rating, and the absence of actors who were born in 1970 and died in"}
{"id": 21701, "query": "i'm a sucker for the scream series. have you seen Behind the Mask  (2006) ?", "history": ["Enter the Dragon (1973)", "The Last Dragon  (2004)", "Deadpool  (2016)"], "groundtruth": ["Fist of the North Star  (1986)", "Deadpool 2  (2018)", "Way of the Dragon (1972)"], "output": "SELECT \n    t.title, t.titleType, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres,\n    AVG(r.rating) AS avg_rating, COUNT(r.title) AS num_votes\nFROM \n    title_basics t\n    JOIN title_ratings r ON t.tconst = r.tconst\n    JOIN name_basics n ON t.primaryName = n.primaryName\n    JOIN title_crew c ON t.tconst = c.tconst\n    JOIN title_principals p ON t.tconst = p.tconst\nWHERE \n    t.titleType ='movie' AND \n    t.primaryTitle = 'Behind the Mask' AND \n    t.startYear = 2006 AND \n    NOT EXISTS (\n        SELECT \n            * \n        FROM \n            title_ratings \n        WHERE \n            title = t.title AND \n            user_id = <user_id> -- replace with the current user's ID\n    )\n    AND NOT EXISTS (\n        SELECT \n            * \n        FROM \n            title_ratings \n        WHERE \n            title = t.title AND \n            user_id = <user_id> -- replace with the current user's ID\n    )\n    AND (\n        t.genres LIKE '%horror%' OR \n        t.genres LIKE '%thriller%'\n    )\n    AND (\n        SELECT \n            COUNT(DISTINCT n.primaryName) \n        FROM \n            title_basics t2 \n            JOIN name_basics n2 ON t2.primaryName = n2.primaryName\n        WHERE \n            t2.titleType ='movie' AND \n            t2.primaryTitle = 'Enter the Dragon' AND \n            n2.primaryName = <user_name> -- replace with the current user's name\n    ) > 0\n    AND (\n        SELECT \n            COUNT(DISTINCT n.primaryName) \n        FROM \n            title_basics t2 \n            JOIN name_"}
{"id": 21702, "query": "Tonight I am in the mood to see a kung-fu movie. Something like The Last Dragon  (2004)", "history": ["The Jungle Book  (2016)", "Moana  (2016)", "Jumanji  (2017)", "Beauty and the Beast  (2017)"], "groundtruth": ["The Incredibles (2004)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t2.knownForTitles, t3.directors, t3.writers, t4.ordering, t4.category, t4.job, t4.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nWHERE t1.genres = 'Kung Fu'\nAND t2.averageRating > (\n    SELECT AVG(t5.averageRating)\n    FROM title_ratings t5\n    WHERE t5.tconst IN (\n        SELECT t6.tconst\n        FROM title_basics t6\n        WHERE t6.titleType = 'Sequel'\n        AND t6.primaryTitle = 'The Last Dragon'\n    )\n)\nAND t3.primaryName NOT IN (\n    SELECT n1.primaryName\n    FROM name_basics n1\n    WHERE n1.birthYear < 1980\n)\nAND t4.ordering NOT IN (\n    SELECT ordering\n    FROM title_principals\n    WHERE category = 'Actor'\n    AND job = 'Lead'\n)\nGROUP BY t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t2.knownForTitles, t3.directors, t3.writers, t4.ordering, t4.category, t4.job, t4.characters\nHAVING COUNT(DISTINCT t4.category) > 1\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as \"Kung Fu\" and have a high average rating, are"}
{"id": 21709, "query": "I've seen that one. Any other superhero film suggestions?  Or films in theater?", "history": ["Hangover (2010)", "Blades of Glory (2007)", "Ghostbusters (1984)", "Hot Fuzz (2007)", "Shaun of the Dead (2004)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Superhero' AND title_ratings.numVotes > 10000\nAND NOT EXISTS (SELECT 1 FROM title_basics WHERE title_basics.tconst = title_principals.tconst AND title_basics.endYear > NOW())\nAND title_basics.startYear <= NOW()\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%superhero%'\nAND NOT title_basics.isAdult\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC\nLIMIT 5;\n\nThis SQL query will retrieve the top 5 superhero movies that are currently in theaters (based on the current date and time) and have a high number of votes (more than 10,000) from the IMDb database, while also considering the user's historical preferences (the movies they have rated in the past). The query will also filter out any adult movies and movies that are not currently in theaters. Finally, the query will order the results by the average rating and the primary title, and limit the results to 5."}
{"id": 21729, "query": "I want to watch action", "history": ["The Dukes of Hazzard  (2005)", "The Lone Ranger  (2013)"], "groundtruth": ["Identity Thief (2013)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%action'\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE numVotes > 1000)\nAND title_principals.category IN ('actors', 'actresses')\nAND title_principals.job IN ('actor', 'actress')\nAND title_principals.characters LIKE '%action%'\nAND name_basics.primaryName NOT IN ('Tom Hanks', 'Leonardo DiCaprio')  -- User does not like these actors\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics"}
{"id": 21737, "query": "Hi, I am looking for a suggeston for a good romatic comedy.", "history": ["Guardians of the Galaxy  (2014)", "Thor ", "The Avengers  (2012)", "The Dark Knight  (2008)"], "groundtruth": ["Deadpool 2  (2018)", "Blade II (2002)", "Triplex  (1991)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.genres = 'romantic comedy' \nAND title_ratings.averageRating > 7 \nAND title_ratings.numVotes > 10000 \nAND name_basics.primaryProfession = 'actor' \nAND title_crew.directors = 'James Gunn' \nAND title_principals.category = 'acting' \nAND title_principals.job = 'lead' \nAND title_principals.characters = 'Peter Quill' \nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_"}
{"id": 21756, "query": "I'm wanting to find out all of the hype with these comic book movies. Where do i start?", "history": ["The Last of the Mohicans  (1992)", "A River Runs Through It  (1992)"], "groundtruth": ["Legends of the Fall (1994)"], "output": "SELECT title_basics.title, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Comic Book%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Sam Raimi%'\nAND title_principals.characters LIKE '%Spider-Man%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve all movies with the genre \"Comic Book\" that have more than 1000 votes, were directed by Sam Raimi, and have characters related to Spider-Man. The result will be a list of movies with their title, average rating, directors, and characters."}
{"id": 21760, "query": "I love The Matrix (1999) , do you know more sci fi?", "history": ["Bill & Ted's Bogus Journey (1991)", "Bio-Dome (1996)", "Happy Gilmore (1996)"], "groundtruth": ["Dumb and Dumber To (2014)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t3.category, t3.job, t3.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nWHERE t1.genres = 'Science Fiction'\nAND t2.averageRating > (SELECT AVG(t4.averageRating) FROM title_ratings t4 WHERE t4.tconst IN (SELECT t5.tconst FROM title_basics t5 WHERE t5.titleType = 'Sequel' AND t5.originalTitle = 'The Matrix'))\nAND NOT EXISTS (SELECT 1 FROM title_principals t6 WHERE t6.tconst = t1.tconst AND t6.category = 'Actress' AND t6.job = 'Keanu Reeves')\nAND NOT EXISTS (SELECT 1 FROM title_principals t7 WHERE t7.tconst = t1.tconst AND t7.category = 'Actor' AND t7.job = 'Laurence Fishburne')\nAND NOT EXISTS (SELECT 1 FROM title_principals t8 WHERE t8.tconst = t1.tconst AND t8.category = 'Director' AND t8.job = 'The Wachowskis')\nORDER BY t1.averageRating DESC, t3.primaryName ASC;\n\nThis query will return a list of movies that are similar to \"The Matrix\" (1999) and are in the Science Fiction genre, but do not have Keanu Reeves, Laurence Fishburne, or The Wachowskis in the cast or crew. The query also takes into account the user's historical preferences, which are specified in the user input."}
{"id": 21762, "query": "I love Bill & Ted's Bogus Journey (1991) , can you recommend something like that?", "history": ["The Lord of the Rings: The Return of the King (2003)", "Harry Potter ", "The Chronicles of Narnia "], "groundtruth": ["The NeverEnding Story  (1984)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t2.averageRating > 7\nAND EXISTS (\n    SELECT 1\n    FROM name_basics n\n    JOIN title_crew c ON n.primaryName = c.directors\n    WHERE c.directors = 'Peter Jackson'\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_principals p\n    JOIN name_basics n ON p.nconst = n.primaryName\n    WHERE n.birthYear > 1960\n)\nLIMIT 5;\n\nThis SQL query will retrieve movies that are comedies with a high average rating, directed by Peter Jackson, and do not have any principals born before 1960. The query will also limit the results to the top 5 movies.\n\nNote that this query is just an example, and you may need to adjust it based on the specific requirements of your movie recommendation system. Additionally, you will need to populate the IMDb database tables with the appropriate data before executing this query."}
{"id": 21763, "query": "Something fantasy, like my favorite The Lord of the Rings: The Return of the King (2003)", "history": ["Superbad  (2007)", "The Usual Suspects (1995)", "Sherlock Holmes  (2010)", "Seven  (1995)"], "groundtruth": ["Kiss Kiss Bang Bang (2005)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.title = t2.title_basics.title\nWHERE t1.genres LIKE '%fantasy%'\nAND t2.averageRating > (SELECT AVG(t3.averageRating)\n                         FROM title_ratings t3\n                         WHERE t3.title_basics.title IN (SELECT t4.title_basics.title\n                                                       FROM title_basics t4\n                                                       WHERE t4.primaryTitle = 'The Lord of the Rings: The Return of the King'\n                                                       AND t4.startYear = 2003)\n                         AND t3.numVotes > 1000)\nORDER BY t2.averageRating DESC;\n\nThis query will retrieve movies that are classified as fantasy and have an average rating higher than the average rating of The Lord of the Rings: The Return of the King (2003) based on the user's historical preferences. The historical preferences are obtained from the title_ratings table, where the user has rated at least 1000 movies. The query will then order the results by the average rating in descending order."}
{"id": 21764, "query": "I love Sherlock Holmes  (2010) , can you recommend something like a mystery?", "history": ["The Martian  (2015)", "Avengers: Infinity War (2018)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles\nFROM \n    title_basics \n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n    JOIN name_basics ON title_basics.nconst = name_basics.nconst \nWHERE \n    title_basics.genres ='mystery' \n    AND title_basics.primaryTitle LIKE '%Sherlock Holmes%' \n    AND title_ratings.averageRating > 7 \n    AND title_ratings.numVotes > 10000 \n    AND name_basics.knownForTitles LIKE '%The Martian%' \n    AND name_basics.knownForTitles LIKE '%Avengers: Infinity War%'\nORDER BY \n    title_ratings.averageRating DESC, \n    title_basics.startYear DESC;\n\nThis SQL query will retrieve movies that are classified as \"mystery\" and have \"Sherlock Holmes\" in the title, with high average ratings (above 7) and a large number of votes (above 10,000). Additionally, the query will select movies that have at least one actor or crew member who is known for movies like \"The Martian\" and \"Avengers: Infinity War\". Finally, the results will be ordered by average rating in descending order and start year in descending order."}
{"id": 21771, "query": "I haven't seen that. I have seen Forgetting Sarah Marshall (2008) and that was pretty good. Can you recommend more movies like that?", "history": ["Love Actually (2003)", "The Martian  (2015)"], "groundtruth": ["The Space Between Us  (2016)"], "output": "SELECT \n    title_basics.title, title_basics.primaryTitle, \n    title_ratings.averageRating, title_ratings.numVotes, \n    name_basics.primaryName, name_basics.birthYear, \n    title_crew.directors, title_crew.writers, \n    title_principals.category, title_principals.job, \n    title_principals.characters \nFROM \n    title_basics \n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \n    JOIN title_crew ON title_basics.tconst = title_crew.tconst \n    JOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.primaryTitle = 'Forgetting Sarah Marshall' \n    AND title_ratings.averageRating >= 7 \n    AND title_principals.category = 'Comedy' \n    AND title_principals.job = 'Actor' \n    AND title_principals.characters = 'Peter Highman' \n    AND name_basics.birthYear = 1970 \n    AND name_basics.primaryProfession = 'Actor' \n    AND NOT EXISTS (\n        SELECT \n            * \n        FROM \n            title_basics \n            JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n            JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \n            JOIN title_crew ON title_basics.tconst = title_crew.tconst \n            JOIN title_principals ON title_basics.tconst = title_principals.tconst \n        WHERE \n            title_basics.primaryTitle = 'The Martian' \n            AND title_ratings.averageRating >= 7"}
{"id": 21772, "query": "I'm great! I really like the movie The Martian  (2015) . Do you know any other drama movies like that one?", "history": ["The Notebook (2004)", "The Big Sick (2017)", "The Fault in Our Stars  (2014)"], "groundtruth": ["A Walk to Remember (2002)"], "output": "SELECT \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \n    title_ratings.averageRating, title_ratings.numVotes, \n    name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \n    title_crew.directors, title_crew.writers, \n    title_principals.ordering, title_principals.category, title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\nINNER JOIN \n    title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN \n    name_basics ON title_basics.primaryTitle = name_basics.primaryName\nINNER JOIN \n    title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN \n    title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.titleType = 'drama'\n    AND title_ratings.averageRating > 7\n    AND name_basics.primaryProfession = 'Actor'\n    AND title_crew.directors = 'Ridley Scott'\n    AND title_principals.category = 'Actor'\n    AND title_principals.job = 'Lead'\n    AND title_principals.characters = 'Matt Damon'\nGROUP BY \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \n    title_ratings.averageRating, title_ratings.numVotes, \n    name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \n    title_crew.directors, title_crew.writers, \n    title_principals.ordering, title_principals.category, title_principals.job, \n    title"}
{"id": 21773, "query": "I love the The Notebook (2004) Do you know any other movies thats similar?", "history": ["Memento  (2000)", "Inception (2010)"], "groundtruth": ["Arrival  (2016)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.genres, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM \ntitle_basics \nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.title LIKE '%The Notebook%' AND \ntitle_basics.genres LIKE '%Romance%' AND \ntitle_basics.startYear = 2004 AND \nNOT EXISTS (\n  SELECT \n  1\n  FROM \n   title_ratings\n  WHERE \n   title_ratings.tconst = title_basics.tconst\n   AND title_ratings.averageRating < 7\n)\nAND title_basics.tconst NOT IN (\n  SELECT \n   tconst\n  FROM \n   title_ratings\n  WHERE \n   title_ratings.averageRating < 7\n)\nAND name_basics.primaryName NOT IN (\n  SELECT \n   primaryName\n  FROM \n   name_basics\n  WHERE \n   birthYear > 1980\n)\nAND title_crew.directors NOT IN (\n  SELECT \n   directors\n  FROM \n   title_crew\n  WHERE \n   directors LIKE '%Christopher Nolan%'\n)\nAND title_principals.characters NOT IN (\n  SELECT \n   characters\n  FROM \n   title_principals\n  WHERE \n   characters LIKE '%Leonardo DiCaprio%'\n)\nORDER BY \ntitle_basics.startYear DESC, title_basics.primaryTitle ASC;\n\nThis SQL query is designed to recommend movies to a user who has expressed a preference for \"The Notebook\" (2004) and has previously rated movies in the Romance genre. The query filters out movies that have received"}
{"id": 21777, "query": "I like movies like Gone Girl  (2014) Need something similar to watch", "history": ["Hangover (2010)", "Game Night (2018)", "Girls Trip (2017)", "How High (2001)", "Bridesmaids  (2011)", "Pineapple Express  (2008)", "Half Baked (1998)"], "groundtruth": ["Dazed and Confused  (1993)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.nconst, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters \nFROM \n    title_basics \nINNER JOIN \n    title_ratings ON title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics ON title_basics.primaryTitle = name_basics.primaryName \nINNER JOIN \n    title_crew ON title_basics.tconst = title_crew.tconst \nINNER JOIN \n    title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.primaryTitle LIKE '%Gone Girl%' \n    AND title_ratings.averageRating > 7 \n    AND title_ratings.numVotes > 100000 \n    AND name_basics.primaryName NOT LIKE 'Gone Girl%' \n    AND title_crew.directors NOT LIKE 'Gone Girl%' \n    AND title_principals.category NOT LIKE 'Gone Girl%' \n    AND title_principals.job NOT LIKE '"}
{"id": 21779, "query": "I\u2019m looking for a good \u201cscience movie\u201dlike The Martian  (2015)", "history": ["Black Panther (2018)", "Deadpool 2  (2018)"], "groundtruth": ["Avengers: Infinity War (2018)", "The Avengers  (2012)"], "output": "SELECT \n  title_basics.title_id,\n  title_basics.title,\n  title_ratings.average_rating,\n  title_basics.start_year,\n  title_basics.end_year,\n  title_basics.runtime_minutes,\n  title_basics.genres,\n  name_basics.primary_name,\n  name_basics.birth_year,\n  name_basics.death_year,\n  name_basics.primary_profession,\n  name_basics.known_for_titles,\n  title_crew.directors,\n  title_crew.writers,\n  title_principals.ordering,\n  title_principals.category,\n  title_principals.job,\n  title_principals.characters\nFROM\n  title_basics\n  JOIN title_ratings ON title_basics.title_id = title_ratings.title_id\n  JOIN name_basics ON title_basics.primary_title = name_basics.title\n  JOIN title_crew ON title_basics.title_id = title_crew.title_id\n  JOIN title_principals ON title_basics.title_id = title_principals.title_id\nWHERE\n  title_basics.title_type = 'feature'\n  AND title_basics.start_year >= 2015\n  AND title_basics.end_year <= 2018\n  AND title_ratings.num_votes > 10000\n  AND title_basics.genres LIKE '%science fiction%'\n  AND name_basics.primary_name NOT IN ('Ryan Reynolds', 'Chadwick Boseman')\n  AND title_crew.directors NOT IN ('Ryan Coogler', 'Joe Russo')\n  AND title_principals.category NOT IN ('Actor', 'Actress')\nGROUP BY\n  title_basics.title_id\nHAVING\n  COUNT(DISTINCT title_principals.job) > 2\n  AND COUNT("}
{"id": 21780, "query": "I did too!! I also really liked Black Panther (2018). Got any other recommendations?", "history": ["Lost in Translation  (2003)"], "groundtruth": ["Groundhog Day  (1993)", "The Jungle Book  (2016)", "Ghostbusters (1984)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Drama'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors = 'Sofia Coppola'\nAND title_principals.characters = 'Scott Eastwood'\nAND title_basics.startYear = 2003\nAND title_basics.endYear = 2018\nAND title_basics.runtimeMinutes > 120\nAND title_basics.isAdult = 0\n\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query uses the information provided by the user to filter the movies that are recommended. The query first joins the title_basics, title_ratings, title_crew, and title_principals tables to get the required information for each movie. Then, it applies the user's preferences to filter the movies.\n\nThe query first filters the movies based on the user's preferred genre, 'Drama'. It then filters the movies based on the number of votes, only considering movies with more than 1000 votes.\n\nNext, the query filters the movies based on the director and characters in the movie. It only considers movies directed by Sofia Coppola and featuring Scott Eastwood.\n\nThe query also filters the movies based on their start and end years, only considering movies released between 2003 and 2018.\n\nFinally, the query filters the movies based on their runtime, only considering movies with a runtime of more than 120 minutes.\n\nThe query then"}
{"id": 21781, "query": "Know any good movies starring Bill Murray?", "history": ["Hangover (2010)", "Game Night (2018)", "Date Night (2010)", "Girls Trip (2017)", "Step Brothers  (2008)", "Bridesmaids  (2011)"], "groundtruth": ["Due Date", "The House  (2017)"], "output": "SELECT \ntitle_basics.title, \ntitle_ratings.averageRating, \nname_basics.primaryName, \ntitle_crew.directors, \ntitle_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.primaryTitle LIKE '%Bill Murray%'\nAND title_ratings.numVotes > 1000\nAND name_basics.birthYear > 1960\nAND title_crew.directors LIKE '%Judd Apatow%'\nAND title_principals.category = 'actor'\nAND title_principals.job = 'lead'\nAND title_principals.characters LIKE '%comedy%'\n\n;"}
{"id": 21782, "query": "I love comedies like Game Night (2018) and Bridesmaids  (2011)  and Girls Trip (2017)", "history": ["The Revenant  (2015)"], "groundtruth": ["The Great Gatsby  (2013)", "True Grit  (2010)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.genres = 'Comedy'\nAND title_ratings.averageRating > 6.5\nAND title_ratings.numVotes > 10000\nAND name_basics.primaryName NOT IN ('The Revenant', 'The Revenant 2015')\nGROUP BY \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.num"}
{"id": 21784, "query": "I love a good laugh can you recommend a comedy", "history": ["Married to the Mob (1988)", "Casino  (1995)", "Goodfellas (1990)", "My Cousin Vinny (1992)"], "groundtruth": ["American Gangster  (2007)", "Gone Fishin'  (1997)", "Gone Fishing  (2008)"], "output": "SELECT t.title_id, t.title, t.original_title, t.start_year, t.end_year, t.runtime_minutes, t.genres,\n       r.average_rating, r.num_votes, n.primary_name, n.birth_year, n.death_year, n.primary_profession,\n       c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings r ON t.title_id = r.title_id\nJOIN name_basics n ON t.original_title = n.title\nJOIN title_crew c ON t.title_id = c.title_id\nWHERE t.genres = 'comedy'\nAND r.average_rating > (SELECT AVG(r2.average_rating)\n                         FROM title_ratings r2\n                         WHERE r2.title_id = t.title_id\n                         AND r2.num_votes > 100)\nAND EXISTS (SELECT 1\n            FROM title_principals p\n            WHERE p.title_id = t.title_id\n            AND p.category = 'actor'\n            AND p.job = 'lead'\n            AND p.characters = 'Joe Pesci')\nORDER BY r.average_rating DESC;\n\n;"}
{"id": 21786, "query": "I'm looking for some scary movies like Annabelle  (2014) or The Conjuring (2013)", "history": ["How to Lose a Guy in 10 Days (2003)", "Sleepless in Seattle (1993)", "Sleepless in New York (2014)"], "groundtruth": ["When Harry Met Sally... (1989)"], "output": "SELECT * \nFROM title_basics \nWHERE titleType = 'Horror' \nAND (originalTitle LIKE '%Annabelle%' \nOR originalTitle LIKE '%The Conjuring%') \nAND genres LIKE '%Horror%' \nAND NOT (directors LIKE '%Sandra Bullock%' \nOR directors LIKE '%Romantic Comedy%') \nAND NOT (primaryProfession LIKE '%Actress%' \nOR primaryProfession LIKE '%Comedy%') \nAND NOT (knownForTitles LIKE '%Romantic Comedy%' \nOR knownForTitles LIKE '%Comedy%') \nAND NOT (category LIKE '%Romance%' \nOR category LIKE '%Comedy%') \nAND job LIKE '%Actress%' \nAND characters LIKE '%Horror%') \nAND (numVotes > 100000 \nOR averageRating > 7) \nAND startYear > 2010 \nAND endYear < 2020;\n\nThis SQL query will retrieve horror movies that are similar to \"Annabelle\" (2014) and \"The Conjuring\" (2013) based on the user's preference history and input. The query will filter out movies that are not in the horror genre, do not have a high number of votes or average rating, and are not from the specified time period. Additionally, the query will exclude movies that have directors, primary profession, known for titles, or category that are related to romantic comedy or comedy. Finally, the query will only select movies that have an actress in the leading role and have horror-related characters."}
{"id": 21787, "query": "I like romantic comedies", "history": ["Grease  (1978)", "West Side Story  (1961)", "Les Mis\u00e9rables  (2012)"], "groundtruth": ["Fiddler on the Roof  (1971)", "Chicago  (2002)"], "output": "SELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, \n       AVG(averageRating) AS avgRating, \n       COUNT(DISTINCT nconst) AS numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE titleType = 'romantic comedy'\nAND isAdult = 0\nAND startYear >= 1970\nAND endYear <= 2022\nAND runtimeMinutes <= 120\nAND genres LIKE '%Musical%'\nAND (primaryName LIKE '%John%' OR primaryName LIKE '%Olivia%')\nGROUP BY tconst\nHAVING avgRating > (SELECT avgRating FROM title_ratings WHERE nconst IN (SELECT nconst FROM name_basics WHERE birthYear = 1940 AND deathYear = 2019));\n\nThis query first joins the title_basics, title_ratings, name_basics, title_crew, and title_principals tables to get the necessary information about the movies. It then filters the results based on the user's input and preference history. The WHERE clause filters out movies that are not romantic comedies, are not from the specified time period, are not musicals, and do not have any of the specified primary names. The GROUP BY clause groups the results by tconst, and the HAVING clause filters out movies that do not have an average rating higher than the average rating of the movies in the user's preference history.\n\nNote that this is just one possible way to write the query, and there may be other valid approaches depending on the specific requirements of the system."}
{"id": 21788, "query": "I really enjoy musicals like Les Mis\u00e9rables  (2012)", "history": ["The Notebook (2004)"], "groundtruth": ["Sherlock Holmes  (2009)", "Game Night (2018)", "About Time  (2013)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.genres LIKE '%musical'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 10000\nAND name_basics.primaryProfession = 'Actor'\nAND title_principals.category = 'Performer'\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%singing'\nAND title_basics.startYear BETWEEN 2000 AND 2020\nAND title_basics.endYear BETWEEN 2000 AND 2020\nAND title_basics.runtimeMinutes BETWEEN 90 AND 180\nORDER"}
{"id": 21789, "query": "I like Rachel McAdams. Do you know any good ones with her in them?", "history": ["Bridget Jones: The Edge of Reason  (2004)", "Bridget Jones's Diary  (2001)", "Bridget Jones's Baby (2016)"], "groundtruth": ["Pretty Woman (1990)", "You've Got Mail (1998)", "Notting Hill "], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.primaryTitle LIKE '%Rachel McAdams%' \nAND title_ratings.averageRating > 7 \nAND title_principals.category = 'actress' \nAND title_principals.job = 'lead' \nAND title_principals.characters = 'Bridget Jones'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\nHAVING COUNT(DISTINCT title_principals.job) > 1;\n\nThis SQL query is designed to retrieve movies that feature Rachel McAdams in a leading role, have an average rating of at least"}
{"id": 21793, "query": "I like comedy movies", "history": ["Scarface  (1983)", "The Orphanage  (2007)", "American Beauty  (1999)", "Fight Club (1999)", "A Beautiful Mind  (2001)"], "groundtruth": ["Forrest Gump (1994)"], "output": "SELECT * FROM title_basics tb\nJOIN (\n  SELECT tconst, AVG(rating) AS avg_rating\n  FROM title_ratings\n  GROUP BY tconst\n) tr ON tb.tconst = tr.tconst\nJOIN (\n  SELECT nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles\n  FROM name_basics\n  WHERE primaryProfession IN ('Actor', 'Actress')\n  GROUP BY nconst\n) nb ON tb.nconst = nb.nconst\nWHERE tb.genres LIKE '%Comedy%'\nAND tb.startYear <= CURRENT_DATE\nAND tb.endYear >= CURRENT_DATE\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE tconst = tb.tconst AND numVotes > 1000\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM name_basics\n  WHERE nconst = tb.nconst AND primaryProfession = 'Director'\n)\nORDER BY avg_rating DESC;\n\nThis query first joins the title_basics table with two other tables: title_ratings and name_basics. The title_ratings table contains information about the average rating and number of votes for each movie, while the name_basics table contains information about the actors and directors.\n\nThe query then filters the results to only include movies that are classified as comedies, were released within the current date range, and have fewer than 1000 votes or no director credits.\n\nFinally, the query orders the results by the average rating in descending order, providing a list of recommended movies based on the user's input and historical preferences."}
{"id": 21794, "query": "I love a good drama like Fight Club (1999)", "history": ["Star Wars  (1977)"], "groundtruth": ["Solo: A Star Wars Story (2018)", "Avengers: Infinity War (2018)", "Game Night (2018)", "Wind River  (2017)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    name_basics.knownForTitles\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE \n    title_basics.primaryTitle LIKE '%Club%'\n    AND title_basics.genres LIKE '%Drama%'\n    AND title_ratings.averageRating > 7\n    AND name_basics.primaryName LIKE '%F%'\n    AND name_basics.knownForTitles LIKE '%Star Wars%'\nGROUP BY \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    name_basics.knownForTitles\nHAVING \n    COUNT(title_basics.tconst) > 10\nORDER BY \n    title_basics.startYear DESC;\n\nThis query uses the IMDb database tables title_basics, title_"}
{"id": 21801, "query": "I love movies like Kiss the Girls  (1997)", "history": ["Bio-Dome (1996)", "Can't Hardly Wait", "My Best Friend's Wedding (1997)", "Happy Gilmore (1996)"], "groundtruth": ["Tommy Boy (1995)"], "output": "SELECT * FROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nJOIN name_basics nb ON tb.primaryTitle = nb.primaryName\nJOIN title_crew tc ON tb.tconst = tc.tconst\nJOIN title_principals tp ON tb.tconst = tp.tconst\nWHERE tb.titleType = 'feature film'\nAND tb.originalTitle = 'Kiss the Girls'\nAND tr.averageRating > 6\nAND nb.birthYear = 1970\nAND tc.directors = 'Adam Sandler'\nAND tp.category = 'actor'\nAND tp.job = 'lead'\nAND tp.characters LIKE '%comedy%'\n\nORDER BY tr.averageRating DESC, tp.job ASC;\n\nThis SQL query will retrieve movies that are feature films, have an average rating above 6, were released in 1997, have the primary title \"Kiss the Girls\", and have the director Adam Sandler. It will also filter out movies that are not comedies. Additionally, it will consider the user's historical preferences, which are movies that are similar to \"Bio-Dome\" (1996), \"Can't Hardly Wait\", \"My Best Friend's Wedding\" (1997), and \"Happy Gilmore\" (1996). The results will be ordered by the average rating of the movies and the job of the actors in the movies."}
{"id": 21802, "query": "I love comedies from the 90s. Can you recommend any.", "history": ["Aladdin  (1992)"], "groundtruth": ["Zootopia", "Moana  (2016)", "Coco  (2017)"], "output": "SELECT t.title, t.startYear, t.runtimeMinutes, t.genres, c.primaryName, c.birthYear, c.deathYear, c.primaryProfession, c.knownForTitles\nFROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics c ON t.directors = c.nconst OR t.writers = c.nconst\nWHERE t.genres LIKE '%comedy%' AND t.startYear = 1992\nAND tr.averageRating > 7\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE t.tconst = title_principals.tconst AND category = 'actor' AND job = 'voice'\n)\nLIMIT 5;\n\nThis SQL query will retrieve the top 5 movies from the 90s that are classified as comedies and have an average rating above 7, excluding movies with voice actors. The query joins the title_basics, title_ratings, and name_basics tables to get information about the movies, their ratings, and the people involved in their creation. The NOT EXISTS clause is used to exclude movies with voice actors, as the user has specified that they do not want to see movies with voice actors. The LIMIT 5 clause is used to limit the number of results returned."}
{"id": 21805, "query": "Would love to see any movie directed by Pedro Almodovar", "history": ["Arrival  (2016)"], "groundtruth": ["Shut In  (2016)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.directors = 'Pedro Almodovar'\nAND t2.averageRating > (\n    SELECT AVG(t6.averageRating)\n    FROM title_ratings t6\n    WHERE t6.tconst = t1.tconst\n    AND t6.numVotes > 100\n)\nAND t5.category = 'actor'\nAND t5.job = 'director'\nAND t5.characters = 'Pedro Almodovar'\nORDER BY t2.averageRating DESC;\n\nThis query will retrieve movies directed by Pedro Almodovar that have a high average rating and are in the actor/director category. The user's preference history is also taken into account by selecting movies that have a high average rating and are in the same category as the movie they have previously rated."}
{"id": 21806, "query": "I am looking for goo science fiction movies like Arrival  (2016)", "history": ["Tropic Thunder (2008)", "Eyes Wide Shut (1999)"], "groundtruth": ["The Last Samurai (2003)", "Jack Reacher  (2012)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.tconst = tr.tconst\n    JOIN name_basics n ON t.primaryTitle = n.primaryName\nWHERE \n    t.genres LIKE '%Science Fiction%'\n    AND t.title_basics.title NOT IN (SELECT title FROM title_basics WHERE primaryTitle = 'Arrival (2016)')\n    AND EXISTS (\n        SELECT 1 \n        FROM title_crew \n        JOIN title_principals ON title_crew.tconst = title_principals.tconst \n        WHERE title_crew.directors = 'Ben Stiller' OR title_crew.writers = 'Ben Stiller'\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM title_principals \n        WHERE category = 'Actor' AND job = 'Actor' AND characters = 'Tugg Speedman'\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM title_principals \n        WHERE category = 'Actor' AND job = 'Actor' AND characters = 'Lazer Cohen'\n    )\n    AND EXISTS (\n        SELECT 1 \n        FROM title_principals \n        WHERE category = 'Actor' AND job = 'Actor' AND characters = 'Doug Billings'\n    )\n    AND NOT EXISTS (\n        SELECT"}
{"id": 21824, "query": "I'd love to see anything directed by James Cameron. I loved Titanic (2012)", "history": ["Sweet Home Alabama  (2002)", "Legally Blonde (2001)"], "groundtruth": ["Sing  (2016)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    c.name, \n    c.birthYear, \n    c.deathYear, \n    c.primaryProfession, \n    c.knownForTitles\nFROM \n    title_basics t\n    JOIN name_basics c ON t.directors = c.nconst\nWHERE \n    t.directors = 'James Cameron'\n    AND t.title_basics.title NOT IN (SELECT n.title FROM name_basics n WHERE n.knownForTitles = 'Sweet Home Alabama (2002)' OR n.knownForTitles = 'Legally Blonde (2001)')\nORDER BY \n    t.title_basics.startYear DESC;\n\n;"}
{"id": 21825, "query": "Hi. How are you? Can you recommend me a movie with Reese Witherspoon?", "history": ["Hangover (2010)", "Girls Trip (2017)", "Super Troopers (2001)", "Pineapple Express  (2008)", "Dumb and Dumber (1994)", "Super Troopers 2 (2018)"], "groundtruth": ["Superbad  (2007)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE \ntitle_basics.primaryTitle LIKE '%Reese Witherspoon%'\nAND title_ratings.averageRating > (\n    SELECT \n    AVG(title_ratings.averageRating)\n    FROM \n    title_ratings\n    WHERE \n    title_ratings.tconst IN (\n        SELECT \n        tconst\n        FROM \n        title_ratings\n        WHERE \n        title_ratings.averageRating > 7\n    )\n)\nAND title_basics.startYear BETWEEN 2000 AND 2022\nAND title_basics.endYear BETWEEN 2000 AND 2022\nAND title_basics.runtimeMinutes BETWE"}
{"id": 21827, "query": "I really like movies like Hangover (2010) and Girls Trip (2017)", "history": ["Notebook  (2006)", "Game Night (2018)"], "groundtruth": ["Deadpool  (2016)", "Goodfellas (1990)", "Deadpool 2  (2018)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles\nFROM \n    title_basics \nINNER JOIN \n    title_ratings ON \n        title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics ON \n        title_basics.nconst = name_basics.nconst \nWHERE \n    title_basics.primaryTitle LIKE '%Hangover%' \n    OR title_basics.primaryTitle LIKE '%Girls Trip%' \n    OR title_basics.genres LIKE '%Comedy%' \n    OR title_basics.genres LIKE '%Adventure%' \n    OR title_basics.startYear BETWEEN 2000 AND 2020 \n    OR title_basics.endYear BETWEEN 2000 AND 2020 \n    OR title_ratings.averageRating > 7 \n    OR title_ratings.numVotes > 10000 \n    OR name_basics.primaryProfession LIKE '%Actor%' \n    OR name_basics.knownForTitles LIKE '%Notebook%' \n    OR name_basics.knownForTitles LIKE '%Game Night%' \nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title"}
{"id": 21830, "query": "I like movies like Dumb and Dumber (1994) and Super Troopers (2001)", "history": ["Scarface  (1983)", "Goodfellas (1990)", "Training Day (2001)", "Lethal Weapon (1987)"], "groundtruth": ["Shutter Island  (2010)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.title_id = t2.title_id\nWHERE t1.genres = 'Comedy'\nAND t2.averageRating > 7\nAND t1.primaryTitle IN ('Dumb and Dumber', 'Super Troopers')\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  WHERE t3.title_id = t1.title_id AND t3.primaryTitle IN ('Scarface', 'Goodfellas', 'Training Day', 'Lethal Weapon')\n)\nGROUP BY t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are comedies, have an average rating of above 7, and do not appear in the user's preference history. The user's preference history is represented by the movies they have rated and the movies they have not rated. The query will also group the results by title, primary title, original title, and genres."}
{"id": 21854, "query": "I like movies similar to Ace Ventura: Pet Detective (1994) and Dumb and Dumber (1994)", "history": ["Dumb and Dumber (1994)", "Superbad  (2007)", "Fight Club (1999)", "Pulp Fiction (1994)", "Deadpool  (2016)"], "groundtruth": ["This Is the End (2013)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.title LIKE '%Ace Ventura%' OR title_basics.title LIKE '%Dumb and Dumber%'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 10000\nAND name_basics.primaryName NOT LIKE 'Jim Carrey%'\nAND name_basics.primaryProfession NOT LIKE 'Actor%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles\nHAVING COUNT(DISTINCT title_basics.title) > 2\nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;\n\nThis query first joins the title_basics, title_ratings, and name_basics tables to get the required information"}
{"id": 21855, "query": "i like the movies Dumb and Dumber (1994) and Superbad  (2007)", "history": ["Hot Tub Time Machine", "Office Space (1999)", "Superbad  (2007)", "The 40-Year-Old Virgin (2005)", "Dumb and Dumber (1994)"], "groundtruth": ["Easy A (2010)"], "output": "SELECT * FROM title_basics tb\nINNER JOIN title_ratings tr ON tb.tconst = tr.tconst\nINNER JOIN name_basics nb ON tb.primaryName = nb.primaryName\nINNER JOIN title_crew tc ON tb.directors = tc.directors\nINNER JOIN title_principals tp ON tb.tconst = tp.tconst\nWHERE tr.averageRating > (\n    SELECT AVG(tr2.averageRating)\n    FROM title_ratings tr2\n    WHERE tr2.tconst IN (SELECT tconst FROM title_basics WHERE primaryName = 'Jim Carrey')\n)\nAND tb.genres LIKE '%comedy%'\nAND tb.startYear BETWEEN 1990 AND 2010\nAND tb.endYear BETWEEN 1990 AND 2010\nAND tp.category = 'actor'\nAND tp.job = 'lead'\nAND tp.characters LIKE '%funny%'\n\n;\n\nThis SQL query recommends movies to the user based on their input and historical preferences. The query first joins the title_basics, title_ratings, name_basics, title_crew, and title_principals tables to get information about the movies and their ratings, directors, and actors.\n\nThe query then filters the results based on the user's input and historical preferences. It selects only movies with a rating above the average rating of movies featuring Jim Carrey, and only movies in the comedy genre. It also filters the results by start and end year to only include movies released between 1990 and 2010.\n\nFinally, the query joins the title_principals table again to get information about the actors and their roles in the movies, and filters the results to only include movies with lead actors and characters that are funny.\n\nThe executed result of this query will be a list of movies that match the user's input and historical preferences, and are likely to be of interest to them."}
{"id": 21858, "query": "i like movies similar to Dumb and Dumber (1994) and Superbad  (2007)", "history": ["Iron Man  (2008)", "Superbad  (2007)", "Dumb and Dumber (1994)", "Deadpool  (2016)"], "groundtruth": ["Game Night (2018)", "Deadpool 2  (2018)"], "output": "SELECT * FROM (\nSELECT t.title_id, t.title_basics.primaryTitle, t.title_basics.startYear, t.title_basics.genres, \n       AVG(r.rating) AS avg_rating, COUNT(r.title_id) AS num_votes\nFROM title_basics t\nJOIN title_ratings r ON t.title_id = r.title_id\nWHERE t.primaryTitle LIKE '%Dumb and Dumber%' OR t.primaryTitle LIKE '%Superbad%'\nGROUP BY t.title_id\n) AS top_movies\nWHERE avg_rating > (SELECT AVG(r.rating) FROM title_ratings WHERE title_id IN (SELECT title_id FROM title_basics WHERE primaryTitle = 'Iron Man'))\nAND num_votes > (SELECT COUNT(title_id) FROM title_ratings WHERE title_id IN (SELECT title_id FROM title_basics WHERE primaryTitle = 'Iron Man'))\nORDER BY avg_rating DESC;\n\nThis SQL query first joins the title_basics and title_ratings tables to get the movie titles and their corresponding ratings. It then filters the results to only include movies with primary titles similar to \"Dumb and Dumber\" or \"Superbad\".\n\nNext, it groups the results by title_id and calculates the average rating and number of votes for each group. It then compares the average rating and number of votes for each movie to the average rating and number of votes for \"Iron Man\", and filters out movies that have a lower average rating or number of votes.\n\nFinally, the query orders the results by descending average rating and returns the top movies that meet the user's preference history and input."}
{"id": 21860, "query": "I\u2019m looking for a good sci-fi movie, like Guardians of the Galaxy  (2014)", "history": ["Superbad  (2007)", "Dumb and Dumber (1994)", "Kick-Ass  (2010)"], "groundtruth": ["This Is the End (2013)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Science Fiction'\nAND t2.averageRating > (SELECT AVG(t3.averageRating)\n                         FROM title_ratings t3\n                         WHERE t3.title IN (SELECT t4.title\n                                            FROM title_basics t4\n                                            WHERE t4.primaryTitle = 'Guardians of the Galaxy'\n                                            AND t4.startYear = 2014))\nAND EXISTS (SELECT 1\n              FROM name_basics n\n              JOIN title_crew tc ON n.nconst = tc.nconst\n              WHERE tc.directors = 'James Gunn'\n              OR tc.writers = 'James Gunn')\nAND NOT EXISTS (SELECT 1\n                  FROM title_principals tp\n                  JOIN name_basics n ON tp.nconst = n.nconst\n                  WHERE tp.category = 'Actor'\n                  AND n.birthYear > 1970)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies with a science fiction genre, a high average rating (higher than the average rating of Guardians of the Galaxy in 2014), and a director or writer named James Gunn. It will also exclude actors who were born after 1970. The result set will be ordered by the average rating in descending order."}
{"id": 21861, "query": "i liked Dumb and Dumber (1994) and Superbad  (2007)", "history": ["Star Wars  (1977)"], "groundtruth": ["Stargate  (1994)", "District 9 (2009)", "Deadpool 2  (2018)"], "output": "SELECT title_basics.title, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.title LIKE '%Dumber%' OR title_basics.title LIKE '%Superbad%'\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.averageRating > 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE title_principals.tconst = title_basics.tconst AND title_principals.characters LIKE '%Star Wars%'\n)\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"Dumb and Dumber\" and \"Superbad\", but not those with high ratings (>7) or those that are part of the \"Star Wars\" franchise. The query will return the title, average rating, directors, and characters for the recommended movies."}
{"id": 21863, "query": "I want a nice action movie", "history": ["Rush Hour  (1998)", "The Transporter (2002)", "Deadpool 2  (2018)", "Hot Fuzz (2007)", "Tropic Thunder (2008)"], "groundtruth": ["Die Hard (1988)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Action%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Jackie% Chan%'\nAND title_principals.characters LIKE '%martial% arts%'\n\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query joins four tables: title_basics, title_ratings, title_crew, and title_principals. It selects the title, primary title, original title, average rating, directors, and characters that match the user's input and preference history. The query filters the results based on the movie genres, number of votes, directors, and characters. Finally, it orders the results by average rating in descending order and primary title in ascending order.\n\nNote that this is just one possible SQL query for a movie recommendation system based on the given database schema and user input. Depending on the specific requirements and implementation, the query may need to be adjusted or extended."}
{"id": 21868, "query": "i liked Dumb and Dumber (1994) and Superbad  (2007)", "history": ["Talladega Nights: The Ballad of Ricky Bobby (2006)", "Anchorman ", "Happy Gilmore (1996)"], "groundtruth": ["Napoleon Dynamite (2004)"], "output": "SELECT * FROM (\n  SELECT title_basics.title_id, title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \n       AVG(title_ratings.averageRating) AS avg_rating, COUNT(title_ratings.tconst) AS num_votes\n  FROM title_basics\n  JOIN title_ratings ON title_basics.title_id = title_ratings.tconst\n  WHERE title_basics.primaryTitle = 'Dumb and Dumber' OR title_basics.primaryTitle = 'Superbad'\n  GROUP BY title_basics.title_id\n) AS recommended_movies\nWHERE avg_rating > (\n  SELECT AVG(title_ratings.averageRating)\n  FROM title_basics\n  JOIN title_ratings ON title_basics.title_id = title_ratings.tconst\n  WHERE title_basics.primaryTitle IN ('Talladega Nights: The Ballad of Ricky Bobby', 'Anchorman', 'Happy Gilmore')\n)\nAND num_votes > 1000\nORDER BY avg_rating DESC;\n\nThis SQL query first joins the title_basics and title_ratings tables to get the movie titles and their corresponding ratings. It then filters the results to only include movies that are either \"Dumb and Dumber\" or \"Superbad\".\n\nNext, it groups the results by movie title and computes the average rating and number of votes for each group. It then filters the results again to only include movies that have a higher average rating than the average rating of the movies in the user's preference history. Finally, it filters the results one more time to only include movies that have at least 1000 votes.\n\nThe final result set will contain a list of movies that are similar to the user's preferred movies and have a high rating. The order of the results will be based on the average rating, with the highest-rated movies at the top of the list."}
{"id": 21869, "query": "What are some good comedies you watch?", "history": ["Superbad  (2007)", "Super Troopers (2001)", "Van Wilder (2002)", "Dumb and Dumber (1994)"], "groundtruth": ["The Interview (2014)", "The Disaster Artist (2017)"], "output": "SELECT * FROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nJOIN name_basics nb ON tb.primaryTitle = nb.primaryName\nJOIN title_crew tc ON tb.directors = tc.directors\nJOIN title_principals tp ON tb.ordering = tp.ordering\nWHERE tb.genres = 'Comedy'\nAND tp.category = 'Actor'\nAND tp.job = 'Lead'\nAND tp.characters LIKE '%funny%'\nAND tr.averageRating > 7\nAND tr.numVotes > 1000\nAND NOT EXISTS (SELECT 1 FROM title_basics tb2 WHERE tb2.tconst = tb.tconst AND tb2.endYear > 2020)\nORDER BY tr.averageRating DESC, tp.job ASC;\n\nThis SQL query will retrieve movies that are comedies, have a high average rating, and have at least 1000 votes, while also considering the user's historical preferences. The query will also filter out movies that were released after 2020.\n\nHere's a breakdown of the query:\n\n1. SELECT * FROM title_basics tb: This selects all columns from the title_basics table.\n2. JOIN title_ratings tr ON tb.tconst = tr.tconst: This joins the title_basics table with the title_ratings table based on the tconst column.\n3. JOIN name_basics nb ON tb.primaryTitle = nb.primaryName: This joins the title_basics table with the name_basics table based on the primaryTitle column.\n4. JOIN title_crew tc ON tb.directors = tc.directors: This joins the title_basics table with the title_crew table based on the directors column.\n5. JOIN title_principals tp ON tb.ordering = tp.ordering: This joins the title_basics table with the title_principals table based on the ordering column.\n6. WHERE tb.genres"}
{"id": 21871, "query": "im in the mood for a movie like Dumb and Dumber (1994) and Superbad  (2007)", "history": ["Black Panther (2018)"], "groundtruth": ["Ant-Man and the Wasp (2018)"], "output": "SELECT \n    title_basics.title, \n    title_ratings.averageRating, \n    title_crew.directors, \n    title_principals.characters \nFROM \n    title_basics \nINNER JOIN \n    title_ratings ON title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    title_crew ON title_basics.tconst = title_crew.tconst \nINNER JOIN \n    title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.titleType = 'feature film' \n    AND title_ratings.numVotes > 1000 \n    AND title_crew.directors LIKE '%Jim Carrey%' \n    AND title_principals.characters LIKE '%Kirsten Dunst%' \n    AND title_basics.startYear BETWEEN 1990 AND 2018 \n    AND title_basics.endYear BETWEEN 1990 AND 2018 \n    AND title_basics.runtimeMinutes BETWEEN 80 AND 120 \n    AND title_basics.genres LIKE '%comedy%' \n    AND NOT EXISTS ( \n        SELECT \n            * \n        FROM \n            title_basics \n        WHERE \n            title_basics.tconst = title_principals.tconst \n            AND title_basics.title LIKE '%Black Panther%' \n    ) \nORDER BY \n    title_ratings.averageRating DESC, \n    title_basics.startYear DESC;\n\nThis SQL query will retrieve movies that are feature films, have a rating of over 1000, have Jim Carrey as a director or Kirsten Dunst as an actor, were released between 1990 and 2018, have a runtime of between 80 and 120 minutes, and are comedies. It will also exclude any movies that are in the user's preference history, specifically \"Black Panther"}
{"id": 21873, "query": "I\u2019m well, I\u2019m looking for some funny movies like Superbad  (2007) or Kick-Ass  (2010)", "history": ["Moana  (2016)"], "groundtruth": ["Ocean's 8 (2018)", "The 15-17 to Paris"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_basics.genres,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > 6.5\nAND title_basics.startYear > 2000\nAND title_basics.endYear < 2020\nAND name_basics.primaryProfession = 'Actor'\nAND name_basics.knownForTitles LIKE '%Superbad%'\nOR name_basics.knownForTitles LIKE '%Kick-Ass%'\nOR title_basics.title LIKE '%Superbad%'\nOR title_basics.title LIKE '%Kick-Ass%'\nAND title_basics.tconst NOT IN (SELECT tconst FROM title_basics WHERE startYear < 2000)\nAND title_basics.tconst NOT IN (SELECT tconst FROM title_basics WHERE endYear > 2020)\nAND title_ratings.numVotes > 10000\nORDER BY title_ratings.averageRating DESC;\n\nNote: The above query is just an example and may need to be modified to fit the specific needs of the IMDb database and the user input. Additionally, the query is not optimized for performance and may need to be optimized for large datasets."}
{"id": 21874, "query": "Hello, what can you recommend for action movies?", "history": ["Along Came Polly", "Pretty Woman (1990)", "Bridget Jones's Diary  (2001)"], "groundtruth": ["A Lot like Love (2005)"], "output": "SELECT \n    t.title, \n    t.titleType, \n    t.primaryTitle, \n    t.originalTitle, \n    t.isAdult, \n    t.startYear, \n    t.endYear, \n    t.runtimeMinutes, \n    t.genres, \n    r.averageRating, \n    r.numVotes, \n    n.primaryName, \n    n.birthYear, \n    n.deathYear, \n    n.primaryProfession, \n    n.knownForTitles, \n    c.category, \n    c.job, \n    c.characters\nFROM \n    title_basics t\n    JOIN title_ratings r ON t.tconst = r.tconst\n    JOIN name_basics n ON t.primaryName = n.primaryName\n    JOIN title_crew c ON t.tconst = c.tconst\nWHERE \n    t.titleType = 'action'\n    AND r.averageRating > (\n        SELECT \n            AVG(r2.averageRating)\n        FROM \n            title_ratings r2\n            JOIN name_basics n2 ON r2.tconst = n2.primaryName\n            WHERE \n                n2.primaryName = 'Bridget Jones's Diary  (2001)'\n    )\n    AND t.primaryTitle NOT IN (\n        SELECT \n            t2.primaryTitle\n        FROM \n            title_basics t2\n            JOIN title_ratings r2 ON t2.tconst = r2.tconst\n            WHERE \n                r2.averageRating < 5\n    )\nORDER BY \n    r.averageRating DESC, \n    t.startYear DESC;\n\n;"}
{"id": 21876, "query": "i am in the mood for something like Superbad  (2007) and Ace Ventura: Pet Detective (1994)", "history": ["John Wick: Chapter 2 (2017)"], "groundtruth": ["Guardians of the Galaxy Vol. 2 (2017)", "Mad Max: Fury Road (2015)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.nconst, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.primaryTitle = 'Superbad' OR title_basics.primaryTitle = 'Ace Ventura: Pet Detective' \nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'John Wick: Chapter 2')) \nAND title_basics.startYear BETWEEN 2000 AND 2019 \nAND title_basics.genres LIKE '%comedy%' \nORDER BY title_ratings.averageRating DESC, title_basics.startYear DESC;"}
{"id": 21878, "query": "can you rec any other good zombie movies", "history": ["Superbad  (2007)", "Dumb and Dumber (1994)", "Pineapple Express  (2008)"], "groundtruth": ["Easy A (2010)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Horror' AND t2.averageRating > 7\nAND EXISTS (\n  SELECT 1\n  FROM title_principals t3\n  JOIN name_basics t4 ON t3.nconst = t4.nconst\n  WHERE t3.category = 'Actor' AND t4.birthYear > 1980\n  AND t1.tconst NOT IN (SELECT t5.tconst\n                         FROM title_ratings t5\n                         WHERE t5.averageRating > 8)\n)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies with a horror genre, a high average rating (above 7), and at least one actor born after 1980. Additionally, it will exclude movies with an average rating above 8, as the user has already rated those movies highly.\n\nThe query joins the title_basics and title_ratings tables to get the title, start year, and rating information. It also joins the name_basics table to get the actors' birth years. The EXISTS clause is used to check if there are any actors born after 1980 in the movie's cast. Finally, the query orders the results by the average rating in descending order."}
{"id": 21891, "query": "Hey there, I'm looking for some good animated film recommendations. Have you seen any in the past year?", "history": ["The Basketball Diaries  (1995)", "The Good Son  (1993)", "Fight Club (1999)", "The Wolf of Wall Street  (2013)", "Inception (2010)"], "groundtruth": ["The Revenant  (2015)"], "output": "SELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, name_basics.primaryName, birthYear, deathYear, primaryProfession, knownForTitles \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.nconst = name_basics.nconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE startYear > 2022 AND endYear < 2023) \nAND title_basics.genres LIKE '%animated%' \nAND name_basics.primaryProfession LIKE '%actor%' \nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE category = 'actor' AND job = 'director') \nAND NOT EXISTS (SELECT 1 FROM title_crew WHERE job = 'director') \nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE numVotes > 10000 AND averageRating > 7) \nAND NOT EXISTS (SELECT 1 FROM title_basics WHERE isAdult = 1) \nAND title_basics.runtimeMinutes > 60 \nAND title_basics.endYear > 2022 \nAND title_basics.startYear < 2023 \nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;"}
{"id": 21905, "query": "Hello can you recommend movies for someone who grew up with A Nightmare on Elm Street (1984) ?", "history": ["Friday the 13th  (1980)", "A Nightmare on Elm Street (1984)"], "groundtruth": ["The Usual Suspects (1995)", "Deadpool 2  (2018)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle IN ('A Nightmare on Elm Street', 'Friday the 13th')\nAND title_ratings.averageRating > 6\nAND title_principals.category = 'Horror'\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%Horror Movie%';\n\nNote: The above query is written based on the given database structure and user input. It is not optimized for performance and may require adjustments for actual use."}
{"id": 21912, "query": "I want to see something like Dumb and Dumber (1994) and Zombieland (2009)", "history": ["The Last House on the Left  (1972)", "It Follows (2014)", "The Last House on the Left  (2009)"], "groundtruth": ["The Forest  (2016)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\n    JOIN name_basics ON title_basics.tconst = name_basics.nconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.title LIKE '%Dumb and Dumber%' OR \n    title_basics.title LIKE '%Zombieland%'\n    AND title_basics.isAdult = 0\n    AND title_basics.startYear BETWEEN 1970 AND 2019\n    AND title_basics.endYear BETWEEN 1970 AND 2019\n    AND title_basics.runtimeMinutes BETWEEN 60 AND 180\n    AND name_basics.primaryName NOT LIKE '%The Last House on the Left%'\n    AND name_basics.primaryName NOT LIKE '%It Follows%'\n    AND name_basics.knownForTitles NOT LIKE '%The Last House on the Left%'\n    AND name_basics.knownForTitles NOT LIKE '%It Follows%'\nGROUP BY"}
{"id": 21914, "query": "I enjoy films like Ace Ventura: Pet Detective (1994) and Superbad  (2007)", "history": ["The Wedding Singer (1998)", "50 First Dates (2004)"], "groundtruth": ["The Big Sick (2017)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.nconst = name_basics.nconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.titleType ='movie' \nAND title_basics.startYear BETWEEN 1990 AND 2010 \nAND title_basics.runtimeMinutes > 90 \nAND title_ratings.averageRating > 6.5 \nAND title_principals.category = 'comedy' \nAND title_principals.job = 'actor' \nAND title_principals.characters LIKE '%animals%'\nAND name_basics.primaryName IN ('Jim Carrey', 'Seth Rogen')\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title"}
{"id": 21924, "query": "i am in the mood for something like Ace Ventura: Pet Detective (1994) or Superbad  (2007)", "history": ["Super Troopers (2001)", "Beerfest (2006)", "Zombieland (2009)"], "groundtruth": ["Super Troopers 2 (2018)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%comedy%' AND t1.startYear BETWEEN 1990 AND 2009\nAND (\n  EXISTS (\n    SELECT 1\n    FROM title_basics t3\n    WHERE t3.tconst = t1.tconst AND t3.primaryTitle LIKE '%Ace Ventura%'\n  )\n  OR EXISTS (\n    SELECT 1\n    FROM title_basics t3\n    WHERE t3.tconst = t1.tconst AND t3.primaryTitle LIKE '%Superbad%'\n  )\n)\nAND t2.averageRating > 6 AND t2.numVotes > 10000\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are comedies, released between 1990 and 2009, and have a high average rating (above 6) and at least 10,000 votes. The query will also consider movies that have \"Ace Ventura\" or \"Superbad\" in their primary title, as specified in the user input. The results will be ordered by average rating in descending order and then by release year in descending order.\n\nNote that this is just one possible approach to generating movie recommendations, and there are many other factors that could be taken into account when building a real-world movie recommendation system."}
{"id": 21926, "query": "What about a good comedy for the end?", "history": ["Wells Fargo  (1937)", "Pulp Fiction (1994)", "Sin City  (2005)"], "groundtruth": ["Eagle Eye (2008)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.genres = 'Comedy' AND title_ratings.averageRating > 7 AND title_ratings.numVotes > 10000 AND name_basics.primaryProfession = 'Actor' AND name_basics.knownForTitles LIKE '%Wells Fargo%' OR name_basics.knownForTitles LIKE '%Pulp Fiction%' OR name_basics.knownForTitles LIKE '%Sin City%' \nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession,"}
{"id": 21930, "query": "I just watched Clerks (1994) and Chasing Amy (1997) so I'm in a comedy mood", "history": ["The Terminator (1984)"], "groundtruth": ["Predator  (1987)", "Die Hard (1988)", "Kingpin  (1996)"], "output": "SELECT * FROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nJOIN name_basics nb ON tb.primaryTitle = nb.primaryName\nJOIN title_crew tc ON tb.directors = tc.directors\nJOIN title_principals tp ON tb.tconst = tp.tconst\nWHERE tb.genres = 'comedy'\nAND tr.averageRating > 7\nAND nb.birthYear BETWEEN 1960 AND 1980\nAND tc.directors LIKE '%Kevin Smith%'\nAND tp.category = 'actor'\nAND tp.job = 'lead'\nAND tp.characters LIKE '%Silent Bob%'\n\n;\n\nThis SQL query will retrieve movies that are comedies, have an average rating of at least 7, were released between 1960 and 1980, were directed by Kevin Smith, and have a lead actor who plays the role of Silent Bob. The query joins multiple tables to retrieve information about the movies, directors, and actors."}
{"id": 21932, "query": "Can you recommend some movies for me to watch?", "history": ["The Matrix (1999)", "Speed  (1994)"], "groundtruth": ["Ghost in the Shell  (1995)", "Die Hard (1988)", "John Wick (2014)", "Predator  (1987)"], "output": "SELECT title_basics.title, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Science Fiction'\nAND title_ratings.numVotes > 10000\nAND title_crew.directors = 'The Wachowskis'\nAND title_principals.characters = 'Keanu Reeves'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as science fiction, have more than 10,000 ratings, were directed by The Wachowskis, and feature Keanu Reeves in a leading role. The query will return the title of the movie, the average rating, the directors, and the characters, in that order."}
{"id": 21933, "query": "Do you know any movies similar to The Matrix (1999) ? I loved the trilogy!", "history": ["True Lies (1994)", "A Walk to Remember (2002)"], "groundtruth": ["Love Stinks  (1999)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Science Fiction' AND t1.startYear = 1999\nAND EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  JOIN title_principals t4 ON t3.tconst = t4.tconst\n  WHERE t3.category = 'Actors' AND t4.job = 'Director' AND t4.nconst = 'The Wachowskis'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings t5\n  WHERE t5.tconst = t1.tconst AND t5.averageRating < 5\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t6\n  JOIN title_ratings t7 ON t6.tconst = t7.tconst\n  WHERE t6.primaryName = 'Arnold Schwarzenegger' AND t7.averageRating < 5\n)\nAND EXISTS (\n  SELECT 1\n  FROM title_basics t8\n  JOIN title_ratings t9 ON t8.tconst = t9.tconst\n  WHERE t8.primaryName = 'Jennifer Lopez' AND t9.averageRating > 5\n)\nORDER BY t1.startYear DESC, t2.averageRating DESC;\n\nThis SQL query is designed to recommend movies similar to \"The Matrix\" (1999) based on the user's preference history and the IMDb database. The query joins several tables to retrieve information about the movies and their ratings. The WHERE clause filters the results based on the user's preferred genres, start year, and directors. The NOT EXISTS clauses exclude movies with low ratings or those that do not match the user's preferred actors. Finally, the ORDER BY clause sorts the results by start year in descending order and average rating in descending order."}
{"id": 21951, "query": "I am looking for a movie similar to Juno (2007). Can you recommend a few options?", "history": ["Shakespeare in Love (1998)", "Citizen Kane (1941)", "Casablanca  (1942)"], "groundtruth": ["Elizabeth  (1998)", "Anonymous  (2011)"], "output": "SELECT \n  t.title_basics.title, \n  t.title_basics.primaryTitle, \n  t.title_basics.originalTitle, \n  t.title_basics.isAdult, \n  t.title_basics.startYear, \n  t.title_basics.endYear, \n  t.title_basics.runtimeMinutes, \n  t.title_basics.genres, \n  t.title_ratings.averageRating, \n  t.title_ratings.numVotes, \n  n.name_basics.primaryName, \n  n.name_basics.birthYear, \n  n.name_basics.deathYear, \n  n.name_basics.primaryProfession, \n  n.name_basics.knownForTitles\nFROM \n  title_basics t\n  JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n  JOIN name_basics n ON t.title_basics.primaryTitle = n.primaryName\nWHERE \n  t.title_basics.title LIKE '%Juno (2007)%' \n  AND t.title_basics.genres IN ('Comedy', 'Drama')\n  AND t.title_ratings.averageRating > 7.5\n  AND t.title_ratings.numVotes > 1000\n  AND NOT EXISTS (\n    SELECT \n      1 \n    FROM \n      title_principals tp \n    WHERE \n      tp.tconst = t.title_basics.tconst AND \n      tp.category = 'Actress' AND \n      tp.job = 'Lead' AND \n      tp.characters = 'Juno'\n  )\nGROUP BY \n  t.title_basics.title, \n  t.title_basics.primaryTitle, \n  t.title_basics.originalTitle, \n  t.title_basics.isAdult, \n  t.title_basics.startYear, \n  t."}
{"id": 21954, "query": "Know any movies like Shakespeare in Love (1998)?", "history": ["Grease  (1978)", "Mamma Mia!  (2008)"], "groundtruth": ["High School Musical 3: Senior Year (2008)", "Hairspray  (2007)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.title AS \"Similar Movie\"\nFROM title_basics t1\nJOIN (\n    SELECT title, AVG(rating) AS avg_rating\n    FROM title_ratings\n    WHERE title = 'Shakespeare in Love'\n) t2 ON t1.title = t2.title\nWHERE t1.genres = 'Comedy' AND t1.startYear BETWEEN 1970 AND 2000\nAND t2.avg_rating > (\n    SELECT AVG(rating)\n    FROM title_ratings\n    WHERE title = 'Grease'\n)\nAND t2.avg_rating < (\n    SELECT AVG(rating)\n    FROM title_ratings\n    WHERE title = 'Mamma Mia!'\n)\nORDER BY t2.avg_rating DESC;\n\nThis SQL query will retrieve movies similar to \"Shakespeare in Love\" based on the user's input and historical preferences. The query joins the title_basics table with a subquery of the title_ratings table to get the average rating of \"Shakespeare in Love\". The query then filters the results to only include comedies released between 1970 and 2000, and ranks the results by the average rating of the similar movies. The historical preferences are used to filter the results to only include movies with ratings that are higher than \"Grease\" and lower than \"Mamma Mia!\". The final result is a list of movies similar to \"Shakespeare in Love\" with their start year, runtime, genres, and the average rating of similar movies."}
{"id": 21958, "query": "I'm fine thanks. Actually I saw both and love them but in the mood for something more along the lines of The Terminator (1984)", "history": ["28 Days Later (2002)", "I Am Legend  (2007)"], "groundtruth": ["Dawn of the Dead  (2004)", "World War Z "], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes \nFROM title_basics t1 \nJOIN title_ratings t2 ON t1.tconst = t2.tconst \nWHERE t1.genres = 'Science Fiction' AND t1.startYear = 1984 AND t2.averageRating > (SELECT AVG(t3.averageRating) \nFROM title_ratings t3 \nWHERE t3.title IN (SELECT title \nFROM title_basics \nWHERE primaryTitle = 'The Terminator (1984)')) \nAND t1.primaryTitle NOT IN (SELECT title \nFROM title_basics \nWHERE primaryTitle = '28 Days Later (2002)') \nAND t1.primaryTitle NOT IN (SELECT title \nFROM title_basics \nWHERE primaryTitle = 'I Am Legend (2007)') \nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are science fiction, released in 1984, have an average rating higher than The Terminator (1984), and are not 28 Days Later (2002) or I Am Legend (2007). The query will also order the results by the average rating in descending order."}
{"id": 21959, "query": "Hmm I like zombie movies like 28 Days Later (2002)", "history": ["Saving Private Ryan (1998)", "The Inglorious Bastards (1978)"], "groundtruth": ["Shooter  (2007)", "Black Hawk Down  (2002)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_ratings.averageRating, \ntitle_principals.category, \ntitle_principals.job, \ntitle_crew.directors, \ntitle_crew.writers\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nJOIN title_crew ON title_principals.category = title_crew.category \nWHERE title_basics.genres LIKE '%zombie%' \nAND title_ratings.numVotes > 1000 \nAND title_principals.job = 'Actor' \nAND title_crew.directors LIKE '%Danny Boyle%' \nAND title_crew.writers LIKE '%Alex Garland%' \nAND NOT EXISTS ( \n  SELECT 1 \n  FROM title_basics \n  WHERE title_basics.tconst = title_principals.tconst \n  AND title_basics.primaryTitle = name_basics.primaryName \n  AND title_basics.genres NOT LIKE '%zombie%' \n) \nGROUP BY title_basics.title, title_basics.primaryTitle \nHAVING AVG(title_ratings.averageRating) > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE genres LIKE '%zombie%')) \nORDER BY AVG(title_ratings.averageRating) DESC, title_basics.primaryTitle ASC;\n\nThis SQL query is designed to provide movie recommendations to users based on their input and historical preferences. The query takes into account the user's input of enjoying zombie movies like \"28 Days Later (2002)\" and their historical prefer"}
{"id": 21960, "query": "Know any movies similar to Saving Private Ryan (1998)?", "history": ["Forever Young  (1992)", "Powder  (1995)"], "groundtruth": ["Rites of Passage  (1999)", "The Time Traveler's Wife  (2009)", "Phenomenon  (1996)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.title = 'Saving Private Ryan' AND \ntitle_ratings.averageRating > (\n    SELECT \n    AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (\n        SELECT \n        title_basics.tconst\n        FROM title_basics\n        WHERE title_basics.title = 'Forever Young' OR title_basics.title = 'Powder'\n    )\n)\n\nGROUP BY title_basics.tconst, name_basics.primaryName, title_basics.primaryTitle, title_ratings.averageRating, title_ratings.numVotes, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_pr"}
{"id": 21961, "query": "Hope you're having a great day! Know any movies similar to Powder  (1995)?", "history": ["The Italian Job (1969)", "Gone in 60 Seconds  (2000)", "Drive  (2011)"], "groundtruth": ["The Guest  (2014)", "Thief  (1981)"], "output": "SELECT * FROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nJOIN name_basics nb ON tb.primaryName = nb.primaryName\nJOIN title_crew tc ON tb.directors = tc.directors\nJOIN title_principals tp ON tb.tconst = tp.tconst\nWHERE tb.titleType ='movie'\nAND tb.startYear = 1995\nAND tb.runtimeMinutes > 90\nAND tp.category = 'actor'\nAND tp.job ='main'\nAND tp.characters = 'lead'\nAND tr.averageRating > 7\nAND NOT EXISTS (\n  SELECT 1 FROM title_basics tb2\n  JOIN title_ratings tr2 ON tb2.tconst = tr2.tconst\n  WHERE tb2.titleType ='movie'\n  AND tb2.startYear = 1995\n  AND tb2.runtimeMinutes > 90\n  AND tr2.averageRating > 7\n  AND tb2.tconst!= tb.tconst\n)\nORDER BY tr.averageRating DESC, tb.primaryTitle ASC;\n\nThis SQL query will retrieve movies similar to \"Powder\" (1995) based on the user's preference history and current input. The query joins several tables to gather information about the movies, such as their titles, release years, runtimes, and ratings. The query also uses logical operators to filter out movies that are not similar to \"Powder\" based on their genre, cast, and crew. Finally, the query orders the results by the average rating and the primary title."}
{"id": 21963, "query": "I feel like watching something like Drive  (2011) or The Italian Job (1969)", "history": ["The Greatest Showman (2017)"], "groundtruth": ["La La Land  (2016)", "Moulin Rouge! (2001)"], "output": "SELECT t1.title, t1.titleType, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.originalTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.titleType ='movie'\nAND t2.averageRating > 7\nAND t1.startYear BETWEEN 2010 AND 2020\nAND t1.genres LIKE '%action%'\nAND t3.primaryProfession = 'actor'\nAND t4.directors LIKE '%Nicolas Winding Refn%'\nAND t5.category = 'actor'\nAND t5.job = 'lead'\nAND t5.characters LIKE '%Ryan Gosling%'\n\n;\n\nThis SQL query is designed to retrieve movies that are similar to \"Drive\" (2011) and \"The Italian Job\" (1969), based on the user's input and historical preferences. The query joins several tables to retrieve information about the movies, including the title, genre, directors, and principal actors. The query also filters the results based on the user's preference history, which includes only movies with an average rating above 7, and only movies that were released between 2010 and 2020. Additionally, the query uses LIKE operators to match the genres, directors, and principal actors with the user's input and preference history."}
{"id": 21964, "query": "Hello! I love The Greatest Showman (2017) . Do you know any movies like it?", "history": ["Deadpool 2  (2018)", "Deadpool  (2016)"], "groundtruth": ["Fargo  (1996)", "Rush Hour  (1998)", "Tango & Cash (1989)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'The Greatest Showman' AND \ntitle_ratings.averageRating > 7 AND \ntitle_principals.category = 'Musical' AND \ntitle_principals.job = 'Actor' AND \ntitle_principals.characters = 'Hugh Jackman'\nAND title_basics.startYear = 2017\nAND title_basics.endYear = 2017\nAND title_basics.runtimeMinutes > 120\nAND NOT title_basics.isAdult\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_princip"}
{"id": 21966, "query": "Any others funny action comedies?", "history": ["Edward Scissorhands (1990)", "Blow  (2001)"], "groundtruth": ["Secret Window (2004)", "Pirates of the Caribbean "], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.genres = 'Comedy' AND t1.isAdult = '0' AND t2.averageRating > (SELECT AVG(t6.averageRating) FROM title_ratings t6 WHERE t6.tconst IN (SELECT t4.tconst FROM title_crew t4 WHERE t4.job = 'Director'))\nAND t1.startYear BETWEEN 1990 AND 2010\nAND t1.runtimeMinutes > 90\nAND t3.primaryProfession = 'Actor'\nAND t5.category = 'Performing'\nAND t5.job = 'Actor'\nAND t5.characters = 'Lead'\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are comedies, have a rating higher than the average rating of the directors, were released between 1990 and 2010, have a runtime of over 90 minutes, and have an actor in the leading role. The query will also join the title_basics table with the title_ratings, name_basics, title_crew, and title_principals tables"}
{"id": 21969, "query": "I'm looking for something more like Halloween  (1978)", "history": ["Lost in Translation  (2003)"], "groundtruth": ["Iron Man 2 (2010)", "Lucy  (2014)", "Captain America: Civil War (2016)", "Ghost in the Shell  (2017)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.primaryTitle LIKE '%Halloween%'\nAND t2.averageRating > 7\nAND t3.knownForTitles LIKE '%Lost in Translation%'\nGROUP BY t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nHAVING COUNT(DISTINCT t5.ordering) > 2\nORDER BY t2.averageRating DESC, t1.startYear DESC;"}
{"id": 21973, "query": "I do actually. I love Scarlett Johannson. Know any of her movies?", "history": ["West Side Story  (1961)", "The Man in the Iron Mask  (1998)"], "groundtruth": ["The Count of Monte Cristo  (2002)", "The Phantom of the Opera  (2004)"], "output": "SELECT \n    t.title, \n    t.startYear, \n    t.endYear, \n    t.runtimeMinutes, \n    t.genres, \n    c.category, \n    c.job, \n    c.characters, \n    r.averageRating, \n    r.numVotes, \n    n.primaryName, \n    n.birthYear, \n    n.deathYear, \n    n.primaryProfession, \n    n.knownForTitles\nFROM \n    title_basics t \n    JOIN name_basics n ON t.primaryTitle = n.title \n    JOIN title_ratings r ON t.tconst = r.tconst \nWHERE \n    t.primaryTitle = 'Scarlett Johansson' \n    AND r.averageRating > (SELECT AVG(r2.averageRating) FROM title_ratings r2 WHERE r2.tconst IN (SELECT tconst FROM title_ratings WHERE user_id = <current_user_id>) AND r2.numVotes > 10) \n    AND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_basics.tconst = title_principals.tconst AND category = 'actor' AND job = 'actress') \n    AND NOT EXISTS (SELECT 1 FROM title_crew WHERE title_basics.tconst = title_crew.tconst AND job = 'director') \n    AND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_basics.tconst = title_principals.tconst AND category = 'actor' AND job = 'actor') \n    AND NOT EXISTS (SELECT 1 FROM title_crew WHERE title_basics.tconst = title_crew.tconst AND job = 'writer') \n    AND NOT EXISTS (SELECT 1 FROM title_ratings WHERE title_basics.tconst = title_ratings.tconst AND user_id = <current_user_id>) \n    AND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_basics.tconst = title_principals.t"}
{"id": 21976, "query": "I am a huge Brad Pitt fan. Got any suggestions?", "history": ["National Lampoon's Vacation (1983)", "Porky's (1981)", "Animal House (1978)"], "groundtruth": ["Van Wilder (2002)", "National Lampoon's Christmas Vacation (1989)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.primaryTitle = 'Interview with the Vampire'\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE primaryTitle = 'Interview with the Vampire')\nAND title_basics.genres LIKE '%Drama%'\nAND title_basics.genres LIKE '%Horror%'\nAND title_basics.startYear BETWEEN 1980 AND 1990\nAND title_basics.endYear IS NULL\nAND name_basics.primaryName = 'Brad Pitt'\nAND name_basics.knownForTitles LIKE '%National Lampoon%s Vacation'\nAND name_basics.knownForTitles LIKE '%Porky%s (1981)'\nAND name_basics.knownForTitles LIKE '%Animal House (1978)%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query takes into account the user's preference history, which includes the movies \"National Lampoon's Vacation (1983)\", \"Porky's (1981)\", and \"Animal House (1978)\", and recommends movies that are similar in genre and have a high average rating. The query also filters out movies that are not"}
{"id": 21977, "query": "I recently saw Porky's (1981) and would love to know of any other movies that are similar if you know of any!", "history": ["Zombieland (2009)", "Shaun of the Dead (2004)", "Terminator 2: Judgment Day (1991)", "Deadpool  (2016)", "The Terminator (1984)"], "groundtruth": ["Cargo (2017)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t2.averageRating > 7 AND t2.numVotes > 1000\nAND EXISTS (\n    SELECT 1\n    FROM name_basics n\n    JOIN title_crew c ON n.nconst = c.nconst\n    WHERE c.directors = 'Roger Corman'\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM name_basics n\n    JOIN title_principals p ON n.nconst = p.nconst\n    WHERE p.category = 'Actor' AND n.birthYear = 1954\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\n;"}
{"id": 21980, "query": "Great. I was hoping you could recommend some classics like Stand by Me  (1986)", "history": ["Avatar  (2009)"], "groundtruth": ["Tron (1982)", "Valerian and the City of a Thousand Planets (2017)", "Guardians of the Galaxy  (2014)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.startYear BETWEEN 1980 AND 1989\nAND t1.genres LIKE '%Drama%'\nAND t2.averageRating > 7\nAND t2.numVotes > 10000\nAND t3.primaryProfession = 'Actor'\nAND t4.directors LIKE '%James% Cameron%'\nAND t5.category = 'Performing'\nAND t5.job = 'Actor'\nAND t5.characters LIKE '%Milo% Parol%'\n\n;\n\nThis SQL query retrieves movies that meet the following criteria:\n\n1. Released between 1980 and 1989.\n2. Genre is Drama.\n3. Average rating is greater than 7.\n4. Number of votes is greater than 10000.\n5. Primary profession is Actor.\n6. Directors contain the name James Cameron.\n7. Category is Performing.\n8. Job is Actor.\n9. Characters contain the name Milo Parol.\n\nThe query joins five tables: title_basics, title_ratings, name_basics, title_crew, and title_principals. The resulting movies are ranked by their average rating and number of votes."}
{"id": 21984, "query": "Awesome! I'm looking for a good scary movie like Rosemary's Baby  (1968) a classic, you know?", "history": ["Blade Runner (1982)"], "groundtruth": ["Blade Runner 2049 (2017)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nWHERE t1.genres = 'Horror'\nAND t2.averageRating > (SELECT AVG(t4.averageRating) FROM title_ratings t4 WHERE t4.tconst = t1.tconst)\nAND t3.knownForTitles LIKE '%Rosemary%s Baby%'\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are classified as horror, have a higher average rating than the user's input, and have a known for title that is similar to \"Rosemary's Baby\". The query will also order the results by average rating in descending order and start year in descending order.\n\nNote: The user's preference history is not used in this query, but it could be incorporated by joining the title_ratings table with a table that stores the user's rating history."}
{"id": 21986, "query": "I am looking for something scary, similar to The Possession (2012) or Evil Dead  (2013)", "history": [], "groundtruth": ["Seven Pounds (2008)", "If I Stay  (2014)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nWHERE t1.genres LIKE '%Horror%'\nAND t2.averageRating > 6.5\nAND t2.numVotes > 1000\nAND t3.knownForTitles LIKE '%The Possession%'\nOR t3.knownForTitles LIKE '%Evil Dead%'\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are classified as horror, have a high average rating, and have at least 1000 votes. It will also consider the user's preference for movies similar to \"The Possession\" and \"Evil Dead\". The query will return the title, start year, runtime, average rating, number of votes, primary name, birth year, and known for titles for each matching movie."}
{"id": 21987, "query": "I'm just finishing up watching Hereafter  (2010) and I really like it. Can you recommend anything similar?", "history": ["Zathura  (2005)", "Jumanji (1995)"], "groundtruth": ["The BFG  (2016)"], "output": "SELECT \n    t1.title_basics.title, \n    t1.title_basics.primaryTitle, \n    t1.title_basics.originalTitle, \n    t1.title_basics.isAdult, \n    t1.title_basics.startYear, \n    t1.title_basics.endYear, \n    t1.title_basics.runtimeMinutes, \n    t1.title_basics.genres, \n    t2.averageRating, \n    t2.numVotes\nFROM \n    title_basics t1 \nINNER JOIN \n    title_ratings t2 ON t1.title_basics.title_id = t2.title_id \nWHERE \n    t1.title_basics.primaryTitle = 'Hereafter' \n    AND t2.averageRating > (\n        SELECT \n            AVG(t3.rating)\n        FROM \n            title_ratings t3 \n        WHERE \n            t3.title_basics.title_id = t1.title_basics.title_id \n            AND t3.numVotes > 100\n    )\n    AND t1.title_basics.genres LIKE '%fantasy%'\n    AND t1.title_basics.startYear BETWEEN 2000 AND 2019\n    AND t1.title_basics.endYear IS NULL\nGROUP BY \n    t1.title_basics.title, \n    t1.title_basics.primaryTitle, \n    t1.title_basics.originalTitle, \n    t1.title_basics.isAdult, \n    t1.title_basics.startYear, \n    t1.title_basics.endYear, \n    t1.title_basics.runtimeMinutes, \n    t1.title_basics.genres, \n    t2.averageRating, \n    t2.numVotes\nHAVING \n    COUNT(DISTINCT t1.title_basics.title_id) > 10"}
{"id": 21988, "query": "I've been watching 5 straight hours of chopped and need a movie to watch.", "history": ["Jeepers Creepers  (2001)", "Girls Trip (2017)"], "groundtruth": ["Jeepers Creepers 3 (2017)"], "output": "SELECT * FROM title_basics tb\nJOIN (\n  SELECT tconst, AVG(numVotes) AS avg_rating\n  FROM title_ratings\n  GROUP BY tconst\n) tr ON tb.tconst = tr.tconst\nJOIN (\n  SELECT nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles\n  FROM name_basics\n  WHERE primaryProfession IN ('Actor', 'Actress')\n  GROUP BY nconst\n) nb ON tb.directors = nb.nconst OR tb.writers = nb.nconst\nWHERE tb.genres LIKE '%Horror%' AND tb.startYear <= 2001 AND tb.endYear >= 2001 AND tb.runtimeMinutes > 90\nAND NOT EXISTS (\n  SELECT 1 FROM title_basics\n  WHERE tb.tconst = tr.tconst AND tr.avg_rating > 7\n)\nAND NOT EXISTS (\n  SELECT 1 FROM name_basics\n  WHERE nb.nconst = tb.directors OR nb.nconst = tb.writers AND nb.primaryProfession = 'Actor'\n  AND NOT EXISTS (\n    SELECT 1 FROM title_basics\n    WHERE tb.tconst = nb.nconst AND tr.avg_rating > 7\n  )\n)\nORDER BY avg_rating DESC;\n\nThis query will retrieve movies that are horror, released between 2001 and 2001, have a runtime of more than 90 minutes, and have an average rating of less than 7. It will also exclude movies that have any of the user's preferred directors or writers, and exclude movies that have a high average rating. The final result will be a list of movies that are likely to be of interest to the user based on their input and historical preferences."}
{"id": 21989, "query": "i like horror and comedies do you know any good ones", "history": ["Insidious  (2011)", "Jigsaw (2017)", "Girls Trip (2017)"], "groundtruth": ["The Other Guys (2010)", "The Possession (2012)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Horror' AND title_basics.genres LIKE '%Comedy'\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.numVotes > 1000\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE title_principals.tconst = title_basics.tconst AND title_principals.job = 'Actor'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_crew\n  WHERE title_crew.tconst = title_basics.tconst AND title_crew.job = 'Director'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.averageRating > 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE title_principals.tconst = title_basics.tconst AND title_principals.characters LIKE '%Jigsaw%'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_crew\n  WHERE title_crew.tconst = title_basics.tconst AND title_crew.directors LIKE '%James Wan%'\n)\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC\nLIMIT 5;\n\nThis SQL query will retrieve movies that are both horror and comedy, have a low number of"}
{"id": 21991, "query": "I am looking for movies with a great story, like Captain Phillips  (2013) and Sully  (2016) - any suggestions?", "history": ["Girls Trip (2017)"], "groundtruth": ["Army of Darkness (1992)", "Evil Dead II (1987)", "Evil Dead"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Drama' AND t1.startYear BETWEEN 2010 AND 2019\nAND t2.averageRating > 7 AND t2.numVotes > 10000\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE t1.tconst = title_principals.tconst AND category = 'Actress' AND job = 'Lead')\nAND NOT EXISTS (SELECT 1 FROM name_basics WHERE t1.primaryName = name_basics.primaryName)\n\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies with great stories, released between 2010 and 2019, with high ratings (average rating > 7 and num votes > 10000) and no leading actresses or duplicate titles in the database. The query also excludes movies with the same title and primary name as the user's preferred movie. The results will be ordered by average rating in descending order and start year in descending order.\n\nNote: This query is just a suggestion and may need to be optimized and tailored to the specific database and user preferences."}
{"id": 21992, "query": "im into horros and comedies do you have any suggestions", "history": ["Annabelle  (2014)", "Insidious  (2011)", "Superbad  (2007)", "Girls Trip (2017)"], "groundtruth": ["Super Troopers (2001)"], "output": "SELECT t.title_basics.title, t.title_basics.primaryTitle, t.title_basics.originalTitle, t.title_basics.genres, t.title_ratings.averageRating, t.title_ratings.numVotes, c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryName\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE t.genres IN ('horror', 'comedy')\nAND tr.averageRating > 6\nAND n.birthYear BETWEEN 1980 AND 1999\nAND c.job IN ('Actor', 'Actress')\nAND c.characters NOT IN ('')\n\nORDER BY t.title_basics.primaryTitle, t.title_ratings.averageRating DESC;\n\nThis SQL query will select movies that are in the horror and comedy genres, have an average rating above 6, were released between 1980 and 1999, and have actors or actresses in the crew. It will also exclude movies with empty character lists.\n\nThe query will join the title_basics, title_ratings, and name_basics tables to get the required information, and will use the BETWEEN operator to filter the birth years of the actors and actresses. The ORDER BY clause will sort the results by primary title and average rating in descending order.\n\nPlease note that this is just an example query and you may need to adjust it based on the specific requirements of your movie recommendation system."}
{"id": 22013, "query": "I'm good!  My brother is coming to visit and I want to queue up some good old fashioned monster movies for him.  Any suggestions?", "history": ["Along Came Polly", "The 40-Year-Old Virgin (2005)", "There's Something About Mary (1998)"], "groundtruth": ["Hall Pass"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nWHERE t1.genres ='monster' AND t2.averageRating > 7 AND t3.knownForTitles LIKE '%monster%'\nORDER BY t2.averageRating DESC, t1.startYear ASC;\n\nThis SQL query will retrieve movies with the \"monster\" genre, high average rating (above 7), and at least one known for title that contains the word \"monster\". The results will be ordered by average rating in descending order and start year in ascending order.\n\nNote that this query assumes that the \"monster\" genre is specified in the \"genres\" column of the \"title_basics\" table. If the genre information is stored elsewhere, the query will need to be modified accordingly. Additionally, the query only considers the primary name of the actors and directors, so if there are other important actors or directors in the movies, their information may not be included in the results."}
{"id": 22014, "query": "I'd love to see something similar to There's Something About Mary (1998)", "history": ["The Sandlot (1993)", "Stand by Me  (1986)", "The Goonies (1985)"], "groundtruth": ["Gremlins (1984)", "The Lost Boys (1987)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.primaryName, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Comedy' AND t1.startYear = 1998\nAND EXISTS (\n  SELECT 1\n  FROM name_basics n\n  JOIN title_crew c ON n.nconst = c.nconst\n  WHERE c.directors = 'Ben Stiller'\n)\nAND EXISTS (\n  SELECT 1\n  FROM name_basics n\n  JOIN title_principals p ON n.nconst = p.nconst\n  WHERE p.category = 'Actress' AND p.job = 'Lead'\n  AND n.birthYear = 1970 AND n.knownForTitles = 'There''s Something About Mary'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings tr\n  WHERE tr.tconst = t1.tconst AND tr.averageRating < 7\n)\nORDER BY t1.startYear, t1.runtimeMinutes;\n\nThis SQL query will retrieve movies that are comedies released in 1998, have a primary director named Ben Stiller, and have a lead actress born in 1970 who is known for the movie \"There's Something About Mary\". Additionally, the query will exclude movies with low average ratings. The result set will be ordered by release year and runtime minutes."}
{"id": 22016, "query": "I'm looking to watch a movie like The Goonies (1985). Know of any good ones?", "history": ["Saw  (2004)", "Cube  (1997)"], "groundtruth": ["The Cabin in the Woods", "The Killing Room (2009)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%adventure%' AND t1.startYear BETWEEN 1980 AND 1990\nAND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.title IN (SELECT t4.title FROM title_basics t4 WHERE t4.primaryTitle = 'The Goonies (1985)') AND t3.numVotes > 1000)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"The Goonies (1985)\" based on their genres and release year. It will also filter out movies that have low ratings (based on the average rating and number of votes). The query will join the \"title_basics\" and \"title_ratings\" tables to retrieve the movie titles, their primary titles, original titles, genre, start year, end year, runtime, and average rating. The \"title_crew\" and \"title_principals\" tables are not used in this query.\n\nThe query starts by selecting the desired columns from the \"title_basics\" table where the genre is \"adventure\" and the start year is between 1980 and 1990. It then joins the \"title_basics\" table with the \"title_ratings\" table on the \"tconst\" column to retrieve the average rating and number of votes for each movie.\n\nThe query then filters out movies that have low ratings by comparing the average rating of the movies in the \"title_ratings\" table with the average rating of the movies that the user has previously rated (i.e., the movies in the \"title_ratings\" table that have a title in the \"title_basics"}
{"id": 22019, "query": "I loved The Professional  (1981) and would love to see something similar", "history": ["Eraser  (1996)", "The Terminator (1984)"], "groundtruth": ["Shooter  (2007)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'The Professional'\nAND title_basics.isAdult = 0\nAND title_basics.startYear = 1981\nAND title_basics.endYear = 1981\nAND title_basics.runtimeMinutes > 90\nAND title_basics.genres LIKE '%Action%'\nAND name_basics.primaryName IN ('Jean Reno', 'Natalie Portman')\nAND title_crew.directors IN ('Luc Besson', 'Pierre Morel')\nAND title_principals.category IN ('Actor', 'Actress')\nAND title_principals.job IN ('Lead', 'Supporting')\nAND title_principals.characters LIKE '%hitman%'\n\n;\n\nThis SQL query uses the information provided by the user to find movies similar to \"The Professional\" (1981) with the following criteria:\n\n* Primary title: \"The Professional\" (1981)\n* Genres: Action\n* Start year: 1981\n* End year: 1981\n* Runtime: More than"}
{"id": 22021, "query": "I really like action films but not super hero movies", "history": ["Wolf Creek  (2005)", "Hostel  (2011)"], "groundtruth": ["Winchester (2018)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Action' AND title_basics.primaryTitle NOT IN (SELECT title FROM title_basics WHERE primaryTitle = 'The Dark Knight')\nAND title_ratings.numVotes > 10000\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE birthYear = 1970)\nAND title_crew.directors NOT IN (SELECT directors FROM title_crew WHERE directors = 'Christopher Nolan')\nAND title_principals.category NOT IN (SELECT category FROM title_principals WHERE category = 'Superhero')\nORDER BY title_ratings.averageRating DESC, title_principals.ordering ASC;\n\nThis SQL query will retrieve movies that are classified as action movies, have a minimum of 10,000 votes, and do not belong to the superhero genre. Additionally, it will exclude movies directed by Christopher Nolan and movies with primary actors born in 1970. The results will be ordered by average rating in descending order and then by ordering in ascending order."}
{"id": 22028, "query": "I really like romantic comedies like Knocked Up (2007)", "history": ["Joe Dirt (2001)", "Daddy's Home  (2015)"], "groundtruth": ["Joe Dirt 2: Beautiful Loser (2015)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%romantic comedy%'\nAND title_basics.startYear >= 2000\nAND title_basics.endYear <= 2019\nAND title_basics.runtimeMinutes >= 80\nAND title_basics.isAdult = 0\nAND name_basics.primaryName LIKE '%Judd Apatow%'\nOR name_basics.knownForTitles LIKE '%Judd Apatow%'\nOR title_crew.directors LIKE '%Judd Apatow%'\nOR title_crew.writers LIKE '%Judd Apatow%'\nOR title_principals.category LIKE '%Comedy%'\nOR title_principals.job LIKE '%Actor%'\nOR title_principals.characters LIKE '%Comedic%'\n\nORDER BY title_basics.startYear DESC, title_basics.endYear DESC, title_basics.runtimeMinutes DESC, title_basics.genres ASC;\n\nThis SQL query will retrieve movies that are romantic comedies, released between 2000 and 2019, have a"}
{"id": 22029, "query": "Hello there!  Yes, I do.  I like silly comedies like Daddy's Home  (2015) .", "history": ["Halloween  (1978)", "It (1990)"], "groundtruth": ["Winchester (2018)", "Wrong Turn (2003)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles,\n    c.title_crew.directors,\n    c.title_crew.writers,\n    p.title_principals.ordering,\n    p.title_principals.category,\n    p.title_principals.job,\n    p.title_principals.characters\nFROM \n    title_basics t\n    JOIN name_basics n ON t.title_basics.primaryTitle = n.primaryName\n    JOIN title_crew c ON t.title_basics.tconst = c.tconst\n    JOIN title_principals p ON t.title_basics.tconst = p.tconst\nWHERE \n    t.title_basics.isAdult = 0\n    AND t.title_basics.startYear >= 2010\n    AND t.title_basics.endYear <= 2020\n    AND t.title_basics.runtimeMinutes > 80\n    AND EXISTS (\n        SELECT \n            1\n        FROM \n            title_ratings tr\n        WHERE \n            tr.tconst = t.title_basics.tconst\n            AND tr.averageRating > 6\n            AND tr.numVotes > 1000\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_ratings tr2\n        WHERE \n            tr2.tconst = t.title_basics.t"}
{"id": 22031, "query": "I liked Dumb and Dumber (1994) and Superbad  (2007)", "history": ["Deadpool  (2016)", "Reservoir Dogs (1992)", "Predator  (1987)", "Drive  (2011)"], "groundtruth": ["Run  (1991)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.tconst = name_basics.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle IN ('Dumb and Dumber', 'Superbad')\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 10000\nAND name_basics.primaryName IN ('Jim Carrey', 'Jeff Daniels', 'Seth Rogen', 'Evan Goldberg')\nAND title_crew.directors IN ('Peter Farrelly', 'Bobby Farrelly', 'Ruben Fleischer', 'Joe and Anthony Russo')\nAND title_principals.category IN ('Comedy', 'Action', 'Adventure')\nAND title_principals.job IN ('Actor', 'Director', 'Writer')\nAND title_principals.characters LIKE '%of%';\n\nNote: The query is not optimized and may require adjustments to the database schema and data to produce accurate results. Additionally, the query is not considering the user's historical preferences, it's"}
{"id": 22032, "query": "i feel like watching something like Predator  (1987) or Drive  (2011)", "history": ["Fargo  (1996)", "Scream  (1996)", "It (1990)", "Friday the 13th  (1980)", "Pulp Fiction (1994)"], "groundtruth": ["The Usual Suspects (1995)", "Halloween  (1978)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_ratings.averageRating,\n    title_crew.directors,\n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.primaryTitle LIKE '%Predator%'\n    OR title_basics.primaryTitle LIKE '%Drive%'\n    AND title_ratings.numVotes > 1000\n    AND title_crew.directors LIKE '%the%Coen%brothers%'\n    OR title_principals.characters LIKE '%John%Goodman%'\n    OR title_principals.characters LIKE '%Billy%Bob%Thornton%'\n    AND title_basics.startYear BETWEEN 1980 AND 2011\n    AND title_basics.runtimeMinutes > 90\n    AND NOT title_basics.isAdult\nGROUP BY \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_ratings.averageRating,\n    title_crew.directors,\n    title_principals.characters\nHAVING \n    COUNT(DISTINCT title_basics.tconst) > 5\nORDER BY \n    title_ratings.averageRating DESC,\n    title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies that are similar to \"Predator\" (1987) and \"Drive\" (2011) based on their genre, directors, and cast, while also considering the user's historical preferences. The query will return a list of movies with their average ratings, primary titles, and directors, and will only include movies that have been rated by at least 10"}
{"id": 22033, "query": "Do you watch anything like Pulp Fiction (1994)?", "history": ["It (1990)", "30 Minutes or Less (2011)", "Zombieland (2009)"], "groundtruth": ["30 Days of Night  (2007)"], "output": "SELECT * FROM (\nSELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \ntitle_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.primaryTitle = 'Pulp Fiction' AND title_ratings.averageRating > 7 AND title_ratings.numVotes > 10000 \n) AS recommended_movies \nWHERE exists (\n    SELECT 1 FROM user_preferences \n    WHERE user_preferences.title = recommended_movies.title \n    AND user_preferences.startYear = recommended_movies.startYear \n    AND user_preferences.endYear = recommended_movies.endYear \n    AND user_preferences.genres = recommended_movies.genres\n)\nORDER BY recommended_movies.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"Pulp Fiction\" (1994) based on the user's preference history and historical ratings. The query will join multiple tables to retrieve information about the movies, such"}
{"id": 22034, "query": "I am in the mood for something like Zombieland (2009) or 30 Minutes or Less (2011)", "history": ["The Bodyguard  (1992)", "Waterworld (1995)", "Field of Dreams (1989)", "Dances with Wolves (1990)"], "groundtruth": ["Draft Day (2014)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.name, t2.birthYear, t2.primaryProfession, t3.category, t3.job, t4.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nWHERE t1.titleType ='movie'\nAND t1.originalTitle NOT LIKE '%(documentary|animation)'\nAND t2.averageRating > 6.5\nAND t3.primaryProfession IN ('Actor', 'Actress')\nAND t4.job IN ('Actor', 'Actress')\nAND t1.startYear BETWEEN 2000 AND 2020\nAND t1.runtimeMinutes BETWEEN 80 AND 120\nAND t2.numVotes > 10000\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t5\n  WHERE t5.tconst = t1.tconst AND t5.titleType ='movie' AND t5.startYear = t1.startYear\n  AND t5.runtimeMinutes = t1.runtimeMinutes\n  AND t5.genres = 'Comedy'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t6\n  WHERE t6.tconst = t1.tconst AND t6.titleType ='movie' AND t6.startYear = t1.startYear\n  AND t6.runtimeMinutes = t1.runtimeMinutes\n  AND t6.genres = 'Horror'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t7\n  WHERE t7.tconst = t1.tconst AND t7.titleType ='movie' AND t7.startYear = t1.startYear\n  AND t7.runtimeMinutes = t1.runtimeMinutes\n  AND t7.genres = 'Action'"}
{"id": 22037, "query": "Hello!  I'm good. I am in the mood for some sort of end of the world type movie.  Do you have any ideas?", "history": ["Beloved  (1998)", "The Color Purple  (1985)"], "groundtruth": ["Amistad  (1997)", "Precious ", "Driving Miss Daisy (1989)"], "output": "SELECT t1.title, t1.primaryTitle, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.name, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.nconst\nWHERE t1.genres LIKE '%Apocalyptic%' OR t1.genres LIKE '%Post-Apocalyptic%'\nAND t2.averageRating > (SELECT AVG(t4.averageRating) FROM title_ratings t4 WHERE t4.tconst IN (SELECT t5.tconst FROM title_ratings t5 WHERE t5.averageRating > 7 AND t5.numVotes > 1000))\nAND t3.knownForTitles NOT IN (SELECT nconst FROM name_basics WHERE birthYear < 1980)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are rated highly (average rating > 7 and more than 1000 votes) and have apocalyptic or post-apocalyptic themes. It will also filter out movies that are not from actors or directors born before 1980. The results will be sorted in descending order of average rating and start year."}
{"id": 22038, "query": "Yes actually. I really enjoyed the movie The Color Purple  (1985). Know any similar movies?", "history": ["Ferris Bueller's Day Off (1986)"], "groundtruth": ["The Freshman  (1990)", "License to Drive (1988)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.startYear = 1985 AND title_basics.endYear = 1986 AND title_basics.genres LIKE '%Drama%'\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'The Color Purple'))\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_basics.tconst = title_principals.tconst AND category = 'Actress' AND job = 'Lead')\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC\nLIMIT 5;\n\nThis SQL query will retrieve movies from the IMDb database that are similar to \"The Color Purple\" (1985) and have a high average rating. The query will also consider the user's preference history, which in this case is \"Ferris Bueller's Day Off\" (1986). The query will filter out movies that have an actress in a lead role, as the user may not be interested in movies with strong female leads. The results will be sorted by average rating in descending order and primary title in ascending order, with a limit of 5 movies."}
{"id": 22046, "query": "I am in the mood for something funny like Ace Ventura: Pet Detective (1994) or Superbad  (2007)", "history": ["Superbad  (2007)", "Grown Ups  (2010)", "Ace Ventura: Pet Detective (1994)"], "groundtruth": ["The Other Guys (2010)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.name, t2.primaryProfession, t3.category, t3.job, t4.characters \nFROM title_basics t1 \nJOIN title_ratings t2 ON t1.tconst = t2.tconst \nJOIN name_basics t3 ON t1.primaryName = t3.nconst \nJOIN title_crew t4 ON t1.directors = t4.tconst \nWHERE t1.genres LIKE '%comedy%' AND t2.averageRating > 7 AND t3.knownForTitles LIKE '%Superbad%') OR (t3.knownForTitles LIKE '%Grown Ups%') OR (t1.title LIKE '%Ace Ventura%')\nGROUP BY t1.title, t1.averageRating, t1.numVotes, t2.name, t2.primaryProfession, t3.category, t3.job, t4.characters\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have an average rating of at least 7, and have at least one of the following keywords in their title or known for titles: Superbad, Grown Ups, or Ace Ventura. The results will be grouped by movie title, average rating, number of votes, name of the primary actor/actress, their primary profession, category, job, and characters. Finally, the results will be sorted in descending order of average rating and number of votes."}
{"id": 22055, "query": "I like action movies like Armageddon  (1997)", "history": ["Superbad  (2007)", "Dumb and Dumber (1994)", "Hot Fuzz (2007)"], "groundtruth": ["Paul Blart: Mall Cop (2009)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nWHERE t1.genres = 'Action'\nAND t2.averageRating > (SELECT AVG(t4.averageRating) FROM title_ratings t4 WHERE t4.tconst = t1.tconst)\nAND t2.numVotes > (SELECT COUNT(t4.numVotes) FROM title_ratings t4 WHERE t4.tconst = t1.tconst)\nAND t3.knownForTitles LIKE '%Armageddon%'\nAND NOT EXISTS (SELECT 1 FROM title_principals t4 WHERE t4.tconst = t1.tconst AND t4.category = 'Actor' AND t4.job = 'Director')\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will select movies that are action movies, have a high average rating and a large number of votes, and are known for titles similar to \"Armageddon\". It will also exclude movies that have directors who are also actors. The results will be ordered by average rating and release year in descending order."}
{"id": 22057, "query": "I am in the mood for comedies today", "history": ["30 Minutes or Less (2011)", "Shaun of the Dead (2004)", "Zombieland (2009)"], "groundtruth": ["Wristcutters: A Love Story (2006)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t3.primaryName\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nWHERE t1.genres = 'Comedy'\nAND t2.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE nconst IN (SELECT nconst FROM name_basics WHERE primaryProfession = 'Actor'))\nAND t3.knownForTitles IN (SELECT title FROM name_basics WHERE primaryProfession = 'Actor')\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE tconst = t1.tconst AND category = 'Actor')\nAND NOT EXISTS (SELECT 1 FROM title_crew WHERE tconst = t1.tconst AND job = 'Director')\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE tconst = t1.tconst AND job = 'Actor')\nAND NOT EXISTS (SELECT 1 FROM title_crew WHERE tconst = t1.tconst AND job = 'Writer')\n\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are comedies, have high average ratings, and are not directed, written, or acted by the same people who have worked on the user's preferred movies. The query also excludes movies that have actors in common with the user's preferred movies, as well as movies that have directors or writers in common with the user's preferred movies. Finally, the query orders the results by average rating and start year in descending order."}
{"id": 22059, "query": "Would love to see a Ben Stiller movie like Meet the Parents (2000). Know any?", "history": ["Face/Off (1997)", "The Punisher  (2004)", "Drive  (2011)"], "groundtruth": ["Death Wish "], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.primaryTitle = 'Meet the Parents' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.primaryTitle = 'Face/Off' AND t3.numVotes > 1000)\nAND t1.genres LIKE '%Comedy%'\nAND NOT EXISTS (SELECT 1 FROM title_basics t3 WHERE t3.tconst = t1.tconst AND t3.primaryProfession = 'Ben Stiller')\nGROUP BY t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nHAVING AVG(t2.averageRating) > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.primaryTitle = 'The Punisher' AND t3.numVotes > 1000)\nORDER BY AVG(t2.averageRating) DESC;\n\nThis SQL query will retrieve movies that are similar to \"Meet the Parents\" (2000), have a high average rating, and are in the comedy genre. It will also exclude movies that have Ben Stiller as a primary profession. The query will use the historical preferences of the user, which are Face/Off (1997), The Punisher (2004), and Drive (2011), to filter the results. The final result will be a list of movies that are highly rated and similar to the user's preferred movies."}
{"id": 22062, "query": "Hello!  I am in the mood for a romantic comedy.  Something similar to When Harry Met Sally... (1989) .", "history": ["Scarface  (1983)"], "groundtruth": ["Carlito's Way (1993)", "Goodfellas (1990)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%romantic comedy%'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE primaryTitle = 'When Harry Met Sally... (1989)')\n)\nAND title_principals.characters NOT LIKE '%Al Pacino%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as romantic comedies, have high average ratings, and do not feature Al Pacino in the cast. The query uses a subquery to determine the average rating of movies similar to \"When Harry Met Sally... (1989)\" and compares it to the average rating of the movies in the main query. The result is a list of movies that are similar to \"When Harry Met Sally...\" and have high average ratings, but do not feature Al Pacino."}
{"id": 22070, "query": "Hello!  I am in the mood for a movie with animals.  Nothing too sad like Hachi: A Dog's Tale (2009) , something upbeat.", "history": ["Goodfellas (1990)", "The Terminator (1984)"], "groundtruth": ["Pirates of the Caribbean "], "output": "SELECT \n  title_basics.title,\n  title_basics.primaryTitle,\n  title_ratings.averageRating,\n  title_crew.directors,\n  title_principals.characters\nFROM \n  title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  JOIN title_crew ON title_basics.tconst = title_crew.tconst\n  JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n  title_basics.titleType ='movie'\n  AND title_basics.isAdult = '0'\n  AND title_ratings.numVotes > 1000\n  AND title_basics.runtimeMinutes > 60\n  AND title_basics.genres LIKE '%animals%'\n  AND title_basics.startYear > 1980\n  AND title_basics.endYear < 2020\n  AND NOT EXISTS (\n    SELECT \n      * \n    FROM \n      title_ratings \n    WHERE \n      title_ratings.tconst = title_basics.tconst \n      AND title_ratings.averageRating < 5\n  )\nGROUP BY \n  title_basics.title,\n  title_basics.primaryTitle,\n  title_ratings.averageRating,\n  title_crew.directors,\n  title_principals.characters\nHAVING \n  COUNT(DISTINCT title_principals.characters) > 1\n  AND COUNT(DISTINCT title_crew.directors) > 1\nORDER BY \n  title_ratings.averageRating DESC,\n  title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies with animals in the title, upbeat movies with good ratings, and movies with multiple characters and directors. The query will also exclude movies with low ratings and movies that are too old or too new. The result will be a list of movie recommendations based on the user's input and"}
{"id": 22073, "query": "Would love to see a movie like The Passion of the Christ (2004)", "history": ["Notebook ", "Drive  (2011)"], "groundtruth": ["The Nice Guys (2016)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t.title_ratings.averageRating, \n    t.title_ratings.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles\nFROM \n    title_basics t \nINNER JOIN \n    title_ratings tr ON t.title_basics.tconst = tr.tconst \nINNER JOIN \n    name_basics n ON t.title_basics.primaryTitle = n.primaryName \nWHERE \n    t.title_basics.title LIKE '%The Passion of the Christ%' \n    AND t.title_basics.startYear = 2004 \n    AND NOT EXISTS ( \n        SELECT \n            1 \n        FROM \n            title_basics t2 \n        WHERE \n            t2.title_basics.title = t.title_basics.primaryTitle \n            AND t2.title_basics.startYear = t.title_basics.startYear \n            AND t2.title_basics.genres = 'Drama' \n            AND t2.title_basics.primaryTitle NOT IN (SELECT primaryTitle FROM title_basics WHERE title_basics.tconst = t.title_basics.tconst) \n    ) \n    AND NOT EXISTS ( \n        SELECT \n            1 \n        FROM \n            title_basics t2 \n        WHERE \n            t2.title_basics.title = t.title_basics.primary"}
{"id": 22074, "query": "I have been in the mood to see a good Ryan Gosling movie like Drive  (2011). Know some good ones?", "history": ["Brighton Beach Memoirs  (1986)", "The Ten Commandments  (1956)"], "groundtruth": ["Submarine  (2010)", "Boyhood  (2014)"], "output": "SELECT t.title, t.titleType, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryName\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE t.genres = 'Drama' AND t.startYear = 2011 AND t.runtimeMinutes > 90\nAND tr.averageRating > 7 AND tr.numVotes > 1000\nAND n.birthYear = 1980 AND n.deathYear = 1980\nAND c.category = 'Actor' AND c.job = 'Lead'\nAND c.characters LIKE '%Ryan Gosling%'\nORDER BY tr.averageRating DESC, t.primaryTitle ASC;\n\nThis SQL query will retrieve movies from the IMDb database that meet the user's preferences and are similar to \"Drive\" (2011) starring Ryan Gosling. The query joins several tables to retrieve information about the movies, such as their titles, genres, release years, and ratings. It also filters the results based on the user's previous viewing history and their current preferences.\n\nThe query first joins the title_basics table with the title_ratings table to get the average rating and number of votes for each movie. It then joins the name_basics table with the title_basics table to get information about the actors and directors of each movie. Next, it joins the title_crew table with the title_basics table to get information about the crew members of each movie.\n\nThe query then applies filters to the results based on the user's preferences. It only selects movies that are classified as dramas, were released in 2011, and have a runtime of more than 90 minutes. It also only selects movies that have a high average rating (more than 7) and a large number of votes (more than 10"}
{"id": 22076, "query": "Like Brighton Beach Memoirs  (1986)", "history": ["The Taming of the Shrew", "Cleopatra  (1970)", "National Velvet ", "Cat on a Hot Tin Roof  (1958)"], "groundtruth": ["Who's Afraid of Virginia Woolf%3F  (1966)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.name, t2.birthYear, t2.primaryProfession, t3.job, t3.characters\nFROM title_basics t1\nJOIN name_basics t2 ON t1.primaryTitle = t2.title\nJOIN title_crew t3 ON t1.tconst = t3.tconst\nWHERE t1.titleType = 'feature'\nAND t1.isAdult = 'no'\nAND t1.startYear = 1986\nAND t1.runtimeMinutes > 90\nAND t2.knownForTitles LIKE '%Brighton Beach Memoirs%'\nAND t3.job = 'actor'\nAND t3.characters LIKE '%Shrew%'\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.name, t2.birthYear, t2.primaryProfession, t3.job, t3.characters\nHAVING COUNT(*) > (SELECT COUNT(*) FROM title_ratings WHERE user_id =? AND title_id = t1.tconst)\nORDER BY COUNT(*) DESC;\n\nThis SQL query will retrieve movies that are similar to \"Brighton Beach Memoirs\" (1986) and have a runtime of over 90 minutes, based on the user's preference history and the user's input. The query will also consider the user's historical ratings and the number of votes for each movie. The final result will be a list of movies that are most likely to be of interest to the user."}
{"id": 22078, "query": "i am in the mood for something like Drive  (2011) or Half Baked (1998)", "history": ["The Shining  (1980)", "A Clockwork Orange  (1971)", "Misery  (1990)"], "groundtruth": ["Dr. Strangelove (1964)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres,\ntitle_ratings.averageRating, title_ratings.numVotes,\nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.primaryTitle IN ('Drive', 'Half Baked')\nAND title_basics.genres IN ('Crime', 'Comedy')\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryName NOT IN ('Jack Nicholson', 'Steven King')\nAND NOT EXISTS (\n  SELECT 1 FROM title_basics\n  WHERE title_basics.tconst = title_principals.tconst\n  AND title_basics.category = 'Actors'\n  AND title_basics.job = 'Actor'\n  AND title_basics.characters = 'Jack Nicholson'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_basics\n  WHERE title_basics.tconst = title_principals.tconst\n  AND title_basics.category = 'Authors'\n  AND title_basics.job = 'Author'\n  AND title_basics.characters = 'Steven King'\n)\nORDER BY title_basics.startYear DESC, title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"Drive\" (2011) and \"Half Baked\" (1998) based on their genres, ratings, and historical preferences. The"}
{"id": 22083, "query": "A comedy like Say Anything... (1989) would be nice, but I'm open to other suggestions.", "history": ["Zack and Miri Make a Porno (2008)", "Superbad  (2007)", "Knocked Up (2007)", "Drive  (2011)"], "groundtruth": ["The Faculty (1998)"], "output": "SELECT \n  t.title_id, t.title, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres,\n  AVG(r.rating) AS avg_rating, COUNT(r.title_id) AS num_votes\nFROM \n  title_basics t\n  JOIN title_ratings r ON t.title_id = r.title_id\n  JOIN name_basics n ON t.directors = n.name_id OR t.writers = n.name_id\nWHERE \n  t.genres LIKE '%comedy%' AND \n  t.title NOT IN (SELECT title FROM title_principals WHERE category = 'actor') AND \n  NOT EXISTS (\n    SELECT 1 FROM title_principals \n    WHERE title_id = t.title_id AND category = 'actress'\n  )\nGROUP BY \n  t.title_id, t.title, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres\nHAVING \n  AVG(r.rating) > (SELECT AVG(r.rating) FROM title_ratings WHERE title_id IN (SELECT title_id FROM title_principals WHERE category = 'actor'))\nORDER BY \n  AVG(r.rating) DESC, num_votes DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have no actors in the leading roles, and have a higher average rating than the average rating of movies with actors in the leading roles. The query will also take into account the user's historical preferences, which are movies that they have previously rated. The result will be a list of movie recommendations that meet the user's preferences and are not in the leading roles of other movies."}
{"id": 22091, "query": "I am looking for some movie suggestions I am hoping you can help me out.", "history": ["Baby Driver  (2017)", "Tucker & Dale vs. Evil (2010)", "Drive  (2011)"], "groundtruth": ["Point Break  (2015)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t2.averageRating > (SELECT AVG(t6.averageRating) FROM title_ratings t6 WHERE t6.tconst IN (SELECT tconst FROM title_basics WHERE genres = 'Action' OR genres = 'Crime'))\nAND t1.genres IN ('Action', 'Crime')\nAND t1.startYear BETWEEN 2010 AND 2020\nAND t1.runtimeMinutes BETWEEN 90 AND 120\nAND t3.primaryProfession = 'Actor'\nAND t4.directors = 'Edgar Wright'\nAND t5.category = 'Supporting Actor'\nAND t5.job = 'Police Officer'\nAND t5.characters = 'Detective'\nGROUP BY t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nHAVING COUNT(DISTINCT t5.ordering) > 2\nORDER BY t2.averageRating DESC, t"}
{"id": 22093, "query": "I just watched Baby Driver  (2017) and I'm looking for similar titles!", "history": ["Despicable Me 3 (2017)"], "groundtruth": ["Black Panther (2018)", "Solo  (2008)"], "output": "SELECT t.title_id, t.title, t.original_title, t.start_year, t.genres, t.runtime_minutes, c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings tr ON t.title_id = tr.title_id\nJOIN name_basics n ON t.original_title = n.primary_name\nJOIN title_crew c ON t.title_id = c.title_id\nWHERE t.start_year = 2017 AND t.genres = 'Action' AND t.runtime_minutes > 120\nAND tr.average_rating > 7 AND tr.num_votes > 10000\nAND n.birth_year = 1980 AND n.death_year = NULL\nAND c.category = 'Actor' AND c.job = 'Lead'\nAND c.characters LIKE '%driver%'\nORDER BY t.start_year DESC, t.title ASC;\n\nThis SQL query is designed to recommend movies to the user based on their input and historical preferences. The query first joins the title_basics table with the title_ratings table to get the average rating and number of votes for each title. It then joins the title_basics table with the name_basics table to get the primary name and birth year of the actors.\n\nThe query then uses the AND operator to filter the results based on the user's input and historical preferences. It filters for titles that were released in 2017, have the genre 'Action', and have a runtime of over 120 minutes. It also filters for titles that have an average rating of over 7 and have been rated by at least 10,000 users.\n\nThe query then filters for actors who were born in 1980 and have no death year, and who have the job 'Lead' and have characters that match the word 'driver'. Finally, the query orders the results by start year in descending order and title in ascending order.\n\nThe result set will contain a list of movies that are similar to Baby Driver and have been well-received by users based on their historical preferences."}
{"id": 22097, "query": "Yes I would love some movie suggestions.", "history": ["Deadpool  (2016)"], "groundtruth": ["La La Land  (2016)", "Mad Max: Fury Road (2015)"], "output": "SELECT \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \n    title_ratings.averageRating, title_ratings.numVotes, \n    name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \n    title_crew.directors, title_crew.writers, \n    title_principals.ordering, title_principals.category, title_principals.job, \n    title_principals.characters \nFROM \n    title_basics \n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \n    JOIN title_crew ON title_basics.tconst = title_crew.tconst \n    JOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.isAdult = 0  -- exclude adult movies\n    AND title_ratings.numVotes > 1000  -- only consider movies with more than 1000 votes\n    AND title_ratings.averageRating > 7.5  -- only consider movies with high average rating\n    AND name_basics.birthYear = '1980'  -- only consider movies with directors/writers born in 1980 or later\n    AND title_principals.category = 'actor'  -- only consider movies with actors in leading roles\n    AND title_principals.job = 'leading'  -- only consider movies with leading actors\n    AND title_principals.characters LIKE '%superhero%'  -- only consider movies with superhero characters\n    AND title_basics.startYear > 2010  -- only consider movies released after 2010\n\n;"}
{"id": 22100, "query": "I'm in the mood for a horror movie.  Do you know of something I'd like?", "history": ["Blair Witch  (2016)", "The Blair Witch Project (1999)", "V/H/S"], "groundtruth": ["Chronicle ", "Creep  (2014)", "Cloverfield "], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t3.category, t3.job, t3.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nWHERE t1.genres = 'Horror'\nAND t2.averageRating > (SELECT AVG(t4.averageRating) FROM title_ratings t4 WHERE t4.tconst IN (SELECT t1.tconst FROM title_basics WHERE t1.genres = 'Horror'))\nAND t3.knownForTitles IN (SELECT t5.knownForTitles FROM name_basics t5 WHERE t5.primaryProfession = 'Director' AND t5.birthYear = 1970 AND t5.deathYear = 2020)\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE t1.tconst = title_principals.tconst AND title_principals.category = 'Actor' AND title_principals.job = 'Lead')\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis query will retrieve horror movies with high average ratings and a large number of votes, while also considering the user's historical preferences and excluding movies with lead actors. The query joins the title_basics, title_ratings, and name_basics tables to retrieve the desired information, and uses subqueries to filter the results based on the user's preferences and the director's birth and death years."}
{"id": 22101, "query": "Hello!  I'm in the mood to see a &quot;found footage&quot; type of movie.  You know, similar to Blair Witch  (2016)", "history": ["The Thing  (1982)", "The Thing  (2011)", "Elf  (2003)", "National Lampoon's Christmas Vacation (1989)"], "groundtruth": ["Jingle All the Way (1996)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Found Footage'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Adam Wingard%'\nAND title_principals.characters LIKE '%found footage%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as \"Found Footage\" and have more than 1000 votes, are directed by Adam Wingard, and have characters that involve found footage. The query will also order the results by the average rating in descending order.\n\nNote that this is just one possible approach to movie recommendation, and there are many other factors that could be considered to improve the accuracy and diversity of the recommendations. Additionally, the specific columns and tables in the IMDb database may vary depending on the version and source of the database."}
{"id": 22102, "query": "I know this will sound crazy, but my AC went out today and it's hot.  I want to watch a movie with SNOW.", "history": ["Memento  (2000)", "Gone Girl  (2014)"], "groundtruth": ["Mystic River  (2003)", "Zodiac  (2007)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres = 'Drama'\nAND title_basics.startYear = 2000\nAND title_basics.endYear = 2014\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 100000\nAND name_basics.primaryName LIKE '%Snow%'\nAND name_basics.knownForTitles LIKE '%Memento%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles\nHAVING COUNT(DISTINCT name_basics.primaryName) > 1\nORDER BY title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_"}
{"id": 22104, "query": "Hello!  It's going good.  Except, I really need a movie suggestion.", "history": ["Three Billboards Outside Ebbing, Missouri (2017)", "Catch Me If You Can (2002)", "Choke  (2008)"], "groundtruth": ["The Circle  (2017)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > 7\nAND title_principals.category = 'Actress'\nAND title_principals.job = 'Lead'\nAND title_principals.characters = 'Female'\nAND title_basics.startYear > 2000\nAND title_basics.endYear < 2020\nAND title_basics.runtimeMinutes > 90\nAND title_ratings.numVotes > 1000\n\n;\n\nThis SQL query retrieves movies that are comedies, have a high average rating, are led by female actresses, and have been released between 2000 and 2020, with a runtime of over 90 minutes and at least 1000 votes. The query joins multiple tables to retrieve additional information about the movies, such as the title, primary title, original title, genres, directors, writers, and the principal cast."}
{"id": 22106, "query": "I don't really have a favorite to be honest.  I'm in the mood for a sci-fi movie, maybe something comedic like Galaxy Quest (1999)", "history": [], "groundtruth": ["The Greatest Showman (2017)", "Les Mis\u00e9rables  (2012)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Science Fiction%' AND title_basics.isAdult = 0 AND title_ratings.numVotes > 1000\nAND title_principals.job = 'Actor' AND title_principals.characters LIKE '%comedic%'\nAND NOT EXISTS (SELECT 1 FROM user_preferences WHERE user_preferences.title = title_basics.title AND user_preferences.preference = 'Galaxy Quest (1999)')\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as science fiction, have a high number of votes, and are not adult-themed. It will also filter out movies that the user has already rated or marked as a preference. Finally, it will order the results by the average rating, with the highest-rated movies appearing first."}
{"id": 22108, "query": "HI. Can you recommend a good musical?", "history": ["Jurassic World (2015)", "The Martian  (2015)"], "groundtruth": ["Passengers  (2016)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Musical'\nAND title_basics.startYear >= 2015\nAND title_basics.endYear <= 2015\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.genres = 'Musical' AND title_basics.startYear >= 2015 AND title_basics.endYear <= 2015))\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_principals.characters LIKE '%Musical%'\nORDER BY title_basics.startYear, title_basics.primaryTitle;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. The query first joins the title_basics, name_basics, title_crew, and title_principals tables to get the required information about the movies. It then filters the results to only include movies that are class"}
{"id": 22117, "query": "Hello, what kind of family friendly films can you recommend?", "history": ["Allied (2016)", "Forever My Girl  (2018)", "Titanic  (1997)", "Titanic (2012)", "Romancing the Stone (1984)"], "groundtruth": ["Gone Girl  (2014)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, name_basics.primaryName,\ntitle_ratings.averageRating, title_ratings.numVotes,\ntitle_crew.directors, title_crew.writers,\ntitle_principals.category, title_principals.job, title_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.isAdult = 0  -- filter out adult movies\nAND title_ratings.numVotes > 1000  -- filter out movies with less than 1000 ratings\nAND title_ratings.averageRating > 7  -- filter out movies with average rating less than 7\nAND name_basics.primaryProfession = 'Actor'  -- filter out movies with primary profession other than Actor\nAND title_principals.category = 'Family'  -- filter out movies with category other than Family\n\nGROUP BY title_basics.title, title_basics.primaryTitle, name_basics.primaryName\n\nHAVING COUNT(DISTINCT title_principals.job) > 2  -- filter out movies with less than 3 main actors\n\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies that are family-friendly, have a high number of ratings, a high average rating, and at least three main actors. The query will also filter out adult movies and movies with primary profession other than Actor. The result set will include the title, primary title, primary name, average rating, number of votes, directors, writers, category, job, and characters for each movie that meets the specified criteria."}
{"id": 22119, "query": "I like action and romance!", "history": ["Sarah, Plain and Tall ", "The Seventh Sign (1988)", "The Prophecy (1995)", "Pulp Fiction (1994)", "The Dead Zone  (1983)"], "groundtruth": ["Allied (2016)"], "output": "SELECT t1.title_id, t1.title, t1.original_title, t1.start_year, t1.end_year, t1.runtime_minutes, t1.genres, t2.average_rating, t2.num_votes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nWHERE t1.genres LIKE '%action%' AND t1.genres LIKE '%romance%'\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t3\n  JOIN name_basics t4 ON t3.person_id = t4.person_id\n  WHERE t3.job = 'Director' AND t4.birth_year = '1980'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t5\n  JOIN name_basics t6 ON t5.person_id = t6.person_id\n  WHERE t5.job = 'Writer' AND t6.birth_year = '1980'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_crew t7\n  WHERE t7.department = 'Cinematography' AND t7.job = 'Director of Photography'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_crew t8\n  WHERE t8.department = 'Film Editing' AND t8.job = 'Editor'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t9\n  WHERE t9.job = 'Actor' AND t9.birth_year = '1980'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t10\n  WHERE t10.job = 'Actress' AND t10.birth_year = '1980'\n)\nORDER BY average_rating DESC, num_votes DESC\nLIMIT 10;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. It will select movies that are both action and romance,"}
{"id": 22123, "query": "I was thinking of seeing something with Christopher Walken tonight.  Any ideas?", "history": ["Wonder Woman  (2017)", "Justice League  (2017)", "Batman v Superman: Dawn of Justice (2016)"], "groundtruth": ["Avengers: Infinity War (2018)"], "output": "SELECT t.title_basics.title, t.title_basics.primaryTitle, t.title_basics.originalTitle, t.title_basics.isAdult, t.title_basics.startYear, t.title_basics.endYear, t.title_basics.runtimeMinutes, t.title_basics.genres, t.title_ratings.averageRating, t.title_ratings.numVotes, n.name_basics.primaryName, n.name_basics.birthYear, n.name_basics.deathYear, n.name_basics.primaryProfession, n.name_basics.knownForTitles\nFROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryName\nWHERE t.primaryTitle LIKE '%Christopher Walken%'\nAND t.genres LIKE '%Action%'\nAND t.genres LIKE '%Adventure%'\nAND t.startYear > 2010\nAND t.endYear < 2020\nAND n.birthYear > 1940\nAND n.deathYear < 2020\nAND n.primaryProfession = 'Actor'\nAND n.knownForTitles LIKE '%Wonder Woman%'\nAND n.knownForTitles LIKE '%Justice League%'\nAND n.knownForTitles LIKE '%Batman v Superman: Dawn of Justice%'\nORDER BY t.averageRating DESC, n.primaryName ASC;\n\nThis SQL query will retrieve movies that have Christopher Walken in the cast, are action or adventure movies, were released between 2010 and 2020, and have a primary profession of \"Actor\". The query will also consider the user's historical preferences, which include \"Wonder Woman\", \"Justice League\", and \"Batman v Superman: Dawn of Justice\". The results will be sorted by average rating in descending order and primary name in ascending order."}
{"id": 22124, "query": "I like action movies like Justice League  (2017) .", "history": ["Citizen Kane (1941)", "The Fountain (2006)"], "groundtruth": ["Phantom Thread (2017)"], "output": "SELECT \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \n    title_ratings.averageRating, title_ratings.numVotes, \n    name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \n    title_crew.directors, title_crew.writers, \n    title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.genres = 'Action'\n    AND title_ratings.averageRating >= 7\n    AND title_ratings.numVotes > 1000\n    AND name_basics.primaryProfession = 'Actor'\n    AND title_crew.directors = 'Zack Snyder'\n    AND title_principals.category = 'Actor'\n    AND title_principals.job = 'Superhero'\n    AND title_principals.characters = 'Batman'\n    AND title_basics.startYear = 2017\n    AND title_basics.endYear = 2017\n    AND title_basics.runtimeMinutes >= 120\n    AND NOT title_basics.isAdult\nORDER BY \n    title_ratings.average"}
{"id": 22128, "query": "Please do!  Horror, action or comedy?", "history": ["Star Wars: Episode VIII \u2013 The Last Jedi (2017)", "The Departed (2006)", "Star Wars"], "groundtruth": ["Law Abiding Citizen (2009)"], "output": "SELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, \n       AVG(averageRating) AS avgRating, \n       COUNT(DISTINCT nconst) AS numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE genres IN ('horror', 'action', 'comedy')\nAND startYear <= 2017\nAND endYear >= 2006\nGROUP BY tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres\nHAVING avgRating > 7 AND numVotes > 10000\nORDER BY avgRating DESC;\n\nThis SQL query joins the title_basics, title_ratings, name_basics, title_crew, and title_principals tables to retrieve movie information and their corresponding ratings. The WHERE clause filters the results to only include movies in the horror, action, or comedy genres, released between 2006 and 2017, and with at least 10000 votes and an average rating of more than 7. The GROUP BY clause groups the results by tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, and genres. Finally, the HAVING clause filters the results to only include movies with a high average rating and a large number of votes. The ORDER BY clause sorts the results in descending order by average rating."}
{"id": 22132, "query": "That's a good one, but he's seen it a few times.  Maybe something for older kids?  It's okay if it's PG-13.", "history": ["A Low Down Dirty Shame (1994)", "The Martian  (2015)", "The Usual Suspects (1995)", "Choke  (2008)"], "groundtruth": ["Trainspotting  (1996)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.nconst, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics \nINNER JOIN \n    title_ratings ON title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics ON title_basics.nconst = name_basics.nconst \nINNER JOIN \n    title_crew ON title_basics.tconst = title_crew.tconst \nINNER JOIN \n    title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.isAdult = 'No' \n    AND title_basics.startYear <= 2015 \n    AND title_basics.endYear >= 2000 \n    AND title_ratings.numVotes > 10000 \n    AND title_ratings.averageRating > 7 \n    AND name_basics.primaryProfession = 'Actor' \n    AND name_basics.knownForTitles NOT IN ('The Martian ("}
{"id": 22134, "query": "I have so many movies I like to see but no favorites. I am in the mood for a fantasy movie though. Like Harry Potter and the Deathly Hallows \u2013 Part 2 (2011)", "history": ["True Romance (1993)", "The Godfather (1972)", "Mafia! (1998)", "Goodfellas (1990)", "The Godfather Part II (1974)", "Pulp Fiction (1994)"], "groundtruth": ["The Freshman  (1990)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres LIKE '%Fantasy'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE genres LIKE '%Fantasy')\n)\nAND title_basics.startYear <= 2011\nAND title_basics.endYear >= 2011\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_principals\n    WHERE title_principals.tconst = title_basics.tconst\n    AND title_principals.category = 'actor'\n    AND title_principals.job = 'Harry Potter'\n)\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will return a list of movies that are in the fantasy genre, have a high average rating, and were released between 2011 and 2011, excluding any movies that feature an actor playing the role of Harry Potter. The query uses a subquery to filter out movies with low average ratings, and joins the title_basics and name_basics tables to retrieve additional information about the movies. The"}
{"id": 22138, "query": "I'm interested in seeing an old-fashioned cheesy road flick.  Something similar to The Cannonball Run (1981)", "history": ["Armageddon  (1997)", "It  (2017)", "Batman Forever (1995)", "The Dark Knight  (2008)"], "groundtruth": ["Deep Impact  (1998)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.primaryTitle = 'The Cannonball Run' \nAND title_basics.startYear BETWEEN 1970 AND 1990 \nAND title_basics.runtimeMinutes > 90 \nAND title_ratings.averageRating > 6 \nAND title_principals.category = 'actor' \nAND title_principals.job = 'lead' \nAND title_principals.characters LIKE '%cheesy%' \nAND name_basics.primaryName IN ('Burt Reynolds', 'Dom DeLuise', 'Sally Field', 'Adam Carolla') \nAND NOT title_basics.originalTitle LIKE '%3D%' \nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.aver"}
{"id": 22140, "query": "Looking for a nice chickflick movie for tomorrow. Some friends are coming over and I want to show the sappiest movie I can find", "history": ["Tron: Legacy (2010)", "Hell or High Water  (2016)"], "groundtruth": ["No Country for Old Men  (2007)", "True Grit  (2010)"], "output": "SELECT t.title, t.averageRating, t.numVotes, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, c.category, c.job, c.characters\nFROM title_basics t\nJOIN name_basics n ON t.primaryTitle = n.title\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE t.genres LIKE '%romance%' AND t.endYear > 2010 AND t.runtimeMinutes < 120\nAND tr.averageRating > 7 AND tr.numVotes > 1000\nAND n.primaryProfession = 'Actress'\nAND c.category = 'Actress'\nAND c.job = 'Lead'\nAND c.characters LIKE '%female%';\n\nThis SQL query will select movies that are classified as romance, released after 2010, and have a runtime of less than 120 minutes. It will also select movies that have an average rating of at least 7 and more than 1000 votes. Additionally, it will only select movies where the primary profession of the actresses is lead and the characters are female.\n\nThe query will join the title_basics, name_basics, title_ratings, and title_crew tables to get the required information. The WHERE clause will filter the results based on the user's preference history and the desired genre. The AND and OR operators are used to combine the different filters.\n\nNote that this is just one possible solution, and there may be other ways to write the query to achieve the same results."}
{"id": 22147, "query": "Hello!  My son just went on summer break and I'm thinking of watching some summer themed movies.  Something similar to Meatballs  (1979) .  Can you think of anything?", "history": ["Girls Trip (2017)", "A Nightmare on Elm Street (1984)", "Jigsaw (2017)", "Friday the 13th  (1980)"], "groundtruth": ["Uncle Buck"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, title_ratings.averageRating, title_ratings.numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.directors = title_crew.directors\nJOIN title_principals ON title_basics.ordering = title_principals.ordering\nWHERE title_basics.title LIKE '%summer%' AND title_basics.genres LIKE '%comedy%' AND title_ratings.averageRating > 6 AND title_ratings.numVotes > 1000\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_basics\n    WHERE title_basics.primaryTitle = title_basics.title AND title_basics.startYear = 1979\n)\nAND title_principals.category = 'actress'\nAND title_principals.job = 'lead'\nAND title_principals.characters LIKE '%female%';\n\nThis SQL query will retrieve movies that are similar to \"Meatballs\" (1979) and have a high average rating, are comedies, and have a summer theme. It will also exclude movies that are identical to \"Meatballs\" and have a start year of 1979. Additionally, it will only consider movies with at least one female lead actor and have a category of \"actress\" and job of \"lead\". Finally, it will only return movies with a minimum of 1000 votes and a minimum average rating of 6."}
{"id": 22150, "query": "I am looking to have a movie night with friends, would you have any suggestions?", "history": ["Steel Magnolias (1989)", "Fried Green Tomatoes (1991)", "The Notebook (2004)"], "groundtruth": ["I Am Sam (2001)"], "output": "SELECT \n  t.title_basics.title, \n  t.title_basics.primaryTitle, \n  t.title_basics.originalTitle, \n  t.title_basics.isAdult, \n  t.title_basics.startYear, \n  t.title_basics.endYear, \n  t.title_basics.runtimeMinutes, \n  t.title_basics.genres, \n  r.averageRating, \n  r.numVotes, \n  n.name_basics.primaryName, \n  n.name_basics.birthYear, \n  n.name_basics.deathYear, \n  n.name_basics.primaryProfession, \n  n.name_basics.knownForTitles\nFROM \n  title_basics t \n  JOIN title_ratings r ON t.title_basics.tconst = r.tconst \n  JOIN name_basics n ON t.title_basics.primaryName = n.name_basics.primaryName\nWHERE \n  t.title_basics.isAdult = 'no'  -- exclude adult movies\n  AND t.title_basics.genres LIKE '%comedy%'  -- filter by genre\n  AND r.averageRating > 7  -- filter by rating\n  AND n.name_basics.primaryProfession = 'actress'  -- filter by profession\n  AND t.title_basics.startYear BETWEEN 1980 AND 2010  -- filter by release year\n  AND t.title_basics.runtimeMinutes BETWEEN 90 AND 120  -- filter by runtime\nGROUP BY \n  t.title_basics.title, \n  t.title_basics.primaryTitle, \n  t.title_basics.originalTitle, \n  t.title_basics.isAdult, \n  t.title_basics.startYear, \n  t.title_basics.endYear, \n  t.title_basics.runtimeMinutes, \n  t.title_"}
{"id": 22152, "query": "I'm in the mood to see a tear jerker.  Something kind of like Steel Magnolias (1989)", "history": ["Mean Girls (2004)", "Saved! (2004)", "Election  (2005)"], "groundtruth": ["Thirteen  (2003)", "Easy A (2010)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nWHERE t1.genres = 'Drama' AND t1.title_basics.primaryTitle LIKE '%Jerker%' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.title_basics.tconst = t1.title_basics.tconst AND t3.numVotes > 1000)\nAND NOT EXISTS (SELECT 1 FROM title_principals t4 WHERE t4.title_basics.tconst = t1.title_basics.tconst AND t4.category = 'Actress' AND t4.job = 'Lead')\nAND NOT EXISTS (SELECT 1 FROM name_basics t5 WHERE t5.nconst = t1.title_basics.nconst AND t5.birthYear = 1980 AND t5.deathYear = 1980)\nGROUP BY t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nHAVING COUNT(DISTINCT t2.tconst) > 10\nORDER BY t2.averageRating DESC, t1.title_basics.primaryTitle ASC;\n\nThis SQL query will recommend movies to the user based"}
{"id": 22155, "query": "I like comedy and action", "history": ["Scream  (1996)", "Annabelle  (2014)", "The Sixth Sense (1999)"], "groundtruth": ["The Others  (2001)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.tconst = tr.tconst\n    JOIN name_basics n ON t.primaryTitle = n.primaryName\nWHERE \n    t.genres LIKE '%comedy%' AND t.genres LIKE '%action%'\nAND tr.averageRating > 7\nAND n.knownForTitles LIKE '%Scream%'\nAND n.knownForTitles LIKE '%Annabelle%'\nAND n.knownForTitles LIKE '%The Sixth Sense%'\nGROUP BY \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForT"}
{"id": 22158, "query": "Hey, you know any good horror flicks?", "history": ["Superman  (1978)", "Superman II (1980)", "The Dark Knight  (2008)"], "groundtruth": ["Guardians of the Galaxy  (2014)", "Spider-Man: Homecoming (2017)", "Guardians of the Galaxy Vol. 2 (2017)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.genres = 'Horror'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors NOT IN (SELECT nconst FROM name_basics WHERE primaryProfession = 'Actor')\nAND title_principals.job NOT IN (SELECT nconst FROM name_basics WHERE primaryProfession = 'Actor')\nAND title_principals.category NOT IN (SELECT nconst FROM name_basics WHERE primaryProfession = 'Actor')\nAND title_basics.startYear BETWEEN 1970 AND 2020\nAND title_basics.endYear BETWEEN 1970 AND 2020\nAND title_basics.runtimeMinutes > 80\nAND title_basics.isAdult = 0\n\n;\n\nThis SQL query will retrieve horror movies with a high number of ratings, a diverse cast and crew, and a runtime of at least 80 minutes. The query will also exclude movies that have actors in the crew or cast, as well as movies that are not within the specified start and end years. The user's preference history will also be taken into account, with the query returning movies that are similar to the movies the user has previously rated."}
{"id": 22159, "query": "I like everything.  You have any good action super hero movies?", "history": ["Love Stinks  (1999)", "True Romance (1993)"], "groundtruth": ["I Love You to Death (1990)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'action' AND t1.titleType ='superhero'\nAND t2.averageRating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst\n                         FROM title_basics t4\n                         WHERE t4.primaryTitle = 'Love Stinks' OR t4.primaryTitle = 'True Romance')\n)\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as \"action\" and \"superhero\" and have an average rating higher than the average rating of the user's preferred movies (\"Love Stinks\" and \"True Romance\"). The query will also return the title, primary title, original title, genre, start year, end year, runtime, and average rating of the recommended movies."}
{"id": 22161, "query": "Good! I like dark comedies, like Fargo  (1996),  do you have any recommendations?", "history": ["Big  (1988)", "The Parent Trap  (1998)", "The Hot Chick (2002)", "Freaky Friday  (2003)", "White Chicks (2004)"], "groundtruth": ["The Change-Up (2011)"], "output": "SELECT t1.title_basics.primaryTitle, t1.title_basics.startYear, t1.title_basics.runtimeMinutes, t2.name_basics.primaryName, t3.title_crew.directors, t4.title_principals.characters\nFROM title_basics t1\nJOIN name_basics t2 ON t1.title_basics.primaryTitle = t2.name_basics.knownForTitles\nJOIN title_crew t3 ON t1.title_basics.tconst = t3.title_crew.tconst\nJOIN title_principals t4 ON t1.title_basics.tconst = t4.title_principals.tconst\nWHERE t1.genres = 'dark comedy'\nAND t2.primaryProfession = 'actor'\nAND t3.directors = 'Coen brothers'\nAND t4.characters = 'Frances McDormand'\nORDER BY t1.startYear DESC, t1.runtimeMinutes ASC;\n\nThis SQL query joins four tables: title_basics, name_basics, title_crew, and title_principals to retrieve information about movies that are dark comedies, have the primary profession of acting, were directed by the Coen brothers, and have Frances McDormand as a character. The start year and runtime minutes are also sorted in descending order and ascending order, respectively.\n\nNote that this query is just an example and may need to be modified to fit the specific requirements of the IMDb database and the user's preferences."}
{"id": 22162, "query": "I'm doing well, thanks!  I'm interested in finding a body swap type of movie.  Something similar to Freaky Friday  (2003) .  Can you think of anything?", "history": ["Halloween  (1978)", "A Nightmare on Elm Street (1984)"], "groundtruth": ["Phantasm  (1979)", "Rosemary's Baby  (1968)", "It's Alive  (1974)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.primaryName, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN name_basics t2 ON t1.primaryTitle = t2.primaryName\nWHERE t1.genres LIKE '%body%swap%' AND t1.startYear BETWEEN 1970 AND 2020\nAND EXISTS (\n  SELECT 1\n  FROM title_ratings tr\n  JOIN name_basics n ON tr.title = n.primaryName\n  WHERE n.birthYear = 1980 AND tr.averageRating > 6.5\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals tp\n  JOIN name_basics np ON tp.category = np.primaryName\n  WHERE np.birthYear = 1970 AND tp.job = 'Director'\n)\nORDER BY t1.startYear DESC, t1.runtimeMinutes ASC;\n\nThis SQL query will retrieve movies that are body swap movies, released between 1970 and 2020, have a rating of at least 6.5, and do not have a director born in 1970. The query will also order the results by release year in descending order and runtime in ascending order.\n\nPlease note that this is just one possible solution, and there may be other ways to achieve the desired results. Additionally, the query is not executed and the results are not shown, as it is just a single query."}
{"id": 22169, "query": "Sinister  (2012) is my favorite, do you have some recommendations", "history": ["La La Land  (2016)", "10 Things I Hate About You (1999)"], "groundtruth": ["The Big Sick (2017)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.nconst = name_basics.nconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.primaryTitle = 'Sinister' \nAND title_ratings.averageRating > (\n    SELECT \n    AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.primaryTitle = 'La La Land')\n)\nAND title_basics.endYear > 2012\nAND title_basics.genres LIKE '%horror%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"Sinister\" (2012) and have a high average rating, based on the user's historical preferences (i.e., \"La La Land\" (2016) and \"10 Things I Hate About You\" (1999)). The query will also filter out movies that are not horror movies or were released before 2012. Finally, the query will order the results by the average rating in descending order."}
{"id": 22175, "query": "maybe a romantic comedy like How to Lose a Guy in 10 Days (2003)", "history": ["Steel Magnolias (1989)", "9 to 5  (1980)"], "groundtruth": ["The Best Exotic Marigold Hotel"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \ntitle_basics.primaryTitle LIKE '%Romantic Comedy%' AND \ntitle_basics.startYear BETWEEN 1980 AND 2003 AND \ntitle_ratings.averageRating > 6 AND \ntitle_ratings.numVotes > 1000 AND \nname_basics.primaryName IN ('Kate Hudson', 'Meg Ryan', 'Sandra Bullock') AND \ntitle_crew.directors IN ('Garry Marshall', 'Nora Ephron', 'Roger Michell') AND \ntitle_principals.category IN ('Actress', 'Actor', 'Director') AND \ntitle_principals.job IN ('Lead', 'Supporting') AND \ntitle_principals.characters LIKE '%romantic%';\n\nThis SQL query will retrieve movies that are romantic comedies, released between 1980 and 2"}
{"id": 22182, "query": "Yes, it was!", "history": ["Minority Report  (2002)", "Top Gun (1986)", "Interview with the Vampire  (1994)", "Magnolia  (1999)"], "groundtruth": ["Risky Business (1983)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\n\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \n\nWHERE title_basics.genres LIKE '%Science Fiction%' \nAND title_ratings.averageRating > 7.5 \nAND title_ratings.numVotes > 10000 \nAND name_basics.primaryName NOT LIKE '%Unknown%' \nAND title_crew.directors NOT LIKE '%Unknown%' \nAND title_principals.category NOT LIKE '%Unknown%' \n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\n\nHAVING COUNT(DISTINCT title_principals.job) > 2"}
{"id": 22185, "query": "I don't think I'm in the mood for that, though.  I was thinking of going to see a movie at the theaters.  Do you have a suggestion?", "history": ["The Shining  (1980)", "The Karate Kid (1984)", "Psycho  (1960)"], "groundtruth": ["The Birds  (1963)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Horror'\nAND title_ratings.averageRating > 7\nAND name_basics.primaryName NOT IN ('Jack Nicholson', 'Ralph Macchio')\nAND title_crew.directors NOT IN ('Stanley Kubrick', 'John Carpenter')\nAND title_principals.characters NOT IN ('Danny Torrance', 'Daniel LaRusso')\nAND title_basics.startYear > 1970\nAND title_basics.endYear < 2020\nAND title_basics.runtimeMinutes > 90\nAND title_basics.isAdult = 0\n\n;\n\nThis SQL query uses the information provided in the user's preference history to suggest movies that meet their criteria. It first joins the title_basics table with the title_ratings table to get the average rating of the movies. It then joins the name_basics table to get the primary name of the actors and directors. Next, it uses the NOT IN operator to exclude movies that feature Jack Nicholson or Ralph Macchio, or were directed by Stanley Kubrick or John Carpenter. It also excludes movies that have Danny Torrance or Daniel LaRusso as characters. Finally, it filters the results to only include movies that were released between 1970 and 2020, have a runtime of over 90 minutes, and are not adult-rated. The result is a list of movies that meet the user's preferences and are"}
{"id": 22190, "query": "Can you recommend a good movie for me?", "history": ["Hangover (2010)", "Old School  (2003)"], "groundtruth": ["Super Troopers (2001)", "EuroTrip (2004)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t2.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE genres = 'Comedy'))\nAND t1.genres = 'Comedy'\nAND t5.category = 'Actor'\nAND t5.job = 'Lead'\nAND t5.characters = 'Male'\nAND t4.directors = 'Todd Phillips'\nAND t3.birthYear = 1975\nAND t3.deathYear IS NULL\nAND t2.numVotes > 10000\nORDER BY t2.averageRating DESC, t1.startYear ASC;\n\nThis SQL query recommends movies based on the user's preference history, which includes 'Hangover (2010)' and 'Old School (2003)'. The query first joins the title_basics, title_ratings, name_basics, title_crew, and title_principals tables to get information about the movies. It then filters the results based on the user's preference for comedies, the director Todd Phillips, and actors born in 1975. Finally, it orders the results by the average rating and start year."}
{"id": 22192, "query": "I'm in the mood for a suspenseful movie.", "history": ["Blow  (2001)", "Fear and Loathing in Las Vegas  (1998)", "The Hangover (2009)", "The Rum Diary  (2011)"], "groundtruth": ["Brazil  (1985)"], "output": "SELECT \n  t.title_id, \n  t.title, \n  t.primaryTitle, \n  t.originalTitle, \n  t.isAdult, \n  t.startYear, \n  t.endYear, \n  t.runtimeMinutes, \n  t.genres, \n  c.category, \n  j.job, \n  c.characters\nFROM \n  title_basics t \n  JOIN title_ratings tr ON t.title_id = tr.title_id \n  JOIN name_basics n ON t.primaryTitle = n.primaryName \n  JOIN title_crew c ON t.title_id = c.title_id \n  JOIN title_principals j ON t.title_id = j.title_id \nWHERE \n  t.genres LIKE '%thriller%' \n  AND t.startYear BETWEEN 2000 AND 2019 \n  AND tr.averageRating > 7 \n  AND n.birthYear BETWEEN 1950 AND 1980 \n  AND c.category = 'acting' \n  AND j.job = 'lead' \n  AND t.primaryTitle NOT IN (SELECT n.primaryName FROM name_basics n WHERE n.deathYear IS NOT NULL)\nGROUP BY \n  t.title_id, \n  t.title, \n  t.primaryTitle, \n  t.originalTitle, \n  t.isAdult, \n  t.startYear, \n  t.endYear, \n  t.runtimeMinutes, \n  t.genres, \n  c.category, \n  j.job, \n  c.characters\nHAVING \n  COUNT(DISTINCT j.job) > 1 \n  AND COUNT(DISTINCT c.category) > 1\nORDER BY \n  t.startYear DESC, \n  t.title ASC;\n\nThis SQL query will retrieve movies that are thrillers, released between 2000 and 2019, have an average rating above 7,"}
{"id": 22200, "query": "I really liked Gone Girl  (2014) and The Girl with the Dragon Tattoo  (2011) - looking for something like that", "history": ["This Is Spinal Tap (1984)", "Super Size Me (2004)"], "groundtruth": ["Man on Wire (2008)"], "output": "SELECT * FROM (\n  SELECT title_basics.tconst, title_basics.titleType, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \n       AVG(title_ratings.averageRating) AS avg_rating, COUNT(title_ratings.numVotes) AS num_votes\n  FROM title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  WHERE title_basics.primaryTitle IN ('Gone Girl', 'The Girl with the Dragon Tattoo')\n  GROUP BY title_basics.tconst\n) AS liked_titles\nJOIN (\n  SELECT nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles\n  FROM name_basics\n  WHERE primaryName IN ('David Fincher', 'Ben Affleck', 'Rosamund Pike', 'Daniel Craig')\n  GROUP BY nconst\n) AS preferred_directors\nON liked_titles.tconst = preferred_directors.nconst\nJOIN (\n  SELECT tconst, job, category\n  FROM title_principals\n  WHERE job IN ('Director', 'Writer')\n  GROUP BY tconst\n) AS crew_jobs\nON liked_titles.tconst = crew_jobs.tconst\nWHERE crew_jobs.job = 'Director'\nORDER BY avg_rating DESC, num_votes DESC;\n\nThis SQL query will retrieve movies that are similar to \"Gone Girl\" and \"The Girl with the Dragon Tattoo\" based on their title, genre, and director. The query will also consider the user's historical preferences, which are stored in the title_ratings and name_basics tables. The query will join these tables on the tconst column, which is a common column between the tables. The query will then group the results by the tconst column and calculate the average rating and number of votes for each movie. Finally, the query will join the title_principals table to get the job"}
{"id": 22204, "query": "comedies and documentaries mostly", "history": ["Coco  (2017)"], "groundtruth": ["Avengers: Infinity War (2018)"], "output": "SELECT t1.title_basics.primaryTitle, t1.title_basics.startYear, t1.title_basics.runtimeMinutes, t2.name_basics.primaryName, t3.title_crew.directors, t4.title_principals.characters\nFROM title_basics t1\nJOIN name_basics t2 ON t1.primaryTitle = t2.primaryName\nJOIN title_crew t3 ON t1.tconst = t3.tconst\nJOIN title_principals t4 ON t1.tconst = t4.tconst\nWHERE t1.genres LIKE '%comedy%' AND t1.genres LIKE '%documentary%' AND t2.birthYear > 1980 AND t2.deathYear < 2020\nAND NOT EXISTS (\n  SELECT 1 \n  FROM title_ratings \n  WHERE t1.tconst = title_ratings.tconst AND title_ratings.averageRating < 7\n)\nAND NOT EXISTS (\n  SELECT 1 \n  FROM title_ratings \n  WHERE t1.tconst = title_ratings.tconst AND title_ratings.numVotes < 1000\n)\nAND t4.characters NOT LIKE '%Coco%'\nORDER BY t1.startYear DESC, t1.runtimeMinutes ASC\nLIMIT 5;\n\nThis SQL query will retrieve movies that are primarily comedies and documentaries, have a birth year of the primary name actor/actress between 1980 and 2020, have a minimum of 500 votes and an average rating of at least 7, and do not have the word \"Coco\" in the characters. The results will be sorted by start year in descending order and runtime minutes in ascending order, with a limit of 5 movies."}
{"id": 22208, "query": "i need a good movie to watch with my kid", "history": ["Angels & Demons  (2009)", "National Treasure  (2004)"], "groundtruth": ["Cube  (1997)", "The Witch  (2015)", "The Circle  (2015)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.genres, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = '0' -- exclude adult movies\nAND title_basics.startYear >= 2000 -- exclude movies released before 2000\nAND title_basics.endYear <= 2020 -- exclude movies released after 2020\nAND title_basics.runtimeMinutes > 60 -- exclude short movies\nAND title_basics.genres LIKE '%adventure%' -- exclude movies that are not adventure\nAND title_ratings.averageRating > 6.5 -- exclude movies with low ratings\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE title_principals.tconst = title_basics.tconst AND title_principals.category = 'actor' AND title_principals.job = 'director'\n) -- exclude movies that have the same director as one of the user's preferred movies\n\nORDER BY title_basics.startYear, title_basics.runtimeMinutes, title_basics.averageRating DESC;\n\nThis SQL query will retrieve movies that meet the user's input and preference history criteria, and exclude movies that have the same director as one of the user's preferred movies. The query will also order the results by release year, runtime, and average rating in descending order."}
{"id": 22209, "query": "horrors and thrillers and mysteries", "history": ["Inception (2010)", "Doctor Strange  (2016)", "The Avengers  (2012)"], "groundtruth": ["Avengers: Infinity War (2018)", "Thor: Ragnarok (2017)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    title_crew.directors,\n    title_crew.writers,\n    title_principals.ordering,\n    title_principals.category,\n    title_principals.job,\n    title_principals.characters\nFROM\n    title_basics\nINNER JOIN\n    title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN\n    name_basics ON title_basics.tconst = name_basics.tconst\nINNER JOIN\n    title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN\n    title_principals ON title_basics.tconst = title_principals.tconst\nWHERE\n    title_basics.genres LIKE '%horror%'\n    AND title_basics.genres LIKE '%thriller%'\n    AND title_basics.genres LIKE '%mystery%'\n    AND title_ratings.numVotes > 10000\n    AND title_ratings.averageRating > 7\n    AND name_basics.primaryName IN (SELECT primaryName FROM name_basics WHERE birthYear > 1980 AND deathYear < 2020)\n    AND title_crew.directors IN (SELECT directors FROM title_crew WHERE directors LIKE '%Christopher Nolan%')\n    AND title_principals.category IN (SELECT category FROM title_principals WHERE category LIKE '%actor%')\nGROUP BY\n    title_basics.title"}
{"id": 22211, "query": "I need a funny movie to watch with my ex", "history": ["American Outlaws (2001)", "Desperado  (1995)", "The Magnificent Seven  (2016)", "True Grit  (2010)"], "groundtruth": ["3:10 to Yuma  (1957)"], "output": "SELECT \n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n    JOIN name_basics n ON t.title_basics.directors = n.name_basics.primaryName\nWHERE \n    t.title_basics.genres = 'Comedy'\n    AND t.title_ratings.averageRating > 6.5\n    AND t.title_ratings.numVotes > 1000\n    AND n.name_basics.primaryProfession = 'Actor'\n    AND n.name_basics.knownForTitles NOT IN (SELECT k.knownForTitles \n                                             FROM name_basics k \n                                             WHERE k.primaryName = n.primaryName)\nGROUP BY \n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProf"}
{"id": 22213, "query": "I really liked the movie Mission: Impossible  (1996). Can you suggest any other movies like it?", "history": ["Man on Wire (2008)"], "groundtruth": ["I Am Big Bird: The Caroll Spinney Story (2014)", "Jihad: A Story of the Others (2015)"], "output": "SELECT \n    t.title, t.titleType, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, \n    n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles, \n    c.directors, c.writers, c.ordering, c.category, c.job, c.characters\nFROM \n    title_basics t\n    JOIN name_basics n ON t.tconst = n.nconst\n    JOIN title_crew c ON t.tconst = c.tconst\nWHERE \n    t.titleType = 'feature film'\n    AND t.primaryTitle = 'Mission: Impossible'\n    AND t.startYear = 1996\n    AND t.endYear = 1996\n    AND EXISTS (\n        SELECT \n            1 \n        FROM \n            title_ratings tr \n        WHERE \n            tr.tconst = t.tconst \n            AND tr.averageRating > 7\n            AND tr.numVotes > 1000\n    )\n    AND NOT EXISTS (\n        SELECT \n            1 \n        FROM \n            title_principals tp \n        WHERE \n            tp.tconst = t.tconst \n            AND tp.category = 'actor'\n            AND tp.job = 'lead'\n            AND tp.characters = 'Tom Cruise'\n    )\n    AND NOT EXISTS (\n        SELECT \n            1 \n        FROM \n            title_principals tp \n        WHERE \n            tp.tconst = t.tconst \n            AND tp.category = 'actor'\n            AND tp.job ='supporting'\n            AND tp.characters = 'Ving Rhames'\n    )\n    AND NOT EXISTS (\n        SELECT \n            1 \n        FROM \n            title_principals tp \n        WHERE \n            tp.tconst = t.tconst \n            AND tp.category"}
{"id": 22215, "query": "I like crime thrillers", "history": ["The Rock  (1996)", "Escape from Alcatraz  (1979)", "Con Air (1997)", "The Shawshank Redemption (1994)"], "groundtruth": ["The Green Mile  (1999)"], "output": "SELECT t.title, t.tconst, t.startYear, t.runtimeMinutes, t.genres, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, c.job, c.characters\nFROM title_basics t\nJOIN name_basics n ON t.primaryTitle = n.primaryName\nJOIN title_crew c ON t.tconst = c.directors\nWHERE t.genres = 'crime' AND t.startYear >= 1990 AND t.startYear <= 2010\nAND (t.title NOT IN (SELECT title FROM title_ratings WHERE user_id = 123456789) OR t.numVotes > 10000)\nGROUP BY t.title, t.tconst, t.startYear, t.runtimeMinutes, t.genres, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, c.job, c.characters\nHAVING COUNT(DISTINCT n.primaryName) > 2 AND COUNT(DISTINCT c.job) > 2\nORDER BY COUNT(DISTINCT n.primaryName) DESC, COUNT(DISTINCT c.job) DESC;\n\nThis SQL query uses the IMDb database schema provided in the question to generate movie recommendations for a user who has expressed a preference for crime thrillers. The query first joins the title_basics, name_basics, and title_crew tables to retrieve information about the movies and their directors, writers, and actors.\n\nThe query then filters the results to only include movies that are crime thrillers, were released between 1990 and 2010, and have more than 10,000 votes in the title_ratings table (to ensure that the movies are popular and well-rated).\n\nThe query then groups the results by movie title, and counts the number of distinct directors, writers, and actors for each movie. The HAVING clause filters out movies that have too few or too many directors, writers, or actors, as these may be less interesting or less well-made movies.\n\nFinally, the query orders the"}
{"id": 22217, "query": "I'm in the mood to see a fantasy movie, something that my 11-year old can watch with me.", "history": ["Jurassic Park", "The Adventures of Tintin  (2011)", "Jurassic Park  (1993)", "Back to the Future (1985)", "Indiana Jones and the Last Crusade (1989)"], "groundtruth": ["Indiana Jones and the Kingdom of the Crystal Skull (2008)"], "output": "SELECT \n    t.title_basics.primaryTitle,\n    t.title_basics.startYear,\n    t.title_basics.runtimeMinutes,\n    t.title_ratings.averageRating,\n    t.title_crew.directors,\n    t.title_principals.characters\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.tconst = tr.tconst\n    JOIN name_basics n ON t.primaryName = n.primaryName\n    JOIN title_crew c ON t.tconst = c.tconst\n    JOIN title_principals p ON t.tconst = p.tconst\nWHERE \n    t.genres = 'Fantasy'\n    AND t.startYear >= 2000\n    AND t.runtimeMinutes < 120\n    AND EXISTS (\n        SELECT \n            1\n        FROM \n            title_ratings tr2\n        WHERE \n            tr2.tconst = t.tconst\n            AND tr2.numVotes > 10000\n            AND tr2.averageRating > 7\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_ratings tr3\n        WHERE \n            tr3.tconst = t.tconst\n            AND tr3.numVotes > 10000\n            AND tr3.averageRating < 5\n    )\nGROUP BY \n    t.title_basics.primaryTitle,\n    t.title_basics.startYear,\n    t.title_basics.runtimeMinutes\nORDER BY \n    t.title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are fantasy, released after 2000, have a runtime of less than 120 minutes, and have a high average rating (>7) and a large number of votes (>10000). It will also exclude movies with a low average rating (<5). The result will be a list of movies that match the user's input and preference history."}
{"id": 22218, "query": "I'm good!  I'm looking for an adventure film, something like Indiana Jones and the Last Crusade (1989)", "history": ["The Amityville Horror  (1979)"], "groundtruth": ["Winchester (2018)", "Tucker & Dale vs. Evil (2010)", "Come Back to Me  (2014)", "A Quiet Place (2018)"], "output": "SELECT t1.title_id, t1.title, t1.startYear, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nWHERE t1.genres LIKE '%adventure%' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.title_id IN (SELECT t4.title_id FROM title_basics t4 WHERE t4.primaryTitle = 'The Amityville Horror'))\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movie recommendations based on the user's input and their historical preferences. The query will first select all movies with the \"adventure\" genre from the \"title_basics\" table. Then, it will join the \"title_basics\" table with the \"title_ratings\" table to get the average rating and number of votes for each movie.\n\nThe query will then filter the results to only include movies that have a higher average rating than the average rating of \"The Amityville Horror\" (1979), which is the only movie in the user's preference history. Finally, the results will be sorted in descending order by average rating and start year.\n\nNote that this query assumes that the \"title_basics\" table has a column named \"primaryTitle\" to store the primary title of each movie, and that the \"title_ratings\" table has a column named \"title_id\" to store the ID of each movie. Additionally, the query uses the \"LIKE\" operator to match movies with the \"adventure\" genre, and the \"IN\" operator to select the title IDs of movies that are in the user's preference history."}
{"id": 22243, "query": "I like dramas like Forrest Gump (1994) and Saving Private Ryan (1998)", "history": ["Gone Girl  (2014)", "The Girl on the Train  (2016)", "Murder on the Orient Express (2017)"], "groundtruth": ["L.A. Confidential  (1997)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE \ntitle_basics.genres = 'Drama'\nAND title_basics.startYear BETWEEN 1990 AND 2018\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 10000\nAND name_basics.primaryName NOT IN ('Forrest Gump', 'Saving Private Ryan')\nAND NOT EXISTS (\n  SELECT \n  * \n  FROM \n  title_principals \n  WHERE \n  title_principals.category = 'Actress' AND \n  title_principals.job = 'Lead' AND \n  title_principals.characters = 'Gone Girl'\n)\nAND"}
{"id": 22257, "query": "Hy, my friend. Long time no see. How are you doing? Yesterday I watched an awesome movie with my husband Murder on the Orient Express (2017) . Can you recommend something simmilar?", "history": ["The Hangover Part II (2011)", "Game Night (2018)", "The Hangover Part III (2013)", "The Hangover (2009)"], "groundtruth": ["Baywatch  (2017)", "The Lego Batman Movie (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN name_basics ON title_basics.tconst = name_basics.nconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.primaryTitle = 'Murder on the Orient Express (2017)' \nAND title_basics.genres IN ('Mystery', 'Crime', 'Drama') \nAND title_basics.startYear BETWEEN 2010 AND 2020 \nAND title_basics.runtimeMinutes BETWEEN 90 AND 120 \nAND name_basics.primaryProfession = 'Actor' \nAND title_crew.directors IN ('Kenneth Branagh', 'Rob Marshall', 'Daisy Ridley') \nAND title_principals.category = 'Lead' \nAND title_principals.job = 'Detective' \nAND title_principals.characters = 'Hercule Poirot' \nORDER BY title_basics.startYear DESC, title_basics.runtimeMinutes DESC;"}
{"id": 22297, "query": "hey great! I am looking for scary movies like Rosemary's Baby  (1968) and The Exorcist  (1973)", "history": ["Bridesmaids  (2011)", "Juno (2007)", "Pitch Perfect (2012)"], "groundtruth": ["I Feel Pretty (2018)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_ratings.averageRating, t1.title_ratings.numVotes, t2.name_basics.primaryName, t2.name_basics.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nJOIN name_basics n3 ON t1.title_basics.primaryTitle = n3.primaryName\nWHERE t1.genres LIKE '%horror%'\nAND t1.startYear BETWEEN 1960 AND 1980\nAND t2.knownForTitles LIKE '%Rosemary%s Baby%' OR t2.knownForTitles LIKE '%The Exorcist%'\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  JOIN title_ratings t4 ON t3.title_basics.tconst = t4.tconst\n  WHERE t3.primaryTitle = t1.primaryTitle\n  AND t4.averageRating > 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t5\n  JOIN title_ratings t6 ON t5.title_basics.tconst = t6.tconst\n  WHERE t5.primaryTitle = t1.primaryTitle\n  AND t6.numVotes > 10000\n)\nAND EXISTS (\n  SELECT 1\n  FROM title_basics t7\n  JOIN title_ratings t8 ON t7.title_basics.tconst = t8.tconst\n  WHERE t7.primaryTitle = t1.primaryTitle\n  AND t8.averageRating > 6.5\n  AND t8.numVotes > 500\n)\nGROUP BY t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_ratings.averageRating, t1.title_ratings.numVotes, t2.name_basics.primaryName, t2.name_basics.knownFor"}
{"id": 22298, "query": "Awesome! I just watched Bridesmaids  (2011) and Pitch Perfect (2012) and was looking for something similar- you know any good ones?", "history": ["Rush Hour  (1998)", "X-Men  (2000)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.primaryTitle IN ('Bridesmaids', 'Pitch Perfect')\nAND title_ratings.averageRating > 6.5\nAND title_basics.genres LIKE '%comedy%'\nAND name_basics.primaryProfession LIKE '%actress%'\nAND name_basics.knownForTitles LIKE '%Rush Hour%'\nOR name_basics.knownForTitles LIKE '%X-Men%'\nGROUP BY title_basics.title\nHAVING COUNT(DISTINCT title_basics.title) > 2\nORDER BY averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"Bridesmaids\" and \"Pitch Perfect\" based on their genres, directors, and primary actors. The query will also consider the user's historical preferences, which are specified in the \"User Preference History\" section. The query will return a list of movies that have a high average rating and are within the user's preferred genre."}
{"id": 22304, "query": "I enjoy science fiction movies, especially ones with space ship combat.", "history": ["The 40-Year-Old Virgin (2005)", "Knocked Up (2007)"], "groundtruth": ["Anchorman ", "The Big Short  (2015)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n1 ON t1.primaryName = n1.primaryName\nWHERE t1.genres LIKE '%Science Fiction%' AND t1.titleType = 'Feature Film' AND t2.averageRating > 7 AND t2.numVotes > 10000\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t3\n  JOIN name_basics n2 ON t3.nconst = n2.nconst\n  WHERE t3.category = 'Actor' AND n2.primaryProfession = 'Director' AND n2.knownForTitles = 'The 40-Year-Old Virgin (2005)'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t4\n  JOIN name_basics n3 ON t4.nconst = n3.nconst\n  WHERE t4.category = 'Actor' AND n3.primaryProfession = 'Actor' AND n3.knownForTitles = 'Knocked Up (2007)'\n)\nORDER BY t2.averageRating DESC, t1.startYear ASC;\n\nThis SQL query will retrieve movies that are science fiction, have a high average rating, and have at least 10,000 votes. It will also exclude movies that have any of the directors or actors from \"The 40-Year-Old Virgin\" or \"Knocked Up\" in the cast or crew. Finally, it will order the results by average rating in descending order and start year in ascending order."}
{"id": 22307, "query": "I'm looking for a good movie to watch on a date.", "history": ["Young Guns  (1988)", "Tombstone  (1993)", "The Outlaws  (1950)", "The Good, the Bad and the Ugly (1966)"], "groundtruth": ["El Dorado  (1966)"], "output": "SELECT * FROM title_basics tb\nJOIN (\n    SELECT tconst, AVG(rating) AS avg_rating\n    FROM title_ratings\n    GROUP BY tconst\n) AS tr\nON tb.tconst = tr.tconst\nWHERE tb.titleType ='movie'\nAND tb.startYear BETWEEN 1950 AND 1993\nAND tb.genres LIKE '%Western%'\nAND tr.avg_rating > 7\nORDER BY tr.avg_rating DESC;\n\nThis SQL query will retrieve movies that are classified as Westerns, released between 1950 and 1993, and have an average rating above 7. The query first joins the title_basics table with a subquery that calculates the average rating for each title in the title_ratings table. The join condition is on the tconst column, which is the unique identifier for each title. The subquery only includes titles that are classified as movies and have a start year between 1950 and 1993. The main query then filters the results to only include titles with a genres column that contains the word \"Western\". Finally, the results are sorted in descending order by the average rating.\n\nNote that this is just one possible approach to generating movie recommendations based on user input and historical preferences. There are many other factors that could be taken into account, such as the user's age, gender, location, and other preferences. Additionally, the query could be optimized for performance by using indexes on the relevant columns and reducing the number of joins required."}
{"id": 22309, "query": "I haven't seen anything like Young Guns  (1988) in a long time.", "history": ["Love Stinks  (1999)", "Forgetting Sarah Marshall (2008)", "When Harry Met Sally... (1989)", "Pretty Woman (1990)"], "groundtruth": ["Love Actually (2003)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE \ntitle_basics.title LIKE '%Young Guns%'  -- User input\nAND title_ratings.averageRating > 6.5  -- User preference history\nAND title_basics.startYear BETWEEN 1980 AND 1995  -- User preference history\nAND title_basics.genres LIKE '%Comedy%'  -- User preference history\nGROUP BY \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles\nHAVING \nCOUNT(DISTINCT title_basics.tconst) > 3  -- User preference history\nORDER BY \ntitle_basics.startYear DESC,\ntitle_ratings.averageRating DESC;\n\nThis SQL query takes the user input \"Young Guns\" and uses it to filter the title_basics table. It then joins the title_ratings and name"}
{"id": 22311, "query": "Any chance you know of some great comedies.  Something like Uncle Buck ?", "history": ["The Avengers  (2012)", "X-Men  (2000)", "The Wolverine  (2013)"], "groundtruth": ["Wonder Woman  (2017)", "Logan  (2017)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.primaryName, t3.category, t4.job\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nJOIN title_principals t4 ON t1.tconst = t4.tconst\nWHERE t2.averageRating > 7 AND t1.genres LIKE '%comedy%'\nAND t3.primaryProfession = 'Actor'\nAND t4.job = 'Actor'\nAND t1.startYear > 1990\nAND t1.endYear < 2020\nAND t1.runtimeMinutes > 90\n\nLIMIT 5;\n\nThis SQL query will retrieve movies that are comedies, have a high average rating (above 7), and were released between 1990 and 2020, with a runtime of over 90 minutes. It will also consider the user's historical preferences, which are movies in the action genre, and return the top 5 recommendations."}
{"id": 22314, "query": "Can you suggest some good horror movies for me to watch?", "history": ["Flatliners  (2017)"], "groundtruth": ["The Hospital (1971)", "Girl, Interrupted  (1999)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Horror' AND t2.averageRating > 6\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t3\n  JOIN name_basics t4 ON t3.nconst = t4.nconst\n  WHERE t3.category = 'Actor' AND t4.birthYear = 1980\n)\nORDER BY t2.averageRating DESC;\n\nThis SQL query suggests horror movies based on the user's preference history and the genre 'Horror'. It also filters out movies that have actors born in 1980, as the user may not be interested in watching movies with actors from that year. Finally, it orders the results by the average rating in descending order.\n\nNote: This query assumes that the IMDb database contains a 'Horror' genre category and that the 'birthYear' column in the 'name_basics' table represents the year of birth for actors."}
{"id": 22315, "query": "I like movies about doctors. Do you know of any good ones?", "history": ["The Martian  (2015)", "Interstellar  (2014)"], "groundtruth": ["Red Sparrow (2018)"], "output": "SELECT t.title_basics.primaryTitle, t.title_basics.startYear, t.title_basics.runtimeMinutes, t.title_ratings.averageRating, t.title_crew.directors, t.title_principals.characters\nFROM title_basics t\nJOIN title_ratings tr ON t.tconst = tr.tconst\nJOIN name_basics n ON t.primaryName = n.primaryName\nJOIN title_crew c ON t.directors = c.directors\nJOIN title_principals p ON t.ordering = p.ordering\nWHERE t.genres LIKE '%doctor%'\nAND t.startYear BETWEEN 2000 AND 2020\nAND t.runtimeMinutes > 90\nAND EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE tconst = tr.tconst\n  AND numVotes > 10000\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE tconst = p.tconst\n  AND category = 'actress'\n)\nORDER BY averageRating DESC, startYear DESC;\n\nThis SQL query will retrieve movies about doctors that were released between 2000 and 2020, have a runtime of over 90 minutes, and have at least 10,000 votes on the title ratings table. It will also exclude movies with actresses in leading roles.\n\nNote that this is just one possible approach to generating movie recommendations based on user preferences and historical data. There are many other factors that could be taken into account, such as the user's watch history, their ratings, and their search queries. Additionally, the query could be optimized for performance and scalability, depending on the size of the database and the expected number of queries."}
{"id": 22318, "query": "I'm really interested in watching a dramatic movie, like The Martian  (2015) . Can you make any suggestions?", "history": [], "groundtruth": ["Collateral Damage  (2002)", "Terminator Genisys (2015)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n       t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nWHERE t1.genres = 'Drama' AND t2.averageRating > 7 AND t3.knownForTitles LIKE '%The Martian%'\nGROUP BY t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n         t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles\nHAVING COUNT(DISTINCT t3.primaryName) > 1;\n\nThis SQL query will retrieve movies with a drama genre, high average rating (> 7), and a known for title that is similar to \"The Martian\". The query will also group the results by title, primary title, original title, adult status, start year, end year, runtime minutes, genres, average rating, num votes, primary name, birth year, death year, primary profession, and known for titles. Finally, the query will filter out any movies that do not have more than one known for title.\n\nNote that this query assumes that the user's preference history is empty, so it will not take into account any historical preferences. If the user has a preference history, you may need to modify the query to include additional join and filter clauses to incorporate the history."}
{"id": 22326, "query": "i'm looking to watch an awesome action movie. Something like Fast 8 or maybe The Terminator (1984)", "history": ["Making a Murderer", "The Godfather (1972)"], "groundtruth": ["Scarface  (1983)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.directors = title_crew.directors\nJOIN title_principals ON title_basics.ordering = title_principals.ordering\nWHERE title_basics.primaryTitle IN ('Fast 8', 'The Terminator (1984)')\nAND title_ratings.averageRating > 7\nAND title_basics.genres LIKE '%Action%'\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_principals.characters LIKE '%action%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres\nHAVING COUNT(title_principals.ordering) > 5\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;"}
{"id": 22332, "query": "I do.  I'm in the mood for a comedy from the 80's.", "history": ["Lethal Weapon (1987)", "Forever Young  (1992)", "Mad Max (1979)"], "groundtruth": ["Braveheart (1995)"], "output": "SELECT t1.title, t1.originalTitle, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.startYear = 1987 AND t1.genres LIKE '%comedy%' AND t2.averageRating > 7\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t3\n  JOIN name_basics t4 ON t3.nconst = t4.nconst\n  WHERE t3.category = 'Director' AND t4.birthYear = 1948\n)\nORDER BY t2.averageRating DESC, t1.startYear ASC;\n\nThis SQL query will retrieve the top-rated comedies from the 1980s that do not have any directors born in 1948. The query joins the title_basics and title_ratings tables to get the movie titles and their ratings, and then uses the NOT EXISTS clause to exclude any movies directed by someone born in 1948. The query then orders the results by average rating in descending order and start year in ascending order."}
{"id": 22348, "query": "I'm in the mood for a movie with ghosts.  For example, The Amityville Horror  (1979)  was great, but it can be other genres, too.", "history": ["How to Lose a Guy in 10 Days (2003)", "Failure to Launch (2006)", "The Wedding Planner (2001)"], "groundtruth": ["Wedding Crashers (2005)", "Notting Hill "], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, name_basics.primaryName, title_crew.directors, title_principals.category, title_principals.job\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%ghost%'\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE knownForTitles IN (SELECT title FROM title_basics WHERE ghosts = 1))\nAND title_principals.category NOT IN (SELECT category FROM title_principals WHERE job = 'Actor')\nAND title_crew.directors NOT IN (SELECT directors FROM title_crew WHERE job = 'Actor')\nAND title_basics.startYear BETWEEN 1970 AND 2020\nAND title_basics.endYear BETWEEN 1970 AND 2020\nAND title_basics.runtimeMinutes BETWEEN 60 AND 120\nAND title_ratings.averageRating > 6.5\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query is designed to retrieve movies that are classified under the \"ghost\" genre, have a high number of votes (>1000), and are not in the user's history of watched movies. The query also excludes movies that have actors as directors or principals, and only includes movies with a runtime of 60-120 minutes. Additionally, the query filters out movies that are too old or too new, and only includes movies with an average rating of >6.5. The final order of the results is"}
{"id": 22352, "query": "so i am looking for a romantic comedy", "history": ["Forgetting Sarah Marshall (2008)"], "groundtruth": ["Step Brothers  (2008)", "The House  (2017)", "I Love You, Man (2009)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'romantic comedy'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (\n        SELECT tconst\n        FROM title_basics\n        WHERE genres = 'romantic comedy'\n    )\n)\nAND title_basics.isAdult = 0\nAND title_principals.category = 'actor'\nAND title_principals.job = 'lead'\nAND title_principals.characters ='male'\nAND name_basics.primaryName IN (\n    SELECT primaryName\n    FROM name_basics\n    WHERE birthYear = 1980\n)\nAND title_basics.startYear = 2000\nAND title_basics.endYear = 2010\nAND title_ratings.numVotes > 1000\nGROUP BY title_basics.title, title_basics"}
{"id": 22354, "query": "I'd love to watch a good comedy now. Can you suggest any?", "history": ["It (1990)", "The Cabin in the Woods", "It  (2017)"], "groundtruth": ["The Amityville Horror  (2005)", "A Quiet Place (2018)"], "output": "SELECT t.title, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, \n       r.averageRating, r.numVotes, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles,\n       c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings r ON t.tconst = r.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryTitle\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE t.genres = 'comedy'\nAND r.averageRating > 7\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE t.tconst = title_principals.tconst AND category = 'actor' AND job = 'director')\nORDER BY r.averageRating DESC, t.startYear DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have an average rating of at least 7, and do not have any directors in the title_principals table. The query will also order the results by the average rating in descending order and then by the start year in descending order.\n\nNote that this is just one possible approach to generating movie recommendations based on user input and preference history. There are many other factors that could be considered in the recommendation algorithm, such as the user's watch history, their ratings, and other features of the movies."}
{"id": 22357, "query": "Hey there, i'm looking for movies like Fellowship of the Ring (2001) because I loved it. Do you know of any other good fantasy movies?", "history": ["Scary Movie ", "The Purge (2013)", "The Purge ", "It  (2017)"], "groundtruth": ["Rosemary's Baby  (1968)", "Get Out (2017)", "The Purge: Anarchy (2014)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.nconst, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics \nINNER JOIN \n    title_ratings \nON \n    title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics \nON \n    title_basics.nconst = name_basics.nconst \nINNER JOIN \n    title_crew \nON \n    title_basics.tconst = title_crew.tconst \nINNER JOIN \n    title_principals \nON \n    title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.primaryTitle = 'The Fellowship of the Ring' \n    AND title_ratings.averageRating > 7 \n    AND title_principals.category = 'Fantasy' \n    AND title_principals.job = 'Actor' \n    AND title_principals.characters LIKE '%hobbit%' \n    AND name_basics.primaryName NOT IN ('"}
{"id": 22359, "query": "Titanic  (1997) was a good movie, although I did not particularly like it, because it was sad. Do you know of any happier romance movies?", "history": ["La La Land  (2016)", "Grease  (1978)", "Mamma Mia!  (2008)"], "groundtruth": ["Camp Rock", "High School Musical "], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, name_basics.primaryName, title_ratings.averageRating\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE title_basics.title LIKE '%Romance%' AND title_basics.endYear > 1997 AND title_ratings.averageRating > 7\nAND NOT EXISTS (SELECT 1 FROM title_basics AS t2 WHERE t2.tconst = title_basics.tconst AND t2.genres LIKE '%Drama%')\nAND NOT EXISTS (SELECT 1 FROM title_basics AS t3 WHERE t3.tconst = title_basics.tconst AND t3.genres LIKE '%Tragedy%')\nAND EXISTS (SELECT 1 FROM title_basics AS t4 WHERE t4.tconst = title_basics.tconst AND t4.genres LIKE '%Musical%')\nAND NOT EXISTS (SELECT 1 FROM title_basics AS t5 WHERE t5.tconst = title_basics.tconst AND t5.genres LIKE '%War%')\nORDER BY title_ratings.averageRating DESC, title_basics.title ASC\n\n;\n\nThis SQL query will retrieve movies that are classified as romance, have a release year after 1997, have a high average rating, and do not belong to the drama or tragedy genres. Additionally, the query will only include movies that have at least one genre in common with \"Mamma Mia!\", \"La La Land\", and \"Grease\". The \"NOT EXISTS\" clauses are used to exclude movies that belong to the drama or tragedy genres, and the \"EXISTS\" clauses are used to include movies that belong to the musical genre. The final \"ORDER BY\" clause sorts the results by average rating in descending order and title in ascending order."}
{"id": 22370, "query": "Hello!  I'm looking for a good movie based on a book.", "history": ["It  (2017)", "Sweeney Todd: The Demon Barber of Fleet Street  (2007)", "Mama  (2013)"], "groundtruth": ["Get Out (2017)"], "output": "SELECT * FROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nJOIN name_basics nb ON tb.primaryTitle = nb.primaryName\nJOIN title_crew tc ON tb.tconst = tc.tconst\nJOIN title_principals tp ON tb.tconst = tp.tconst\nWHERE tb.genres = 'Horror'\nAND tr.averageRating > 7\nAND nb.knownForTitles = 'It'\nAND tc.directors = 'Andy Muschietti'\nAND tp.category = 'Actor'\nAND tp.job = 'Lead'\nAND tp.characters = 'Pennywise'\n\nORDER BY tr.averageRating DESC;\n\nThis SQL query is designed to retrieve movies that are classified as horror, have a high average rating, and are directed by Andy Muschietti. Additionally, the query filters the results to only include movies that have the word \"It\" in the title or are known for the title \"It\", and that have an actor in a lead role who plays the character Pennywise.\n\nNote that this is just one possible approach to generating movie recommendations based on user input and historical preferences. There are many other factors that could be taken into account when building a movie recommendation system, such as the user's watch history, their ratings, and their search queries."}
{"id": 22372, "query": "Hey there. I'm looking for Hugh Jackman movies like The Wolverine  (2013)  or Logan  (2017)   . I really liked those.", "history": ["Jumanji (1995)", "Stir of Echoes (1999)", "Slum  (2013)"], "groundtruth": ["Clip  (2012)"], "output": "SELECT t1.title, t1.primaryTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n       t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, \n       t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.primaryTitle LIKE '%Hugh Jackman%'\nAND t2.averageRating > 7\nAND t3.primaryProfession = 'Actor'\nAND t4.directors LIKE '%James Mangold%'\nAND t5.category = 'Movie'\nAND t5.job = 'Actor'\nAND t5.characters LIKE '%Wolverine%';\n\nNote: The above query is based on the given database schema and user input. It is not optimized for performance and may need adjustments for specific use cases."}
{"id": 22394, "query": "Hmmm.  I'm not sure.  I haven't been to the movies in awhile.  Tonight, I'm interested in seeing something with a serial killer.", "history": ["X-Men: Days of Future Past (2014)", "X-Men  (2000)", "The Wolverine  (2013)"], "groundtruth": ["Wonder Woman  (2017)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%thriller%' AND t1.startYear = 2014\nAND EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  JOIN title_ratings t4 ON t3.tconst = t4.tconst\n  WHERE t3.primaryTitle LIKE '%serial killer%' AND t4.averageRating > 7\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies from the title_basics table that have the genre 'thriller' and were released in 2014. It will also filter out movies that have the primary title containing the phrase'serial killer' and have an average rating above 7. The results will be ordered by average rating in descending order and then by release year in descending order.\n\nPlease note that this query is based on the given user input and preference history. The query will return a list of movies that match the user's preferences and are highly rated."}
{"id": 22403, "query": "Just finished watching Airplane! (1980) you know any other comedy movies or parody stuff?", "history": ["Scary Movie "], "groundtruth": ["Superhero Movie (2008)", "Happy Gilmore (1996)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.knownForTitles, title_crew.directors, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.genres = 'Comedy' AND title_ratings.averageRating > 7 AND title_principals.category = 'Parody' AND name_basics.knownForTitles LIKE '%Scary Movie%'\nORDER BY title_ratings.averageRating DESC, title_principals.job ASC;\n\nThis SQL query will retrieve movies that are classified as \"Comedy\" and have an average rating of at least 7 out of 10, are parodies, and have a known for title that is similar to \"Scary Movie\". The results will be ordered by the average rating in descending order and then by the job of the principals in ascending order."}
{"id": 22410, "query": "Can you suggest any good comedies for me?", "history": ["The Dark Knight  (2008)", "X-Men: The Last Stand (2006)"], "groundtruth": ["Avengers: Infinity War (2018)", "Logan  (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.numVotes > 1000\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%comedy%'\nAND NOT EXISTS (SELECT 1 FROM title_basics WHERE title_basics.tconst = title_principals.tconst AND title_basics.endYear > 2010)\n\nORDER BY title_ratings.averageRating DESC, title_basics.startYear ASC;\n\nThis SQL query will retrieve all the comedies with more than 1000 votes, with at least one actor who has played a comedy role, and without any movies released after 2010. The query will also order the results by average rating in descending order and start year in ascending order."}
{"id": 22411, "query": "You know any good action packed super hero movies? something like X-Men: The Last Stand (2006) ?", "history": ["The Last House on the Left  (1972)", "It  (2017)", "Mama  (2013)"], "groundtruth": ["Friday the 13th  (1980)", "A Nightmare on Elm Street (1984)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_principals.category, title_crew.directors\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nWHERE title_basics.genres = 'Action' AND title_basics.titleType = 'Movie' AND title_ratings.numVotes > 10000\nAND title_principals.category = 'Superhero'\nAND title_crew.directors = 'Brett Ratner'\nAND title_basics.startYear = 2006\nAND title_basics.endYear = 2018\nAND title_basics.runtimeMinutes > 120\nAND NOT EXISTS (SELECT 1 FROM title_basics WHERE title_basics.tconst = title_ratings.tconst AND title_basics.title = 'X-Men: The Last Stand (2006)')\nGROUP BY title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_principals.category, title_crew.directors\nHAVING COUNT(DISTINCT title_basics.tconst) > 5\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve action-packed superhero movies directed by Brett Ratner, released between 2006 and 2018, with more than 10,000 ratings and a runtime of over 120 minutes. It will also exclude movies with the title \"X-Men: The Last Stand (2006)\" as it is already present in the user's preference history. Finally, it will group the results by title, primary title, average rating, category, and directors, and order them by average rating in descending order and primary title in"}
{"id": 22415, "query": "A little bit of everything, but I'd love suggestions for a good romantic comedy.  Maybe something like Love Stinks  (1999) .", "history": ["X-Men  (2000)", "The Dark Knight  (2008)"], "groundtruth": ["Spider-Man: Homecoming (2017)", "Thor: Ragnarok (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'romantic comedy' AND title_ratings.averageRating > 7 AND title_basics.startYear > 1990 AND title_basics.endYear < 2010\nAND NOT EXISTS (SELECT * FROM title_basics WHERE title_basics.tconst = title_principals.tconst AND title_basics.primaryName = name_basics.primaryName)\nLIMIT 5\n;\n\nThis SQL query is designed to retrieve movies that are classified as \"romantic comedy\" and have an average rating of at least 7 out of 10. The query also filters out movies that are older than 1990 or newer than 2010. Additionally, the query excludes movies that are in the user's preference history, as determined by the \"NOT EXISTS\" clause. The final \"LIMIT 5\" clause limits the number of results returned to 5.\n\nNote that this query assumes that the user's preference history is stored in a separate table, with the \"tconst\" column representing the title ID and the \"primaryName\" column representing the primary name of the movie. The query joins this table with the \"title_basics\" table to determine which movies are in the user's preference history."}
{"id": 22417, "query": "to my like movies of horror how It  (2017) or Mama  (2013)", "history": ["X-Men  (2000)"], "groundtruth": ["Watchmen  (2009)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.nconst = name_basics.nconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \ntitle_basics.genres LIKE '%horror%' \nAND title_basics.startYear = 2017 \nOR title_basics.originalTitle LIKE '%Mama%' \nAND title_ratings.averageRating > (SELECT \n    AVG(rating)\nFROM \n    title_ratings\nWHERE \n    tconst = (SELECT \n        tconst\n    FROM \n        title_basics\n    WHERE \n        primaryTitle = 'X-Men' AND startYear = 2000)\n)\nORDER BY \ntitle_ratings.averageRating DESC;\n\nThis query will return a list of movies that are classified as horror, have a start year of 2017, or"}
{"id": 22418, "query": "I really like super hero movies.", "history": ["The Boy  (2016)", "It  (2017)", "Mama  (2013)"], "groundtruth": ["The Forest  (2016)"], "output": "SELECT t1.title, t1.titleType, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n ON t1.primaryName = n.primaryName\nWHERE t1.genres ='superhero'\nAND t2.averageRating > (SELECT AVG(t3.averageRating)\n                     FROM title_ratings t3\n                     WHERE t3.tconst IN (SELECT t4.tconst\n                                         FROM title_basics t4\n                                         WHERE t4.primaryName = n.primaryName\n                                         AND t4.startYear <= 2022\n                                         AND t4.endYear >= 2010))\nAND t1.startYear >= 2010\nAND t1.endYear <= 2022\nAND t1.runtimeMinutes > 90\nAND t2.numVotes > 1000\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as \"superhero\" and have a high average rating from the user's preferred directors and writers. The query will also filter out movies that are not released between 2010 and 2022, have a runtime of less than 90 minutes, or have fewer than 1000 votes. Finally, the query will order the results by the average rating in descending order."}
{"id": 22420, "query": "i'm looking for help picking out a movie", "history": ["Step Brothers  (2008)", "Rocky (1976)"], "groundtruth": ["I Love You, Man (2009)", "Fast 8"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, \ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.primaryTitle IN (SELECT title FROM title_basics WHERE genres = 'Comedy' AND startYear = 2008) \nAND title_basics.primaryTitle NOT IN (SELECT title FROM title_basics WHERE genres = 'Drama' AND startYear = 1976)\nAND title_ratings.averageRating > 6 AND title_ratings.numVotes > 1000\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE deathYear = 2008)\nAND title_crew.directors NOT IN (SELECT directors FROM title_crew WHERE job = 'Actor')\nAND title_principals.category NOT IN (SELECT category FROM title_principals WHERE job = 'Actor')\n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, \ntitle_crew.directors"}
{"id": 22421, "query": "Could you suggest a couple of good action packed movies and maybe a couple comedies?", "history": ["It (1990)", "It  (2017)", "Mama  (2013)"], "groundtruth": ["The Texas Chainsaw Massacre  (2003)"], "output": "SELECT \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle,\n    title_ratings.averageRating, title_ratings.numVotes,\n    name_basics.primaryName, name_basics.birthYear, name_basics.deathYear,\n    title_crew.directors, title_crew.writers,\n    title_principals.ordering, title_principals.category, title_principals.job,\n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.genres LIKE '%Action%' AND title_basics.genres LIKE '%Comedy%'\n    AND title_ratings.averageRating > 7 AND title_ratings.numVotes > 1000\n    AND name_basics.birthYear > 1970 AND name_basics.deathYear < 2020\n    AND title_crew.directors LIKE '%Pennywise%'\n    AND title_principals.category = 'Actor' AND title_principals.job = 'Lead'\n    AND title_principals.characters LIKE '%Pennywise%';\n\nThis SQL query will retrieve movies that are both action-packed and comedic, have high ratings and a large number of votes, are from the past 40 years, and feature actors who have played the role of Pennywise. The query will also include the title, primary title, original title, average rating, number of votes, primary name, birth year, death year, directors, writers, ordering, category, job, and characters for each movie."}
{"id": 22427, "query": "Ok, can you suggest some movies for me.", "history": ["Scream  (1996)", "Scary Movie "], "groundtruth": ["Bridesmaids  (2011)", "The Last House on the Left  (2009)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.genres, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Horror' AND title_basics.startYear = 1996\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.genres = 'Horror' AND title_basics.startYear = 1996)\n    AND title_ratings.numVotes > 1000\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_ratings\n    WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.numVotes > 1000\n    AND title_ratings.averageRating > title_basics.averageRating\n)\nAND title_principals.characters LIKE '%Scream%'\nOR title_principals.characters LIKE '%Scary Movie%';\n\nNote: The query is based on the assumption that the user's preference history is stored in the title_ratings table with the tconst column representing the title ID. The query uses this history to suggest movies that are similar to the movies the user has previously rated and that have a high average rating. It also filters out movies that are too similar to the user's previous ratings, and includes movies that have at least 1000 votes and a high average rating. Finally, it uses the name_basics table to retrieve the primary name of the movies and the title_crew and title_principals tables to"}
{"id": 22431, "query": "to my like movies of horror and comedy", "history": ["Grease  (1978)", "Beauty and the Beast  (2017)", "Rent  (2005)", "Chicago  (2002)"], "groundtruth": ["La La Land  (2016)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \ntitle_basics.genres LIKE '%horror%' AND title_basics.genres LIKE '%comedy%' AND title_ratings.numVotes > 1000 \nAND title_basics.startYear BETWEEN 1970 AND 2020 \nAND title_basics.endYear BETWEEN 1970 AND 2020 \nAND title_basics.runtimeMinutes BETWEEN 60 AND 180 \nAND name_basics.primaryProfession LIKE '%actor%' OR name_basics.primaryProfession LIKE '%actress%' \nAND title_crew.directors LIKE '%John Hughes%' OR title_crew.directors LIKE '%Tim Burton%' \nAND title_principals.category LIKE '%lead%' OR title_principals.category LIKE '%supporting%' \nAND title_principals.job LIKE '%actor%' OR title_principals.job LIKE '%"}
{"id": 22441, "query": "I really like comedy and action!", "history": ["Girls Trip (2017)", "How High (2001)", "The Hangover (2009)", "Super Troopers (2001)", "Pineapple Express  (2008)", "Hangover  (2014)", "Super Troopers 2 (2018)"], "groundtruth": ["Bandits  (2001)", "Vacation  (2015)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.title_basics.tconst = tr.tconst\n    JOIN name_basics n ON t.title_basics.primaryTitle = n.primaryName\nWHERE \n    t.genres LIKE '%comedy%' AND t.genres LIKE '%action%'\nAND t.title_basics.primaryTitle NOT IN (SELECT n.primaryName FROM name_basics n WHERE n.knownForTitles IN ('Girls Trip (2017)', 'How High (2001)', 'The Hangover (2009)', 'Super Troopers (2001)', 'Pineapple Express  (2008)', 'Hangover  (2014)', 'Super Troopers 2 (2018)'))\nGROUP BY \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_rat"}
{"id": 22445, "query": "I also love stoner comedies How High (2001)  and Pineapple Express  (2008)", "history": ["Donnie Darko (2001)", "Deadpool  (2016)"], "groundtruth": ["Girls Trip (2017)", "Game Night (2018)", "Deadpool 2  (2018)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE title_basics.genres = 'Comedy'\nAND title_basics.isAdult = 0\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (\n        SELECT title_basics.tconst\n        FROM title_basics\n        WHERE title_basics.genres = 'Stoner Comedy'\n    )\n)\nAND title_basics.startYear BETWEEN 2000 AND 2020\nAND title_basics.runtimeMinutes < 120\nAND name_basics.primaryName IN (\n    SELECT name_basics.primaryName\n    FROM name_basics\n    WHERE name_basics.knownForTitles IN (\n        SELECT title_basics.title\n        FROM title_basics\n        WHERE title_basics.genres = 'Stoner Comedy'\n    )\n)\nORDER BY title_basics.startYear DESC, title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are comedies, not adult-rated, and have a high average rating from users who have also rated stoner comedies like How High (2001) and Pineapple Express (2008). The query will"}
{"id": 22447, "query": "So, I love movies like Girls Trip (2017) Pineapple Express  (2008) and Super Troopers (2001)", "history": ["Anchorman: The Legend of Ron Burgundy (2004)", "Uncle Buck", "Step Brothers  (2008)", "Super Troopers (2001)", "Pineapple Express  (2008)", "National Lampoon's Vacation (1983)", "National Lampoon's Christmas Vacation (1989)"], "groundtruth": ["Fear and Loathing in Las Vegas  (1998)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    name_basics.knownForTitles\nFROM \n    title_basics\nINNER JOIN \n    title_ratings\nON \n    title_basics.tconst = title_ratings.tconst\nINNER JOIN \n    name_basics\nON \n    title_basics.nconst = name_basics.nconst\nWHERE \n    title_ratings.averageRating > (\n        SELECT \n            AVG(rating)\n        FROM \n            title_ratings\n        WHERE \n            title = 'Girls Trip (2017)'\n    ) AND \n    title_ratings.numVotes > 1000\n    AND title_basics.genres LIKE '%comedy%'\n    AND title_basics.startYear BETWEEN 2000 AND 2020\n    AND NOT title_basics.isAdult\nGROUP BY \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    name_basics.knownForTitles\nHAVING \n    COUNT(DISTINCT title_basics.title) > 3\nORDER BY \n    RAND()"}
{"id": 22452, "query": "I love comedies like Pineapple Express  (2008)", "history": ["It (1990)", "Deadpool 2  (2018)", "Black Panther (2018)", "It  (2017)"], "groundtruth": ["How High (2001)", "Super Troopers (2001)", "Super Troopers 2 (2018)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_crew.directors, title_principals.category, title_principals.job\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.averageRating > 7\nAND title_basics.startYear = 2008\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE title_ratings.tconst = title_basics.tconst\n  AND title_ratings.numVotes > 1000\n)\nAND title_basics.primaryTitle NOT IN (\n  SELECT primaryTitle\n  FROM title_basics\n  WHERE startYear < 2008\n)\nAND title_basics.primaryTitle NOT IN (\n  SELECT primaryTitle\n  FROM title_basics\n  WHERE endYear > 2008\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE title_principals.tconst = title_basics.tconst\n  AND title_principals.job = 'Actor'\n  AND title_principals.characters = 'Danny McBride'\n)\nLIMIT 10;\n\nThis query will return a list of 10 movies that are comedies released in 2008, have an average rating of at least 7, and do not have more than 1000 votes. It will also exclude movies that have any of the primary titles in the user's preference history. Finally, it will exclude movies that have any of the primary titles in the user's input history.\n\nNote"}
{"id": 22458, "query": "Do you know any good comedies like Pineapple Express  (2008)  or 21 Jump Street  (2012)", "history": ["Psycho  (1960)", "Mama  (1990)", "It (1990)", "It  (2017)", "The Boy  (2015)"], "groundtruth": ["The Texas Chainsaw Massacre  (2003)", "The Shining  (1980)", "The Exorcist ", "Rosemary's Baby  (1968)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes \nFROM title_basics t1 \nJOIN title_ratings t2 ON t1.tconst = t2.tconst \nWHERE t1.genres = 'Comedy' AND t2.averageRating > (SELECT AVG(t3.rating) FROM title_ratings t3 WHERE t3.title IN (SELECT title FROM title_basics WHERE primaryTitle = 'Pineapple Express  (2008)' OR primaryTitle = '21 Jump Street  (2012)')) \nAND t1.startYear BETWEEN 1960 AND 2017 \nAND t1.endYear BETWEEN 1990 AND 2017 \nAND t1.runtimeMinutes BETWEEN 60 AND 120 \nAND t2.numVotes > 1000 \nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have a high average rating, and are similar to \"Pineapple Express\" and \"21 Jump Street\". The query will also filter out movies that are not from the specified time period and have a runtime of less than 60 minutes or more than 120 minutes. Finally, the query will order the results by the average rating in descending order."}
{"id": 22459, "query": "i like movies of horror", "history": ["Girls Trip (2017)", "It (1990)", "Super Troopers (2001)", "Super Troopers 2 (2018)", "Pineapple Express  (2008)", "Bad Boys  (1995)"], "groundtruth": ["It  (1966)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_ratings.averageRating, \nname_basics.primaryName, \ntitle_crew.directors, \ntitle_principals.characters\n\nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE \ntitle_basics.genres LIKE '%horror'\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryProfession NOT LIKE 'Actress'\nAND title_crew.directors NOT LIKE 'Peter Jackson'\nAND title_principals.job NOT LIKE 'Actor'\n\nGROUP BY \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_ratings.averageRating, \nname_basics.primaryName, \ntitle_crew.directors, \ntitle_principals.characters\n\nHAVING \nCOUNT(DISTINCT title_basics.tconst) > 5\n\nORDER BY \ntitle_ratings.averageRating DESC, \ntitle_basics.primaryTitle ASC;"}
{"id": 22461, "query": "I'm looking for a good romantic comedy movie like Knocked Up (2007)", "history": ["Love Actually (2003)", "Crazy, Stupid, Love (2011)", "Pretty Woman (1990)", "When Harry Met Sally... (1989)"], "groundtruth": ["Fifty Shades of Grey  (2015)"], "output": "SELECT t1.title_id, t1.title, t1.original_title, t1.start_year, t1.end_year, t1.runtime_minutes, t1.genres, t2.average_rating, t2.num_votes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nWHERE t1.genres LIKE '%romantic comedy%'\nAND t2.average_rating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.title_id IN (\n        SELECT t4.title_id\n        FROM title_basics t4\n        WHERE t4.title_type ='movie'\n        AND t4.primary_title = 'Love Actually (2003)'\n        OR t4.title = 'Crazy, Stupid, Love (2011)'\n        OR t4.title = 'Pretty Woman (1990)'\n        OR t4.title = 'When Harry Met Sally... (1989)'\n    )\n)\nORDER BY t2.average_rating DESC;\n\nThis SQL query will retrieve movies that are classified as \"romantic comedy\" and have an average rating higher than the average rating of the user's preferred movies. The query first joins the title_basics and title_ratings tables to get the title_id and average_rating for each movie. Then, it uses a subquery to select the titles that are preferred by the user and calculates the average rating of those titles. Finally, it filters the results to only include movies with an average rating higher than the average rating of the preferred titles. The results are sorted in descending order by average rating."}
{"id": 22464, "query": "I'm in the mood for a good animation movie like The Incredibles (2004)  I can't wait for the new Incredibles 2 (2018)", "history": ["The Incredibles (2004)", "Moana  (2016)", "Coco  (2017)", "The Boss Baby (2017)", "Inside Out  (2015)", "Ice Age  (2002)", "Despicable Me (2010)"], "groundtruth": ["Incredibles 2 (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.directors = title_crew.directors\nJOIN title_principals ON title_basics.nconst = title_principals.nconst\nWHERE title_basics.primaryTitle = 'The Incredibles (2004)' \nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating) \n    FROM title_ratings \n    WHERE title_ratings.tconst IN (\n        SELECT tconst \n        FROM title_basics \n        WHERE primaryTitle = 'The Incredibles (2004)'\n    )\n)\nAND title_basics.genres LIKE '%animation%'\nAND title_principals.category = 'voice'\nAND title_principals.job = 'actor'\nAND title_principals.characters LIKE '%Baby%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query is designed to retrieve movies that are similar to \"The Incredibles (2004)\" based on their genre, directors, and voice actors. The query first joins the title_basics, title_ratings, name_basics, title_crew, and title_principals tables to get the required information. Then it filters the results based on the user's input and historical preferences. Finally, it orders the results by the average rating in descending order.\n\nNote that this query assumes that the user's historical preferences are stored"}
{"id": 22478, "query": "Know of any good animated movies like Coco  (2017)", "history": ["The Incredibles (2004)", "Brave  (2012)", "Tangled (2010)", "Finding Dory (2016)", "The Little Prince  (2015)"], "groundtruth": ["Monster House  (2006)"], "output": "SELECT t1.title, t1.imdb_id, t2.average_rating, t2.num_votes, t3.name, t3.job\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.imdb_id = t2.title_id\nJOIN name_basics t3 ON t1.original_title = t3.name\nWHERE t1.genres LIKE '%Animation%' AND t2.average_rating > 7 AND t3.primary_profession = 'Director'\nAND EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE title_id = t1.imdb_id AND category = 'Director' AND job = 'Director'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE title_id = t1.imdb_id AND category = 'Actor' AND job = 'Actor'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_crew\n  WHERE title_id = t1.imdb_id AND role = 'Director'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_crew\n  WHERE title_id = t1.imdb_id AND role = 'Actor'\n)\nAND t1.start_year = 2017\nAND t1.end_year = 2017\nAND t2.num_votes > 10000\nAND t2.average_rating > 7.5\nAND t3.name NOT IN ('Lee Unkrich', 'Pixar Animation Studios') -- exclude The Incredibles (2004) and Finding Dory (2016)\n\nORDER BY t2.average_rating DESC, t3.name ASC;\n\nThis SQL query will retrieve animated movies with a high average rating (> 7.5) and at least 10,000 votes, released in 2017, and directed by a different director than Lee Unkrich and Pixar Animation Studios. The query will also exclude The Incredibles (2004) and Finding Dory (201"}
{"id": 22482, "query": "I'm in the mood for a good comedy like Pineapple Express  (2008) or Super Troopers (2001)", "history": ["The Incredibles (2004)", "Super Troopers (2001)", "Pineapple Express  (2008)"], "groundtruth": ["Game Night (2018)", "Girls Trip (2017)", "Incredibles 2 (2018)", "Black Panther (2018)", "Super Troopers 2 (2018)"], "output": "SELECT * FROM (\nSELECT title_basics.title_id, title_basics.title, title_basics.original_title, title_basics.start_year, title_basics.end_year, title_basics.runtime_minutes, title_basics.genres, title_ratings.average_rating, title_ratings.num_votes, name_basics.primary_name, name_basics.birth_year, name_basics.death_year, name_basics.primary_profession, name_basics.known_for_titles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.title_id = title_ratings.title_id\nJOIN name_basics ON title_basics.title_id = name_basics.title_id\nJOIN title_crew ON title_basics.title_id = title_crew.title_id\nJOIN title_principals ON title_basics.title_id = title_principals.title_id\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.average_rating > 6.5\nAND title_principals.category = 'actors'\nAND title_principals.job = 'actor'\nAND title_principals.characters ='main'\n) AS recommended_titles\nWHERE recommended_titles.title LIKE '%Pineapple Express%' OR recommended_titles.title LIKE '%Super Troopers%';\n\nNote: The query is written to retrieve movies that are comedies, have a high average rating, and have actors in the main role. The WHERE clause filters the results to only include titles that are similar to the user's input and historical preferences."}
{"id": 22499, "query": "I love animated films the best like Coco  (2017)  or Sing  (2016)  and Moana  (2016)", "history": ["Black Panther (2018)", "Justice League  (2017)", "Batman "], "groundtruth": ["The Avengers  (2012)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Animated'\nAND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst IN (SELECT t4.tconst FROM title_basics t4 WHERE t4.primaryTitle = 'Coco' (2017) OR t4.primaryTitle = 'Sing' (2016) OR t4.primaryTitle = 'Moana' (2016)))\nAND NOT EXISTS (SELECT 1 FROM title_ratings t3 WHERE t3.tconst = t1.tconst AND t3.averageRating > t2.averageRating)\nAND t1.startYear BETWEEN 2015 AND 2018\nAND t1.runtimeMinutes < 120\n\n;"}
{"id": 22518, "query": "I'm interested in animated movies like Coco  (2017) and The Incredibles (2004)", "history": ["Casino  (1995)", "Guardians of the Galaxy  (2014)", "Goodfellas (1990)", "The Avengers  (2012)"], "groundtruth": ["Prisoners  (2013)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.nconst, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.genres = 'Animation' AND title_basics.startYear >= 2000 AND title_basics.endYear <= 2022 AND title_ratings.averageRating >= 7 AND title_ratings.numVotes >= 10000 \nAND name_basics.primaryName NOT IN ('The Avengers', 'Guardians of the Galaxy', 'Goodfellas', 'Casino') \nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.averageRating < 7) \nAND NOT EXISTS (SELECT 1 FROM name_basics WHERE name_basics.nconst = name_basics.tconst AND name_basics.primaryProfession = 'Actor') \nAND NOT"}
{"id": 22531, "query": "I like crime movies like The Departed (2006)", "history": ["Thor: Ragnarok (2017)"], "groundtruth": ["Carol  (2015)", "Ocean's 8 (2018)"], "output": "SELECT t1.title_id, t1.title, t1.primaryTitle, t1.originalTitle, t1.genres, t2.averageRating, t2.numVotes, t3.name, t3.primaryProfession, t4.directors, t4.writers, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nJOIN name_basics t3 ON t1.title_id = t3.title_id\nJOIN title_crew t4 ON t1.title_id = t4.title_id\nJOIN title_principals t5 ON t1.title_id = t5.title_id\nWHERE t1.genres = 'crime' AND t2.averageRating > (SELECT AVG(t6.rating) FROM title_ratings t6 WHERE t6.title_id = t1.title_id AND t6.numVotes > 1000)\nAND t1.title NOT IN (SELECT t7.title_id FROM title_ratings t7 WHERE t7.user_id = <user_id>) -- avoid recommending movies rated by the current user\nAND t5.category = 'actor' OR t5.category = 'actress'\nAND t5.job = 'director' OR t5.job = 'writer'\nAND t5.characters = 'Thor'\nORDER BY t2.averageRating DESC, t1.title ASC;\n\nNote: This query assumes that the user ID is not provided in the input. If the user ID is provided, you can replace <user_id> with the actual user ID. Also, the query assumes that the historical preferences are stored in the title_ratings table with the user ID column not provided. If the historical preferences are stored in a different table, you may need to modify the query accordingly."}
{"id": 22543, "query": "i'm looking for movies with will ferrell", "history": ["Jumanji (1995)", "Finding Dory (2016)"], "groundtruth": ["Jumanji  (2017)", "Incredibles 2 (2018)"], "output": "SELECT * FROM (\n  SELECT t.title_id, t.title, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres,\n       AVG(r.rating) AS averageRating, COUNT(r.title_id) AS numVotes\n  FROM title_basics t\n  JOIN title_ratings r ON t.title_id = r.title_id\n  WHERE t.title LIKE '%Will Ferrell%'\n  GROUP BY t.title_id\n) AS recommended_movies\nWHERE numVotes > (\n  SELECT AVG(numVotes)\n  FROM recommended_movies\n) * 2 + 1;\n\n;"}
{"id": 22544, "query": "I need some recommendations for good movies to watch with my family.", "history": ["Up  (2009)", "Finding Dory (2016)", "The Incredibles (2004)", "Coco  (2017)"], "groundtruth": ["The Greatest Showman (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.isAdult = 'no' AND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE numVotes > 1000) AND title_basics.startYear BETWEEN 2000 AND 2019 AND title_basics.genres LIKE '%animation%' AND title_principals.category LIKE '%family%' \nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title"}
{"id": 22545, "query": "i need a movie for watch wit my family", "history": ["X-Men  (2000)", "Avenger  (2006)", "X-Men: Apocalypse (2016)"], "groundtruth": ["Avengers: Infinity War (2018)", "Logan  (2017)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n1 ON t1.primaryName = n1.primaryName\nJOIN title_crew c ON t1.directors = c.directors\nJOIN title_principals p ON t1.tconst = p.tconst\nWHERE p.category = 'family'\nAND t2.averageRating > 7\nAND t1.startYear BETWEEN 2000 AND 2016\nAND t1.runtimeMinutes BETWEEN 90 AND 120\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  JOIN title_ratings t4 ON t3.tconst = t4.tconst\n  WHERE t3.primaryName = n1.primaryName\n  AND t4.averageRating > 7\n  AND t3.startYear BETWEEN 2000 AND 2016\n  AND t3.runtimeMinutes BETWEEN 90 AND 120\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are rated above 7, released between 2000 and 2016, have a runtime between 90 and 120 minutes, and are classified as \"family\" movies. Additionally, it will exclude movies that have the same title, directors, and primary name as movies in the user's preference history. The result will be a list of movie recommendations that meet the user's input and historical preferences."}
{"id": 22547, "query": "Sure can you suggest some good movies for me to watch.", "history": ["Toy Story (1995)", "Coco  (2017)", "Coraline  (2009)", "Finding Dory (2016)", "Mary Poppins  (1964)"], "groundtruth": ["The Karate Kid (1984)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = '0' -- exclude adult movies\nAND title_ratings.averageRating > (\n    SELECT \n        AVG(rating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.primaryTitle IN (\n                    SELECT \n                        primaryTitle\n                    FROM \n                        name_basics\n                    WHERE \n                        name_basics.primaryProfession = 'Director'\n                )\n            AND title_basics.isAdult = '0'\n        )\n    AND title_ratings.numVotes > 1000\n)\nAND title_basics.startYear BETWEEN 1990 AND 201"}
{"id": 22550, "query": "i need a movie for my kids", "history": ["Up  (2009)", "The Incredibles (2004)", "Finding Dory (2016)"], "groundtruth": ["Incredibles 2 (2018)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.isAdult = '0' -- exclude adult movies\nAND title_ratings.averageRating > 7 -- only consider movies with high ratings\nAND title_ratings.numVotes > 1000 -- only consider movies with a large number of votes\nAND name_basics.primaryProfession = 'Director' -- only consider movies directed by well-known directors\nAND title_crew.directors = 'Pixar' -- only consider movies directed by Pixar\nAND title_principals.category = 'Animation' -- only consider animated movies\nAND title_principals.job = 'Voice Actor' -- only consider movies with voice actors\nAND title_principals.characters = 'Kids' -- only consider movies with kids as main characters\n\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC\n\nLIMIT 5; \n\nThis SQL query will retrieve movies that are suitable for kids, have high ratings, and are directed by well"}
{"id": 22553, "query": "How about some action movies.", "history": ["The Incredibles (2004)", "Finding Dory (2016)", "Coco  (2017)"], "groundtruth": ["Incredibles 2 (2018)"], "output": "SELECT \ntitle_basics.title, \ntitle_ratings.averageRating, \ntitle_crew.directors, \ntitle_principals.characters \nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \ntitle_basics.genres = 'action' \nAND title_ratings.numVotes > 1000 \nAND title_crew.directors LIKE '%Pixar%' \nAND title_principals.characters LIKE '%animated%' \nAND title_basics.startYear >= 2000 \nAND title_basics.endYear <= 2020 \nAND title_basics.runtimeMinutes >= 90 \nAND title_basics.runtimeMinutes <= 120 \nAND title_ratings.averageRating >= 7 \nAND title_ratings.averageRating <= 9 \nAND title_principals.job LIKE '%voice_actor%' \nAND title_principals.category LIKE '%animation%' \nAND title_basics.primaryTitle LIKE '%The Incredibles%' \nAND title_basics.primaryTitle LIKE '%Finding Dory%' \nAND title_basics.primaryTitle LIKE '%Coco%' \nORDER BY \ntitle_ratings.averageRating DESC, title_basics.primaryTitle ASC;"}
{"id": 22576, "query": "Hi, what is a good action movie?", "history": ["Star Wars  (1977)", "Paycheck  (2003)", "Guardians of the Galaxy  (2014)", "Jumanji (1995)", "Guardians of the Galaxy Vol. 2 (2017)"], "groundtruth": ["Jumanji  (2017)"], "output": "SELECT * FROM title_basics tb\nJOIN (\n    SELECT tconst, AVG(rating) AS avg_rating\n    FROM title_ratings\n    GROUP BY tconst\n) AS tr\nON tb.tconst = tr.tconst\nWHERE tb.genres = 'Action'\nAND tr.avg_rating > (\n    SELECT AVG(rating)\n    FROM title_ratings\n    WHERE tconst IN (\n        SELECT tconst\n        FROM title_ratings\n        WHERE user_id = (\n            SELECT uid\n            FROM name_basics\n            WHERE primaryName = 'Star Wars'\n        )\n    )\n)\nORDER BY tr.avg_rating DESC;\n\nThis SQL query will retrieve action movies that have a high average rating and are similar to the movies in the user's preference history. The query first joins the title_basics and title_ratings tables to get the movie titles and their corresponding ratings. It then filters the results to only include action movies and calculates the average rating for each movie. The query then joins the result set with the title_ratings table again to get the user ratings for the movies and filters the results to only include movies that have a high average rating. Finally, the query orders the results by the average rating in descending order.\n\nNote that this query assumes that the user's preference history is stored in the title_ratings table with a user_id column that matches the uid column in the name_basics table. The query uses a subquery to select the movies that are similar to the movies in the user's preference history."}
{"id": 22580, "query": "Hello, can you please recommend a good action movie that isn't rated R?", "history": ["Super Troopers (2001)", "American Pie  (1999)"], "groundtruth": ["American Pie 2 (2001)", "Game Night (2018)", "Super Troopers 2 (2018)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = '0'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE primaryTitle = 'Super Troopers (2001)' OR primaryTitle = 'American Pie (1999)')\n)\nAND title_basics.startYear BETWEEN 1990 AND 2010\nAND title_basics.runtimeMinutes > 80\nORDER BY title_ratings.averageRating DESC;\n\nNote: The query is written based on the given database structure and user input. The query will return a list of movies that match the user's preferences and are not rated R. The query uses a subquery to get the average rating of movies that the user has watched and liked, and then filters the results based on that average rating. The query also filters the results based on the start year, runtime minutes, and"}
{"id": 22581, "query": "HI! Can you reccomend any good comedies?", "history": ["The Royal Tenenbaums (2001)", "Meet the Fockers (2004)", "The Life Aquatic with Steve Zissou (2004)", "What About Bob%3F (1991)", "Stripes  (1981)", "Rushmore  (1998)"], "groundtruth": ["Caddyshack II (1988)", "The Other Woman  (2014)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_ratings.numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (\n        SELECT tconst\n        FROM title_basics\n        WHERE genres LIKE '%comedy%'\n    )\n)\nAND title_basics.startYear = (\n    SELECT MIN(title_basics.startYear)\n    FROM title_basics\n    WHERE title_basics.genres LIKE '%comedy%'\n)\nAND title_basics.endYear = (\n    SELECT MAX(title_basics.endYear)\n    FROM title_basics\n    WHERE title_basics.genres LIKE '%comedy%'\n)\nAND title_basics.runtimeMinutes > (\n    SELECT AVG(title_basics.runtimeMinutes)\n    FROM title_basics\n    WHERE title_basics.genres LIKE '%comedy%'\n)\nAND name_basics.primaryName NOT IN (\n    SELECT primaryName\n    FROM name_basics\n    WHERE knownForTitles LIKE '%The Royal Tenenbaums (2001)%'\n)\nAND name_basics.primaryName NOT IN (\n    SELECT primaryName\n    FROM name_basics\n    WHERE knownForTitles LIKE '%Meet the Fockers (2004)%'\n)\nAND name_basics.primaryName NOT IN (\n    SELECT primaryName\n    FROM name_basics\n    WHERE knownForTitles LIKE '%The Life Aquatic with Steve Zissou (2004)%'\n)\nAND name_basics.primaryName NOT IN (\n    SELECT primaryName\n    FROM name_basics\n    WHERE knownForTit"}
{"id": 22584, "query": "Hi, looking for a good drama film.", "history": ["Inception (2010)"], "groundtruth": ["2036 Origin Unknown (2018)", "The Martian  (2015)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'drama'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.genres = 'drama')\n    AND title_ratings.numVotes > 1000\n)\nAND title_basics.startYear <= 2010\nAND title_basics.endYear >= 2010\nAND title_ratings.numVotes > 100\nAND name_basics.primaryName NOT IN ('Christopher Nolan', 'Leonardo DiCaprio') -- exclude Inception and Leonardo DiCaprio\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtime"}
{"id": 22588, "query": "Hi--I'm looking for a good Sci Fi film", "history": ["The Shape of Water  (2017)", "The Hatching (2016)", "The Other (1972)"], "groundtruth": ["Pan's Labyrinth (2006)", "Suspiria (1977)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE \ntitle_basics.genres = 'Science Fiction'\nAND title_ratings.averageRating > 7\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryProfession = 'Director'\nAND title_crew.directors IN ('Guillermo del Toro', 'Steven Spielberg', 'Christopher Nolan')\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_principals.characters LIKE '%alien%'\n\nGROUP BY \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics"}
{"id": 22589, "query": "Hi.  I love horror films.  I like The Shape of Water  (2017) Can you recommend something like that?", "history": ["Con Air (1997)", "The Rock  (1996)", "The Great Escape  (1963)", "The Greatest Showman (2017)", "Darkest Hour  (2017)"], "groundtruth": ["Moulin Rouge! (2001)", "Birdman of Alcatraz  (1962)", "Trees Lounge (1996)", "Cabaret  (1972)"], "output": "SELECT t1.title_basics.primaryTitle, t1.title_basics.startYear, t1.title_basics.genres\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nJOIN name_basics t3 ON t1.title_basics.directors = t3.nconst\nJOIN title_principals t4 ON t1.title_basics.tconst = t4.tconst\nWHERE t2.averageRating > (SELECT AVG(t5.averageRating) FROM title_ratings t5 WHERE t5.tconst IN (SELECT t4.tconst FROM title_principals t4 WHERE t4.category = 'Horror'))\nAND t1.genres LIKE '%Horror%'\nAND t3.primaryProfession = 'Director'\nAND t4.job = 'Director'\nAND t4.category = 'Horror'\nAND t1.startYear BETWEEN 2010 AND 2019\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are horror movies, have a high average rating, and were released between 2010 and 2019. The query joins several tables to obtain information about the movies, such as the title, release year, and genre. The WHERE clause filters out movies that are not horror movies, and the JOIN clauses ensure that only movies with directors who have directed horror movies in the past are included. The ORDER BY clause sorts the results by average rating in descending order and then by release year in descending order.\n\nNote that this is just one possible approach to generating movie recommendations, and there are many other factors that could be considered when building a recommendation system. For example, the system could also take into account the user's historical preferences, such as the movies they have rated highly in the past. Additionally, the system could use more advanced techniques, such as collaborative filtering or content-based filtering, to generate recommendations."}
{"id": 22591, "query": "I recently saw the The Greatest Showman (2017) and loved it. Do you have any recommendations for musicals?", "history": ["Phantom Thread (2017)", "The Darkest Hour  (2011)", "The Hurt Locker (2008)", "Dunkirk  (2017)", "Darkest Hour  (2017)"], "groundtruth": ["Allied (2016)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Musical' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.title IN (SELECT title FROM title_basics WHERE primaryTitle = 'The Greatest Showman'))\nORDER BY t2.averageRating DESC;\n\nThis SQL query will select all musical movies from the title_basics table that have a higher average rating than The Greatest Showman (2017) and order them by their average rating in descending order. The join with the title_ratings table is used to get the average rating and number of votes for each movie, while the subquery is used to get the average rating of The Greatest Showman for comparison."}
{"id": 22592, "query": "I really enjoy drama/biography.  For example I enjoyed Phantom Thread (2017)", "history": ["The Sixth Sense (1999)", "The Shining  (1980)", "Picnic at Hanging Rock (1975)", "The Others  (2001)", "Bram Stoker's Dracula (1992)"], "groundtruth": ["Mary Shelley's Frankenstein  (1994)", "Mary Reilly  (1996)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM \ntitle_basics \nJOIN name_basics ON title_basics.tconst = name_basics.nconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \n\nWHERE \ntitle_basics.genres LIKE '%drama%' AND title_basics.genres LIKE '%biography%' \nAND title_basics.title NOT IN (SELECT title FROM title_ratings WHERE user_id =?)  -- exclude titles rated by the user\n\nGROUP BY \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_cre"}
{"id": 22594, "query": "Hi--I'm looking for a good ghost story", "history": ["The Hurt Locker (2008)", "Inglourious Basterds (2009)", "Dunkirk  (2017)", "Darkest Hour  (2017)"], "groundtruth": ["Escape to Victory (1981)", "Ice Cold in Alex (1958)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t3.category, t3.job, t3.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nWHERE t1.genres LIKE '%ghost story%'\nAND t2.averageRating > (\n    SELECT AVG(t4.averageRating)\n    FROM title_ratings t4\n    WHERE t4.tconst IN (\n        SELECT t5.tconst\n        FROM title_basics t5\n        WHERE t5.genres LIKE '%ghost story%'\n    )\n)\nAND t3.knownForTitles NOT IN (\n    SELECT t6.knownForTitles\n    FROM name_basics t6\n    WHERE t6.birthYear < 1980\n)\nAND t1.startYear > 2000\nAND t1.endYear < 2020\nAND t2.numVotes > 10000\nAND t3.primaryProfession NOT IN ('Actor', 'Actress')\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as ghost stories, have high average ratings, and have been released between 2000 and 2020. The query will also consider the user's historical preferences, which are movies that are similar to the ones they have previously rated highly. The query will exclude movies that are not ghost stories, have low ratings, or are not released within the specified time period. Additionally, the query will exclude actors and actresses from the known for titles list.\n\nPlease note that this is a hypothetical query, as I don't have access to the IMDb database. The actual query may vary depending on the specific schema and data of the database."}
{"id": 22595, "query": "I really like war movies like Darkest Hour  (2017)", "history": ["Lemmy  (2010)", "Immortal Beloved  (1994)", "Amadeus  (1984)"], "groundtruth": ["The Soloist (2009)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\nINNER JOIN \n    title_ratings ON \n        title_basics.tconst = title_ratings.tconst\nINNER JOIN \n    name_basics ON \n        title_basics.tconst = name_basics.tconst\nINNER JOIN \n    title_crew ON \n        title_basics.tconst = title_crew.tconst\nINNER JOIN \n    title_principals ON \n        title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.primaryTitle LIKE '%War%'  -- War movies\n    AND title_ratings.averageRating > 7  -- High rated movies\n    AND title_basics.startYear BETWEEN 1950 AND 2020  -- Movies released between 1950 and 2020\n    AND NOT EXISTS ( \n        SELECT \n            1 \n        FROM \n            title_ratings \n        WHERE \n            title_ratings.tconst = title_basics."}
{"id": 22596, "query": "Hi!  I love documentaries, especially docs about musicians.  Can you recommend something?", "history": ["Friday Night Lights  (2004)", "Clash of the Titans  (1981)", "Hoosiers (1986)"], "groundtruth": ["Radio  (2003)", "The Blind Side  (2009)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Documentary' AND title_basics.originalTitle LIKE '%Musician%'\nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.numVotes > 50)\nAND NOT EXISTS (SELECT 1 FROM name_basics WHERE name_basics.primaryName = title_basics.primaryTitle AND name_basics.birthYear > 1980)\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_principals.characters = 'Director' AND title_principals.job = 'Actor')\nORDER BY title_ratings.averageRating DESC, title_basics.startYear ASC\nLIMIT 5;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. The query first joins the title_basics, title_ratings, name_basics, and title_principals tables to get the required information. It then filters the results based on the user's input and historical preferences. The query only selects movies with a genre of 'Documentary' and original titles containing 'Musician'. It also excludes movies with more than 50 votes in the title ratings table and movies with directors born after 1980 in the name_basics table. Finally, the query orders the results by average rating in descending order and start year in ascending order, and limits the results to 5 movies."}
{"id": 22599, "query": "Hi there!  I really love Billy Bob Thornton.  Can you recommend something besides Sling Blade (1996) that has him in it?", "history": ["In Bruges (2008)", "Deuce Bigalow: Male Gigolo (1999)"], "groundtruth": ["Game Night (2018)", "The House  (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle LIKE '%Billy Bob Thornton%' AND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE primaryTitle LIKE '%Sling Blade%'))\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE knownForTitles LIKE '%Sling Blade%')\nAND title_principals.category NOT IN (SELECT category FROM title_principals WHERE job LIKE '%Sling Blade%')\nAND title_crew.directors NOT IN (SELECT directors FROM title_crew WHERE job LIKE '%Sling Blade%'])\nGROUP BY title_basics.tconst, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_"}
{"id": 22600, "query": "I like all kinds of stuff.  I'm looking for something funny to watch tonight", "history": ["The Shape of Water  (2017)", "The Sixth Sense (1999)"], "groundtruth": ["The Shack  (2017)", "Split (2017)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes \nFROM title_basics t1 \nJOIN title_ratings t2 ON t1.tconst = t2.tconst \nWHERE t1.genres = 'Comedy' AND t2.averageRating > 7 AND t2.numVotes > 1000 \nAND NOT EXISTS (SELECT 1 FROM title_principals t3 WHERE t3.tconst = t1.tconst AND t3.job = 'Director' AND t3.name IN ('Guillermo del Toro', 'James Cameron')) \nAND NOT EXISTS (SELECT 1 FROM name_basics t4 WHERE t4.nconst = t1.primaryTitle AND t4.primaryProfession = 'Actor' AND t4.knownForTitles IN ('The Shape of Water (2017)', 'The Sixth Sense (1999)')) \nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are comedies, have a high average rating, and have at least 1000 votes, while excluding movies directed by Guillermo del Toro or James Cameron, and excluding movies that any of the actors in the user's preference history have starred in. The query will also order the results by average rating in descending order and then by start year in descending order.\n\nPlease note that this is just an example query and you may need to adjust it to fit your specific use case and database schema."}
{"id": 22601, "query": "I'm looking for a solid drama", "history": ["Rebecca  (1940)", "Touch of Evil (1958)", "Citizen Kane (1941)", "Vertigo  (1958)", "To Catch a Thief (1955)", "The Magnificent Ambersons  (1942)", "The Maltese Falcon  (1941)"], "groundtruth": ["Rebecca  (1963)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes\nFROM \ntitle_basics \nJOIN title_ratings \nON title_basics.tconst = title_ratings.tconst\nWHERE \ntitle_basics.genres = 'drama' \nAND title_ratings.averageRating > (\n    SELECT \n    AVG(title_ratings.averageRating) \n    FROM \n    title_ratings \n    WHERE \n    title_ratings.tconst IN (\n        SELECT \n        tconst \n        FROM \n        title_basics \n        WHERE \n        title_basics.primaryTitle IN (\n            SELECT \n            title \n            FROM \n            (\n                SELECT \n                title \n                FROM \n                title_basics \n                WHERE \n                title_basics.genres = 'drama' \n                AND title_basics.startYear <= '1958' \n                AND title_basics.endYear >= '1940' \n                AND title_basics.runtimeMinutes > 90 \n                AND title_basics.isAdult = 0\n            ) AS top_movies\n            WHERE \n            title IN (\n                SELECT \n                title \n                FROM \n                title_basics \n                WHERE \n                title_basics.primaryTitle IN (\n                    SELECT \n                    title \n                    FROM \n                    title_basics \n                    WHERE \n                    title_basics.genres = 'drama' \n                    AND title_basics.startYear <= '1958' \n                    AND title_basics.endYear >= '1940' \n                    AND title_basics.runtimeMinutes > 90 \n                    AND title_basics.isAdult = 0\n                )\n            )\n        )\n    )\n)\nORDER BY \ntitle_"}
{"id": 22602, "query": "I like all kinds of movies.  I recently started watching a lot of old stuff on cable, and I really like Alfred Hitchcock, particularly Vertigo  (1958) and To Catch a Thief (1955).  Can you recommend any old movies?", "history": ["The Sixth Sense (1999)", "Titanic  (1997)", "The Other Woman  (2014)", "When Harry Met Sally... (1989)", "What About Bob%3F (1991)", "Say Anything... (1989)", "Love Story  (1986)", "Love Story  (1970)"], "groundtruth": ["Youth in Revolt  (2009)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%old%' AND t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst FROM title_basics t4 WHERE t4.primaryTitle = 'Vertigo' OR t4.primaryTitle = 'To Catch a Thief')\n)\nAND t1.startYear BETWEEN 1950 AND 1969\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_principals t3\n    WHERE t3.tconst = t1.tconst AND t3.category = 'actor' AND t3.job = 'director'\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are classified as \"old\" (i.e., released between 1950 and 1969), have a high average rating, and do not have any directors who are also actors in the movies. The query will also take into account the user's preference history, which includes a mix of old and recent movies, and will prioritize movies that are similar to \"Vertigo\" and \"To Catch a Thief\".\n\nNote that this is just one possible approach to generating movie recommendations, and there are many other factors that could be taken into account when building a more sophisticated recommendation system."}
{"id": 22603, "query": "How about a good romance, like Say Anything... (1989)", "history": ["Die Hard (1988)", "The Avengers  (2012)", "Deadpool  (2016)"], "groundtruth": ["Point Break (1991)", "The Taking of Pelham One Two Three  (1974)", "The Taking of Pelham 123  (2009)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'romance'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating)\n                                   FROM title_ratings\n                                   WHERE title_ratings.tconst IN (SELECT tconst\n                                                             FROM title_basics\n                                                             WHERE title_basics.genres = 'action'\n                                                             AND title_basics.startYear <= 1989\n                                                             AND title_basics.endYear >= 1989))\nAND NOT EXISTS (SELECT 1\n                 FROM title_ratings\n                 WHERE title_ratings.tconst = title_basics.tconst\n                 AND title_ratings.numVotes > (SELECT AVG(title_ratings.numVotes)\n                                               FROM title_ratings\n                                               WHERE title_ratings.tconst IN (SELECT tconst\n                                                                     FROM title_basics\n                                                                     WHERE title_basics.genres = 'action'\n                                                                     AND title_basics.startYear <= 1989\n                                                                     AND title_basics.endYear >= 1989)))\nAND title_basics.primaryTitle LIKE '%Say Anything...%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as \"romance\" and have an average rating higher than the average rating of action movies released in 1989"}
{"id": 22604, "query": "I'm looking for a really exciting action film.", "history": ["Contact  (1997)", "Close Encounters of the Third Kind (1977)", "The Martian  (2015)", "Cocoon  (1985)", "The Abyss (1989)"], "groundtruth": ["Looper  (2012)"], "output": "SELECT * FROM title_basics tb\nINNER JOIN title_ratings tr ON tb.tconst = tr.tconst\nINNER JOIN name_basics nb ON tb.primaryTitle = nb.primaryName\nINNER JOIN title_crew tc ON tb.directors = tc.directors\nINNER JOIN title_principals tp ON tb.ordering = tp.ordering\nWHERE tb.genres = 'Action'\nAND tp.category = 'Actor'\nAND tp.job = 'Lead'\nAND tp.characters = 'Exciting'\nAND tr.averageRating > 7\nAND tb.startYear = 1990\nAND tb.endYear = 2015\nAND tb.runtimeMinutes > 120\n\n;"}
{"id": 22605, "query": "I'm looking for something to distract me!  Maybe sci-fi like Cocoon  (1985)", "history": ["Fargo  (1996)", "Heathers (1988)"], "groundtruth": ["The War of the Roses  (1989)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_ratings.averageRating,\n    title_crew.directors,\n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.genres LIKE '%Science Fiction%'\n    AND title_ratings.numVotes > 1000\n    AND title_crew.directors LIKE '%Ron Howard%'\n    AND title_principals.characters LIKE '%Wilson%'\n    AND title_basics.startYear = 1985\n    AND title_basics.endYear = 1985\n    AND title_basics.runtimeMinutes > 90\n    AND title_basics.isAdult = 0\n\nGROUP BY \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle\n\nHAVING \n    AVG(title_ratings.averageRating) > 7\n    AND COUNT(DISTINCT title_principals.characters) > 4\n\nORDER BY \n    AVG(title_ratings.averageRating) DESC,\n    COUNT(DISTINCT title_principals.characters) DESC;\n\n;"}
{"id": 22610, "query": "Good! Looking for a movie recommendation for this weekend. I like dark comedies, like Fargo  (1996).", "history": ["Jurassic World (2015)", "Deadpool 2  (2018)", "Superman  (1978)", "Black Panther (2018)", "Spiders 3D (2013)", "Avengers: Infinity War (2018)"], "groundtruth": ["Guardians of the Galaxy Vol. 2 (2017)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n ON t1.primaryName = n.primaryName\nWHERE t1.genres LIKE '%dark comedy%'\nAND t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (\n        SELECT t4.tconst\n        FROM title_ratings t4\n        JOIN title_basics t5 ON t4.tconst = t5.tconst\n        WHERE t5.titleType = 'Feature Film'\n        AND t5.startYear = 2015\n    )\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_ratings t3\n    WHERE t3.tconst = t1.tconst\n    AND t3.numVotes > 1000\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_ratings t3\n    WHERE t3.tconst = t1.tconst\n    AND t3.averageRating > 8\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_principals t4\n    WHERE t4.tconst = t1.tconst\n    AND t4.category = 'Actor'\n    AND t4.job = 'Lead'\n    AND t4.characters LIKE '%Fargo%'\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\n;"}
{"id": 22612, "query": "They recommend me a movie of heroes", "history": ["Memento  (2000)", "Eraserhead (1977)", "Aliens  (1986)", "The Silence of the Lambs  (1991)"], "groundtruth": ["Inception (2010)"], "output": "SELECT * FROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nJOIN name_basics nb ON tb.primaryName = nb.primaryName\nJOIN title_crew tc ON tb.directors = tc.directors\nJOIN title_principals tp ON tb.tconst = tp.tconst\nWHERE tb.genres LIKE '%heroes%'\nAND tr.averageRating > (\n    SELECT AVG(tr2.averageRating)\n    FROM title_ratings tr2\n    JOIN name_basics nb2 ON tr2.tconst = nb2.primaryName\n    WHERE nb2.birthYear BETWEEN 1970 AND 1989\n    AND tr2.numVotes > 1000\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_ratings tr3\n    JOIN name_basics nb3 ON tr3.tconst = nb3.primaryName\n    WHERE tr3.tconst = tb.tconst\n    AND nb3.primaryName IN (\n        SELECT primaryName\n        FROM name_basics\n        WHERE birthYear BETWEEN 1970 AND 1989\n    )\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_ratings tr4\n    JOIN title_crew tc4 ON tr4.tconst = tc4.directors\n    WHERE tr4.tconst = tb.tconst\n    AND tc4.directors IN (\n        SELECT directors\n        FROM title_crew\n        WHERE directors LIKE '%Christopher Nolan%'\n    )\n)\nORDER BY tb.startYear DESC, tb.endYear ASC, tb.runtimeMinutes ASC\nLIMIT 10;\n\nThis SQL query uses the IMDb database tables to retrieve movies that are classified as \"heroes\" and have high average ratings, are not rated by users born between 1970 and 1989, and do not have any crew members who are also associated with Christopher Nolan. The results are sorted by start year, end year,"}
{"id": 22614, "query": "Hi there.  Can you recommend a movie for me?", "history": ["H. G. Wells' The War of the Worlds  (2005)", "Minority Report  (2002)", "Blade Runner (1982)", "The Fifth Element", "The War of the Worlds  (1953)"], "groundtruth": ["Blade Runner 2049 (2017)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nWHERE title_basics.genres = 'Science Fiction' AND \ntitle_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE genres = 'Science Fiction')) AND \ntitle_basics.startYear BETWEEN 1980 AND 2010 AND \ntitle_basics.endYear IS NULL AND \ntitle_basics.runtimeMinutes > 90\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_principals.tconst = title_basics.tconst AND title_principals.category = 'Actor' AND title_principals.job = 'Director')\nAND NOT EXISTS (SELECT 1 FROM title_crew WHERE title_crew.tconst = title_basics.tconst AND title_crew.job = 'Director')\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE title_principals.tconst = title_basics.tconst AND title_principals.category = 'Actor' AND title_principals.job = 'Writer')\nAND NOT EXISTS (SELECT 1 FROM title_crew WHERE title_"}
{"id": 22619, "query": "Hi, I'm looking for something edgy and exciting like Blade Runner (1982)", "history": ["The Other Woman  (2014)", "Ghostbusters  (2016)"], "groundtruth": ["Game Night (2018)", "Girls Trip (2017)"], "output": "SELECT t1.title_id, t1.title, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nJOIN name_basics n ON t1.primaryTitle = n.primaryName\nWHERE t1.genres = 'Science Fiction' AND t1.startYear = 1982\nAND t2.averageRating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.title_id IN (\n        SELECT t4.title_id\n        FROM title_basics t4\n        JOIN title_ratings t5 ON t4.title_id = t5.title_id\n        WHERE t4.primaryTitle = 'The Other Woman'\n        AND t5.averageRating > 6\n    )\n)\nAND t2.numVotes > 10000\nAND t1.title NOT IN (SELECT title_id FROM title_basics WHERE primaryTitle = 'Ghostbusters')\nGROUP BY t1.title_id\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are science fiction, released in 1982, have a high average rating, and are not \"Ghostbusters\". The query uses a subquery to identify movies that have a high average rating and are not \"The Other Woman\". The final result will be a list of movies that meet all of these criteria and are ordered by their average rating in descending order."}
{"id": 22680, "query": "movies for kids", "history": ["The Incredibles (2004)", "Super Troopers (2001)", "Wreck-It Ralph (2012)", "Pineapple Express  (2008)"], "groundtruth": ["Kubo and the Two Strings (2016)"], "output": "SELECT * FROM (\nSELECT t.title_id, t.title, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, \n       AVG(r.rating) AS avgRating, COUNT(r.title_id) AS numVotes\nFROM title_basics t\nJOIN title_ratings r ON t.title_id = r.title_id\nWHERE t.titleType ='movie' AND t.isAdult = 0\nGROUP BY t.title_id\nHAVING AVG(r.rating) > (SELECT AVG(r2.rating) FROM title_ratings r2 WHERE r2.title_id IN (SELECT title_id FROM title_ratings WHERE user_id = <current_user_id>) AND r2.numVotes > 50)\n) AS recommendedTitles\nWHERE recommendedTitles.title LIKE '%for kids%'\nORDER BY recommendedTitles.avgRating DESC;\n\n;"}
{"id": 22694, "query": "But you can recommend me some terror movies?", "history": ["The Martian  (2015)", "Super Troopers (2001)", "Aliens  (1986)", "Deadpool  (2016)", "Super Troopers 2 (2018)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Terror'\nAND title_ratings.numVotes > 1000\nAND title_principals.category = 'Actors'\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%Terror%'\nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE birthYear > 1980)\nAND title_basics.startYear BETWEEN 1970 AND 2019\nAND title_basics.endYear BETWEEN 1970 AND 2019\nAND title_basics.runtimeMinutes BETWEEN 70 AND 120\nAND title_ratings.averageRating > 7\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query recommends movies to the user based on their input preference of terror movies, historical preferences, and actors' jobs. The query filters out movies with low ratings, movies with fewer than 1000 votes, and actors born after 1980. Additionally, the query selects movies with a runtime between 70 and 120 minutes and a start and end year between 1970 and 2019. Finally, the query orders the results by the average rating in descending order."}
{"id": 22695, "query": "Some action movie do you have in mind?", "history": ["A Good Day to Die Hard (2013)", "Die Hard with a Vengeance (1995)", "Die Hard (1988)", "Deadpool 2  (2018)", "Black Panther (2018)", "The Avengers  (2012)", "Avengers: Infinity War (2018)", "Live Free or Die Hard (2007)", "Deadpool  (2016)"], "groundtruth": ["Vacation  (2015)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres,\ntitle_ratings.averageRating, title_ratings.numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Action%'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (\n        SELECT tconst\n        FROM title_basics\n        WHERE genres LIKE '%Action%'\n    )\n)\nAND title_basics.startYear BETWEEN 2000 AND 2022\nAND title_basics.endYear BETWEEN 2000 AND 2022\nAND title_principals.category = 'Actor'\nAND title_principals.job = 'Lead'\nAND title_basics.isAdult = 0\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as action movies, have a high average rating, and were released between 2000 and 2022. The query will also filter out adult-rated movies and focus on lead actors. The result set will be ordered by the average rating in descending order."}
{"id": 22707, "query": "I'm looking for a good comedy or animated movie like The Incredibles (2004) because I'm so eager for the new Incredibles 2 (2018)", "history": ["Game Night (2018)", "Girls Trip (2017)", "21 Jump Street  (2012)", "What About Bob%3F (1991)", "Super Troopers (2001)", "Stripes  (1981)", "Pineapple Express  (2008)", "Half Baked (1998)"], "groundtruth": ["The Other Woman  (2014)"], "output": "SELECT tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles, directors, writers\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE titleType = 'comedy' OR titleType = 'animated'\nAND startYear BETWEEN 2000 AND 2018\nAND (\n    EXISTS (\n        SELECT 1\n        FROM title_ratings\n        WHERE title_basics.tconst = title_ratings.tconst\n        AND averageRating > 7\n        AND numVotes > 1000\n    )\n    OR\n    EXISTS (\n        SELECT 1\n        FROM title_principals\n        WHERE title_basics.tconst = title_principals.tconst\n        AND category = 'writer'\n        AND job ='screenplay'\n        AND (\n            EXISTS (\n                SELECT 1\n                FROM title_ratings\n                WHERE title_basics.tconst = title_ratings.tconst\n                AND averageRating > 7\n                AND numVotes > 1000\n            )\n            OR\n            EXISTS (\n                SELECT 1\n                FROM title_principals\n                WHERE title_basics.tconst = title_principals.tconst\n                AND category = 'director'\n                AND job = 'directing'\n                AND (\n                    EXISTS (\n                        SELECT 1\n                        FROM title_ratings\n                        WHERE title_basics.tconst = title_ratings.tconst\n                        AND averageRating > 7\n                        AND numVotes > 1000\n                    )\n                    OR\n                    EXISTS"}
{"id": 22708, "query": "I love funny movies like Pineapple Express  (2008) and Super Troopers (2001)", "history": ["Groundhog Day  (1993)", "Sixteen Candles (1984)", "Despicable Me 2 (2013)", "Super Troopers (2001)", "The Incredibles (2004)", "Say Anything... (1989)", "Minions  (2015)", "Super Troopers 2 (2018)", "Despicable Me 3 (2017)", "Despicable Me (2010)"], "groundtruth": ["St. Vincent  (2014)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = 0 -- exclude adult movies\nAND title_basics.genres LIKE '%comedy%' -- only include comedies\nAND name_basics.primaryName NOT IN ('Bill Murray', 'Chevy Chase') -- exclude movies with Bill Murray or Chevy Chase\nAND title_basics.startYear BETWEEN 1980 AND 2018 -- only include movies released between 1980 and 2018\nAND title_basics.endYear IS NULL -- only include movies with no specified end year\nAND title_principals.category = 'Actor' -- only include movies with actors\nAND title_principals.job = 'Lead' -- only include movies with lead actors\nAND title_principals.characters LIKE '%funny%' -- only include movies with funny characters\n\nORDER BY title_basics.startYear DESC, title_basics.endYear ASC, title_basics.runtimeMinutes ASC;\n\nThis SQL query will retrieve movies that are comedies, have a release date between 1980 and 201"}
{"id": 22709, "query": "I'd love some movie recommendations... good comedies like Super Troopers (2001)", "history": ["Game Night (2018)", "The Secret Life of Pets (2016)", "The Incredibles (2004)", "Brave  (2012)", "Coco  (2017)", "Super Troopers (2001)", "Moana  (2016)"], "groundtruth": ["Ferdinand (2017)"], "output": "SELECT \ntitle_basics.title, \ntitle_ratings.averageRating, \ntitle_crew.directors, \ntitle_principals.characters\n\nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \n\nWHERE \ntitle_basics.genres LIKE '%comedy%' \nAND title_ratings.numVotes > 10000 \nAND title_crew.directors LIKE '%Jay Roach%' \nAND title_principals.characters LIKE '%Eli Roth%' \n\nGROUP BY \ntitle_basics.title \nHAVING \nAVG(title_ratings.averageRating) > 7 \n\nORDER BY \nAVG(title_ratings.averageRating) DESC;\n\nThis SQL query will select movies that are classified as comedies, have more than 10,000 votes, were directed by Jay Roach, and have characters played by Eli Roth. The query will also filter out movies that do not meet these criteria. The results will be grouped by title, and the average rating will be calculated for each group. Finally, the results will be sorted in descending order based on the average rating.\n\nNote that this query is just an example and may not return the exact results you are looking for. The IMDb database is a large and complex database, and there may be other factors that you want to consider when selecting movie recommendations. Additionally, the query may need to be optimized for performance, depending on the size of the database and the number of results you want to return."}
{"id": 22710, "query": "I'm looking for a good comedy or animated movie...", "history": ["Bridesmaids  (2011)"], "groundtruth": ["Game Night (2018)", "Super Troopers (2001)", "Super Troopers 2 (2018)"], "output": "SELECT t.title, t.titleType, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres, \n       r.averageRating, r.numVotes, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles, \n       c.directors, c.writers, c.ordering, c.category, c.job, c.characters\nFROM title_basics t\nJOIN title_ratings r ON t.tconst = r.tconst\nJOIN name_basics n ON t.primaryTitle = n.primaryTitle\nJOIN title_crew c ON t.tconst = c.tconst\nWHERE t.genres LIKE '%comedy%' OR t.genres LIKE '%animated%'\nAND r.averageRating > (SELECT AVG(r2.averageRating) FROM title_ratings r2 WHERE r2.tconst = t.tconst AND r2.numVotes > 1000)\nAND r.numVotes > 1000\nAND NOT EXISTS (SELECT 1 FROM title_ratings r3 WHERE r3.tconst = t.tconst AND r3.averageRating > r.averageRating)\nAND NOT EXISTS (SELECT 1 FROM name_basics n3 WHERE n3.primaryName = n.primaryName AND n3.birthYear > n.birthYear)\nAND NOT EXISTS (SELECT 1 FROM title_crew c3 WHERE c3.tconst = t.tconst AND c3.directors = c.directors)\nAND NOT EXISTS (SELECT 1 FROM title_principals p3 WHERE p3.tconst = t.tconst AND p3.category = 'actress' AND p3.job = 'lead' AND p3.characters = 'Maya Rudolph')\nORDER BY r.averageRating DESC, t.startYear DESC;\n\nThis query uses a combination of joins and subqueries to retrieve movies that are highly rated, have a high number of votes, and have not been rated recently. It also"}
{"id": 22711, "query": "Yes, I like comedies.", "history": ["Blade Runner (1982)", "Cocoon  (1985)", "The Abyss (1989)"], "groundtruth": ["Blade Runner 2049 (2017)"], "output": "SELECT t1.title_id, t1.title, t1.original_title, t1.start_year, t1.end_year, t1.runtime_minutes, t1.genres, t2.average_rating, t2.num_votes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nJOIN name_basics n ON t1.primary_title = n.primary_name\nWHERE t1.genres LIKE '%comedy%'\nAND t2.average_rating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.title_id IN (\n        SELECT t4.title_id\n        FROM title_basics t4\n        JOIN title_principals t5 ON t4.title_id = t5.title_id\n        WHERE t5.category = 'actor'\n        AND t5.job = 'writer'\n    )\n)\nAND t1.start_year BETWEEN 1980 AND 1990\nAND t1.end_year BETWEEN 1985 AND 1995\nAND t2.num_votes > 1000\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_ratings t3\n    WHERE t3.title_id = t1.title_id\n    AND t3.average_rating > t2.average_rating\n)\nORDER BY t2.average_rating DESC;\n\nThis SQL query will retrieve movies that are comedies, have high ratings, and are not too old or too new, based on the user's preference history and current input. The query joins several tables to gather information about the movies, such as their genres, ratings, and release years. The subqueries are used to filter out movies that have high ratings but are not recommended based on the user's history and current input. The NOT EXISTS clause is used to exclude movies that have already been recommended to the user. The final result is sorted by average rating in descending order."}
{"id": 22712, "query": "I'm looking for something like Blade Runner (1982)", "history": ["My Big Fat Greek Wedding (2002)", "Lars and the Real Girl (2007)"], "groundtruth": ["Muriel's Wedding (1994)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.title LIKE '%Blade Runner%' \n    AND title_ratings.averageRating > 7 \n    AND title_ratings.numVotes > 10000\n    AND name_basics.primaryName NOT LIKE '%(2002)%' \n    AND name_basics.primaryName NOT LIKE '%(2007)%'\n    AND title_crew.directors LIKE '%Ridley Scott%' \n    AND title_principals.category LIKE '%Science Fiction%'\n    AND title_principals.job LIKE '%Actor%'\n    AND title_principals.characters LIKE"}
{"id": 22721, "query": "Hi, I'm looking for something fun to watch.  Maybe like Frozen (2013)", "history": ["Black Hawk Down  (2002)", "Atonement  (2007)", "Dunkirk  (2017)", "Darkest Hour  (2017)"], "groundtruth": ["Enemy at the Gates (2001)"], "output": "SELECT \n  title_basics.title,\n  title_basics.primaryTitle,\n  title_basics.originalTitle,\n  title_basics.isAdult,\n  title_basics.startYear,\n  title_basics.endYear,\n  title_basics.runtimeMinutes,\n  title_basics.genres,\n  title_ratings.averageRating,\n  title_ratings.numVotes\nFROM \n  title_basics \n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE \n  title_basics.primaryTitle LIKE '%Frozen%'  -- User input\n  AND title_ratings.averageRating > (\n    SELECT \n      AVG(title_ratings.averageRating)\n    FROM \n      title_ratings\n    WHERE \n      title_ratings.tconst IN (\n        SELECT \n          tconst\n        FROM \n          title_basics\n        WHERE \n          title_basics.primaryTitle IN (\n            SELECT \n              title_basics.primaryTitle\n            FROM \n              title_basics\n            WHERE \n              title_basics.isAdult = 0  -- User preference history\n          )\n        )\n      )\n    )\nORDER BY \n  title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"Frozen\" (2013) and have a high average rating based on the user's historical preferences. The query joins the \"title_basics\" and \"title_ratings\" tables to retrieve movie information and ratings, respectively. The WHERE clause filters the results to include only movies that are not adult-rated and have a primary title that matches the user's input. The subquery in the WHERE clause calculates the average rating of movies that match the user's historical preferences, and the results are sorted in descending order by average rating."}
{"id": 22722, "query": "I;d like to see some war movies this weekend similar to Dunkirk  (2017) , Darkest Hour  (2017) , Atonement  (2007)", "history": ["Lars and the Real Girl (2007)", "Meet the Fockers (2004)", "What About Bob%3F (1991)", "The Best Exotic Marigold Hotel", "The Grand Budapest Hotel (2014)"], "groundtruth": ["The Other Woman  (2014)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE \n    title_basics.genres LIKE '%War%'\n    AND title_basics.startYear BETWEEN 2000 AND 2020\n    AND title_ratings.averageRating > 7\n    AND title_ratings.numVotes > 1000\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            name_basics\n        WHERE \n            name_basics.primaryName = title_basics.primaryTitle\n            AND name_basics.birthYear = 2007\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_crew\n        WHERE \n            title_crew.directors = title_basics.primaryTitle\n            AND title_crew.writers = title_basics.primaryTitle\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals\n        WHERE \n            title_principals.ordering = title_basics.tconst\n            AND title_principals.category = 'actor'\n            AND title_principals.job = 'lead'\n            AND title_principals.characters = 'Tom Hanks'\n    )\n    AND title_basics.primaryTitle NOT IN (\n        SELECT \n            1\n        FROM \n            user_preferences\n        WHERE \n            user_preferences.title = title_basics.primaryTitle\n    )\n\nORDER BY \n    title_basics.startYear DESC, \n    title_ratings.averageRating DESC;"}
{"id": 22727, "query": "Sounds good. Can you tell me about other funny movies?", "history": ["Seven  (1995)", "Snatch  (2000)", "Fight Club (1999)"], "groundtruth": ["Seven Psychopaths (2012)", "John Wick (2014)", "Source Code (2011)"], "output": "SELECT title_basics.title, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Guy%Ritchie%'\nAND title_principals.characters LIKE '%Brad%Pitt%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query joins four tables: title_basics, title_ratings, title_crew, and title_principals. It filters the results to only include comedies with more than 1000 votes, directed by Guy Ritchie, and starring Brad Pitt. The results are then sorted in descending order by average rating."}
{"id": 22730, "query": "yes Fight Club (1999)", "history": ["A Quiet Place (2018)", "The Shining  (1980)", "Resolution  (2012)", "World War Z ", "The Witch  (2015)", "Cujo  (1983)"], "groundtruth": ["The Hatching (2016)", "The Shape of Water  (2017)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.title LIKE '%Fight Club%'\nAND title_ratings.averageRating > 7\nAND title_principals.category = 'actor'\nAND title_principals.job = 'director'\nAND name_basics.primaryName = 'David Fincher'\nAND NOT EXISTS (\n  SELECT 1 \n  FROM title_basics \n  WHERE title_basics.tconst = title_principals.tconst \n  AND title_basics.isAdult = 1\n)\nGROUP BY title_basics.title\nHAVING COUNT(DISTINCT title_principals.job) > 1\nORDER BY title_basics.startYear DESC;\n\nThis SQL query will retrieve movies that are similar to"}
{"id": 22732, "query": "I don't really enjoy war movies. I much prefer horror. My favorites are The Shining  (1980) , The Witch  (2015) and Resolution  (2012)", "history": ["Mission: Impossible ", "The Manchurian Candidate  (2004)", "Gone Girl  (2014)"], "groundtruth": ["Unstoppable  (2013)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, name_basics.primaryName, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres NOT IN ('war')\nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE title_basics.tconst = title_ratings.tconst AND genres = 'horror')\nAND title_basics.primaryTitle NOT IN ('The Shining', 'The Witch', 'Resolution')\nAND title_principals.characters NOT IN ('Mission: Impossible', 'The Manchurian Candidate (2004)', 'Gone Girl (2014)')\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are not classified as \"war\" movies, have an average rating higher than the average rating of horror movies, and do not have the same title as the user's preferred movies. The query will also consider the primary title and characters of the movies to ensure that they do not match the user's preferred movies. Finally, the query will order the results by the average rating in descending order."}
{"id": 22733, "query": "Suspense like The Manchurian Candidate  (2004)", "history": ["Fargo  (1996)", "A Quiet Place (2018)", "World War Z "], "groundtruth": ["The Sniper  (2009)"], "output": "SELECT \n  title_basics.title, \n  title_basics.primaryTitle, \n  title_basics.originalTitle, \n  title_basics.isAdult, \n  title_basics.startYear, \n  title_basics.endYear, \n  title_basics.runtimeMinutes, \n  title_basics.genres, \n  title_ratings.averageRating, \n  title_ratings.numVotes, \n  name_basics.primaryName, \n  name_basics.birthYear, \n  name_basics.deathYear, \n  name_basics.primaryProfession, \n  name_basics.knownForTitles, \n  title_crew.directors, \n  title_crew.writers, \n  title_principals.ordering, \n  title_principals.category, \n  title_principals.job, \n  title_principals.characters\nFROM \n  title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  JOIN name_basics ON title_basics.tconst = name_basics.tconst\n  JOIN title_crew ON title_basics.tconst = title_crew.tconst\n  JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n  title_basics.title LIKE '%The Manchurian Candidate%' \n  AND title_basics.isAdult = 0\n  AND title_ratings.averageRating > 7\n  AND title_principals.category = 'Suspense'\n  AND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE knownForTitles LIKE '%Fargo%')\n  AND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE knownForTitles LIKE '%A Quiet Place%')\n  AND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics"}
{"id": 22734, "query": "I do love horror movies", "history": ["The Lord of the Rings: The Fellowship of the Ring (2001)", "Avatar  (2009)", "Pirates of the Caribbean "], "groundtruth": ["Pan's Labyrinth (2006)"], "output": "SELECT * FROM (\n  SELECT title_basics.tconst, title_basics.titleType, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres,\n       title_ratings.averageRating, title_ratings.numVotes\n  FROM title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  WHERE title_basics.titleType ='movie' AND title_basics.isAdult = 0\n) AS recommended_movies\nWHERE exists (\n  SELECT 1\n  FROM name_basics\n  JOIN title_principals ON name_basics.nconst = title_principals.nconst\n  WHERE name_basics.primaryProfession = 'actor' AND title_principals.category = 'actor'\n  AND title_principals.job = 'actress'\n  AND name_basics.birthYear = 1977\n)\nAND recommended_movies.runtimeMinutes > 90\nAND recommended_movies.genres LIKE '%horror%'\nORDER BY recommended_movies.averageRating DESC, recommended_movies.numVotes DESC;\n\nThis query first joins the title_basics and title_ratings tables to get the movie details and ratings. It then filters the results to only include movies that are not adult-rated and have a runtime of more than 90 minutes. Next, it joins the name_basics and title_principals tables to get the name of the actresses who were born in 1977. Finally, it filters the results to only include movies that have an actress born in 1977 in the cast and are horror movies. The results are sorted by average rating and number of votes in descending order."}
{"id": 22735, "query": "Hello!  I'm in the mood for an advernture or fantasy.  Something similar to Pirates of the Caribbean  .", "history": ["The Blair Witch Project (1999)", "Ghost Story  (1981)"], "groundtruth": ["Sleepy Hollow High (2000)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.genres = 'adventure' OR title_basics.genres = 'fantasy' \nAND title_ratings.averageRating > (SELECT AVG(averageRating) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE genres = 'adventure' OR genres = 'fantasy')) \nAND title_ratings.numVotes > (SELECT COUNT(*) FROM title_ratings WHERE tconst IN (SELECT tconst FROM title_basics WHERE genres = 'adventure' OR genres = 'fantasy')) \nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE birthYear < 1980) \nAND name_basics.primaryName NOT IN (SELECT primaryName FROM name_basics WHERE deathYear > 2000) \nAND title_basics.startYear > 1980 \nAND title_basics.end"}
{"id": 22736, "query": "Good afternoon!  I'm in the mood to sit in the cool air conditioning and watch a good ghost story.", "history": ["The Lion King (1994)", "The Jungle Book  (2016)", "Jungle Book  (2018)", "Shrek (2001)"], "groundtruth": ["Ferdinand (2017)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_crew.directors, \ntitle_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Ghost Story'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Andy Serkis%'\nAND title_principals.characters LIKE '%ghost%'\nAND title_basics.startYear > 2010\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as \"Ghost Story\" and have more than 1000 votes, directed by Andy Serkis, and have characters that are related to ghosts. The query will also filter out movies that were released before 2010. The results will be sorted in descending order of the average rating."}
{"id": 22739, "query": "Can you suggest some good sci-fi movie?", "history": ["What About Bob%3F (1991)", "Baby Mama  (2008)", "Bridesmaids  (2011)", "Stripes  (1981)", "Caddyshack (1980)"], "groundtruth": ["The Other Woman  (2014)"], "output": "SELECT * FROM title_basics tb \nJOIN title_ratings tr ON tb.tconst = tr.tconst \nJOIN name_basics nb ON tb.primaryName = nb.primaryName \nJOIN title_crew tc ON tb.directors = tc.directors \nJOIN title_principals tp ON tb.ordering = tp.ordering \nWHERE tb.genres LIKE '%Science Fiction' AND tp.category = 'Actor' AND tp.job = 'Lead' AND tp.characters LIKE '%alien' \nORDER BY tr.averageRating DESC, tb.startYear DESC;\n\nThis SQL query will retrieve movies from the IMDb database that are classified as science fiction, have a lead actor, and feature an alien character. The query will also consider the user's historical preferences, which are stored in the title_ratings and name_basics tables. The query will return a list of recommended movies, sorted by their average rating and release year.\n\nNote that this is just one possible approach to generating movie recommendations based on user input and historical preferences. There are many other factors that could be considered, such as the user's search history, their watchlist, and their ratings for specific genres or directors. The specific approach will depend on the requirements of the movie recommendation system and the structure of the IMDb database."}
{"id": 22742, "query": "Not a fan of war movies. Can you recommend some good comedies?", "history": ["Game Night (2018)", "What About Bob%3F (1991)", "The Interview (2014)", "Anchorman "], "groundtruth": ["The Other Woman  (2014)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_principals.characters\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres NOT IN ('war')\nAND title_ratings.averageRating > 7\nAND title_principals.job = 'comedy'\nAND title_principals.characters NOT NULL\n\nGROUP BY title_basics.title, title_basics.primaryTitle\n\nHAVING COUNT(DISTINCT title_principals.job) > 1;\n\n;"}
{"id": 22796, "query": "I love comedy movies", "history": ["Jumanji (1995)", "Ocean's 8 (2018)", "National Treasure  (2004)"], "groundtruth": ["Jumanji  (2017)", "Solo  (2008)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles\nFROM \n    title_basics \nINNER JOIN \n    title_ratings ON \n        title_basics.tconst = title_ratings.tconst \nINNER JOIN \n    name_basics ON \n        title_basics.nconst = name_basics.nconst \nWHERE \n    title_basics.genres LIKE '%comedy%' \nAND \n    title_ratings.averageRating > (\n        SELECT \n            AVG(title_ratings.averageRating) \n        FROM \n            title_ratings \n        WHERE \n            title_ratings.tconst IN (\n                SELECT \n                    title_basics.tconst \n                FROM \n                    title_basics \n                WHERE \n                    title_basics.genres LIKE '%comedy%'\n            )\n            AND title_ratings.numVotes > 1000\n    )\nAND \n    NOT EXISTS (\n        SELECT \n            1 \n        FROM \n            title_ratings \n        WHERE \n            title_ratings.tconst = title_basics.tconst \n        AND \n            title_ratings.numVotes > 1000\n        AND \n            title_ratings.averageRating < (\n                SELECT \n                    AVG(title_ratings.averageRating) \n                FROM \n                    title"}
{"id": 22800, "query": "I'm great, thanks for asking!  I'm in the mood for a great 80's horror film.  My favorite horror film of all time is probably The Lost Boys (1987) .", "history": ["Pretty Woman (1990)", "North by Northwest (1959)"], "groundtruth": ["Inception (2010)", "San Andreas  (2015)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.primaryTitle = 'The Lost Boys'\nAND title_ratings.averageRating > 6.5\nAND title_principals.category = 'Horror'\nAND title_principals.job = 'Film'\nAND title_crew.directors LIKE '%Joel Schumacher%'\nAND title_crew.writers LIKE '%Joss Whedon%'\nAND name_basics.primaryName LIKE '%Corey Haim%'\nAND name_basics.knownForTitles LIKE '%The Lost Boys%'\nORDER BY title_ratings.averageRating DESC, title_basics.startYear ASC;"}
{"id": 22802, "query": "I'm good, and I Hope you are as well!  I'm  in the mood for a silly comedy.  Something along the lines of Weekend at Bernie's (1989) , perhaps?", "history": ["Indiana Jones and the Temple of Doom (1984)", "Indiana Jones ", "Romancing the Stone (1984)"], "groundtruth": ["Mad Max: Fury Road (2015)"], "output": "SELECT * FROM title_basics tb\nJOIN title_ratings tr ON tb.tconst = tr.tconst\nJOIN name_basics nb ON tb.primaryName = nb.nconst\nJOIN title_crew tc ON tb.directors = tc.directors\nJOIN title_principals tp ON tb.tconst = tp.tconst\nWHERE tb.genres = 'Comedy'\nAND tp.category = 'Actors'\nAND tp.job = 'Actor'\nAND tp.characters LIKE '%silly%'\nAND tr.averageRating > 7\nAND NOT EXISTS (SELECT 1 FROM title_ratings tr2 WHERE tr2.tconst = tb.tconst AND tr2.numVotes > 1000)\nORDER BY tr.averageRating DESC;\n\nThis SQL query will retrieve movies that are comedies, have a high average rating (> 7), and do not have more than 1000 votes. It will also filter out movies that have actors with the word \"silly\" in their character descriptions. The result set will be ordered by the average rating in descending order."}
{"id": 22816, "query": "I like family movies like The Greatest Showman (2017)", "history": ["The Karate Kid (1984)"], "groundtruth": ["Diary of a Wimpy Kid  (2010)", "The Karate Kid  (2010)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t.title_ratings.averageRating, \n    t.title_ratings.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles\nFROM \n    title_basics t \n    JOIN title_ratings tr ON t.tconst = tr.tconst \n    JOIN name_basics n ON t.primaryTitle = n.primaryName\nWHERE \n    t.genres = 'family' \n    AND t.title_basics.title LIKE '%The Greatest Showman%' \n    AND t.title_ratings.averageRating > 7 \n    AND t.title_ratings.numVotes > 1000 \n    AND n.primaryName NOT IN (SELECT n.primaryName FROM name_basics WHERE n.knownForTitles LIKE '%The Karate Kid%')\nGROUP BY \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t.title_ratings.averageRating, \n    t.title_ratings.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear,"}
{"id": 22818, "query": "Something scary.", "history": ["Scream  (1996)"], "groundtruth": ["The Conjuring (2013)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.tconst = name_basics.tconst\nINNER JOIN title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.title LIKE '%scary%'\nAND title_ratings.averageRating > 6\nAND title_principals.category ='movie'\nAND title_principals.job = 'actor'\nAND title_principals.characters = 'horror'\n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name"}
{"id": 22833, "query": "Do you know any good horror movies?", "history": [], "groundtruth": ["The Happening  (2008)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Horror%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Guillermo del Toro%'\nAND title_principals.characters LIKE '%Mia Wasikowska%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve horror movies that have a high number of votes, are directed by Guillermo del Toro, and feature Mia Wasikowska in a leading role. The query will join the title_basics, title_ratings, title_crew, and title_principals tables to retrieve the required information. The WHERE clause will filter out non-horror movies and movies with fewer than 1000 votes. The AND clause will filter out movies that do not have Guillermo del Toro as a director or Mia Wasikowska in a leading role. Finally, the ORDER BY clause will sort the results by average rating in descending order."}
{"id": 22838, "query": "Ok I like action and comedy and good ones you know of", "history": ["The Nutty Professor  (1996)", "Overboard  (1987)", "Private Benjamin  (1980)", "Bad Moms (2016)"], "groundtruth": ["Rush Hour  (1998)"], "output": "SELECT \n    title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres,\n    title_ratings.averageRating, title_ratings.numVotes\nFROM \n    title_basics\nINNER JOIN \n    title_ratings\nON \n    title_basics.tconst = title_ratings.tconst\nWHERE \n    title_basics.genres LIKE '%Action%' AND title_basics.genres LIKE '%Comedy%' AND \n    title_ratings.averageRating > (\n        SELECT \n            AVG(title_ratings.averageRating)\n        FROM \n            title_ratings\n        WHERE \n            title_ratings.tconst IN (\n                SELECT \n                    title_basics.tconst\n                FROM \n                    title_basics\n                WHERE \n                    title_basics.primaryTitle IN (\n                        SELECT \n                            title_basics.primaryTitle\n                        FROM \n                            title_basics\n                        WHERE \n                            title_basics.genres LIKE '%Action%' AND title_basics.genres LIKE '%Comedy%'\n                    )\n            )\n            AND title_ratings.numVotes > 1000\n    )\n    AND title_basics.isAdult = 0\nORDER BY \n    title_ratings.averageRating DESC, title_basics.startYear DESC;\n\n;"}
{"id": 22839, "query": "Yes, I do. Can you recommend some good ones?", "history": [], "groundtruth": ["The Other Woman  (2014)", "The Shape of Water  (2017)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t2.averageRating > (\n    SELECT AVG(t3.averageRating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (\n        SELECT t4.tconst\n        FROM title_basics t4\n        WHERE t4.primaryName = 'Tom Hanks'\n    )\n)\nAND t1.genres LIKE '%Drama%'\nAND t1.startYear > 2000\nAND t1.endYear < 2020\nORDER BY t2.averageRating DESC;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. The query first joins the title_basics and title_ratings tables to get the title, primary title, original title, start year, end year, runtime minutes, and genres of the movies. It then filters the results to only include movies that have a rating above the average rating of movies featuring Tom Hanks, and that are dramas released between 2000 and 2020. Finally, the results are sorted in descending order by average rating."}
{"id": 22841, "query": "I really like comedy and action and good recommendations ?!", "history": ["The Hurt Locker (2008)", "Black Hawk Down  (2002)", "Braveheart (1995)", "High Noon (1952)", "Saving Private Ryan (1998)", "MASH  (1970)"], "groundtruth": ["Dunkirk  (2017)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t.title_ratings.averageRating, \n    t.title_ratings.numVotes, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles\nFROM \n    title_basics t \nINNER JOIN \n    title_ratings tr ON t.title_basics.title_id = tr.title_id \nINNER JOIN \n    name_basics n ON t.title_basics.directors = n.name_id OR t.title_basics.writers = n.name_id \nWHERE \n    t.title_basics.genres = 'Comedy' AND t.title_basics.genres = 'Action' \n    AND t.title_ratings.averageRating > 7 \n    AND t.title_ratings.numVotes > 1000 \n    AND n.name_basics.primaryProfession = 'Director' OR n.name_basics.primaryProfession = 'Writer' \nGROUP BY \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    t"}
{"id": 22843, "query": "Hey I'm in the mood for war movies!", "history": ["Jurassic World (2015)", "Jurassic Park  (1993)", "I, Robot  (2004)", "Lost in Space  (1998)", "A.I. Artificial Intelligence (2001)"], "groundtruth": ["A Quiet Place (2018)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    title_crew.directors,\n    title_crew.writers,\n    title_principals.ordering,\n    title_principals.category,\n    title_principals.job,\n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.genres LIKE '%War%'\n    AND title_ratings.numVotes > 1000\n    AND name_basics.primaryProfession = 'Actor'\n    AND title_crew.directors = 'Steven Spielberg'\n    AND title_principals.category = 'Actor'\n    AND title_principals.job = 'Lead'\n    AND title_principals.characters LIKE '%War%'\nORDER BY \n    title_ratings.averageRating DESC,\n    title_basics.startYear ASC;\n\nThis SQL query will retrieve movies that are classified as war movies, have more than 1000 ratings, are directed by Steven Spielberg, and have actors in leading roles who are associated with war movies. The query will also order the results by the average rating and the start year of the movies"}
{"id": 22844, "query": "Good!  Looking for some Sci-Fi", "history": ["Safe House  (2012)", "Deadpool 2  (2018)", "Inception (2010)", "Natural Born Killers (1994)"], "groundtruth": ["The Town  (2010)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Science Fiction'\nAND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst IN (SELECT t4.tconst FROM title_ratings t4 WHERE t4.averageRating > 7 AND t4.numVotes > 10000))\nAND NOT EXISTS (SELECT 1 FROM title_principals t5 WHERE t5.tconst = t1.tconst AND t5.category = 'Actor' AND t5.job = 'Director')\nAND NOT EXISTS (SELECT 1 FROM title_crew t6 WHERE t6.tconst = t1.tconst AND t6.job = 'Director')\nAND NOT EXISTS (SELECT 1 FROM name_basics t7 WHERE t7.nconst = t1.primaryTitle AND t7.birthYear > 1980)\nAND NOT EXISTS (SELECT 1 FROM name_basics t8 WHERE t8.nconst = t1.primaryTitle AND t8.deathYear < 2000)\nAND NOT EXISTS (SELECT 1 FROM title_ratings t9 WHERE t9.tconst = t1.tconst AND t9.numVotes > 10000)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query uses a combination of joins, subqueries, and exists conditions to retrieve movies that match the user's input and preference history. Here's a breakdown of the query:\n\n1. The first part of the query selects the title, primary title, original title, adult status, start year, end year, runtime minutes, and genres from the title_basics table.\n2. The second part of the query joins the title_"}
{"id": 22849, "query": "Great so far.  I need something unusual to watch that will hold my attention.  I liked Never Let Me Go  (2010)", "history": ["Minority Report  (2002)"], "groundtruth": ["Lars and the Real Girl (2007)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t2.knownForTitles, t3.directors, t3.writers, t4.category, t4.job, t4.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nWHERE t1.genres = 'Drama' AND t1.isAdult = '0' AND t2.averageRating > (SELECT AVG(t5.averageRating) FROM title_ratings t5 WHERE t5.tconst = t1.tconst)\nAND t3.primaryProfession = 'Actor' AND t4.category = 'Director'\nAND t4.job = 'Director'\nAND t4.characters = 'Keanu Reeves'\nAND t1.startYear > 2000\nAND t1.endYear < 2015\nAND t2.numVotes > 10000\nORDER BY t1.averageRating DESC, t4.directors ASC\nLIMIT 5;\n\nThis SQL query will retrieve movies that are dramas, not adult-rated, have high average ratings, and are directed by Keanu Reeves. The query will also consider the user's preference for movies with a high number of votes and a recent release date. The final result will be a list of five movie recommendations that meet the specified criteria."}
{"id": 22868, "query": "Tomorrow night are the Tony Awards. I want to watch some musicals that were turned into movies like Les Mis\u00e9rables  (2012)", "history": ["Rush Hour  (1998)", "The Boxtrolls (2014)"], "groundtruth": ["Shrek (2001)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, \n       t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.deathYear, t3.primaryProfession, t3.knownForTitles, \n       t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.tconst = t4.tconst\nJOIN title_principals t5 ON t1.tconst = t5.tconst\nWHERE t1.genres = 'Musical' AND t1.startYear = 2012\nAND t2.averageRating > (SELECT AVG(t6.averageRating) FROM title_ratings t6 WHERE t6.tconst = 'Les Mis\u00e9rables (2012)')\nAND t3.primaryProfession = 'Actor'\nAND t4.directors = 'Tom Hooper'\nAND t5.category = 'Acting'\nAND t5.job = 'Lead'\nAND t5.characters = 'Jean Valjean'\nORDER BY t2.numVotes DESC;\n\nThis SQL query will retrieve movies that are musicals, released in 2012, have a high average rating, and are directed by Tom Hooper. The query will also consider the user's preference history, which includes 'Rush Hour (1998)' and 'The Boxtrolls (2014)', by searching for movies that have similar genres, directors, and actors as the preferred movies. Finally, the query will filter the results to only include movies with the primary profession 'Actor', and the job and character 'Jean Valjean' to match the user's input"}
{"id": 22891, "query": "I like comedies and horror.", "history": ["Fifty Shades of Grey  (2015)"], "groundtruth": ["Gone Girl  (2014)"], "output": "SELECT \ntitle_basics.primaryTitle, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_crew.directors, \ntitle_principals.characters\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \ntitle_basics.genres LIKE '%comedy%' OR title_basics.genres LIKE '%horror%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Sam Taylor-Johnson%'\nAND title_principals.characters LIKE '%Anastasia Steele%'\nAND title_basics.startYear = 2015\n\n;"}
{"id": 22899, "query": "Looking for a movie to watch with my boyfriend. I want to make him uncomortable.", "history": ["Prince of the City  (1981)", "No Country for Old Men  (2007)"], "groundtruth": ["Blood Simple (1984)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres\nFROM title_basics t1\nJOIN title_ratings tr ON t1.tconst = tr.tconst\nJOIN name_basics n1 ON t1.primaryTitle = n1.primaryName\nWHERE n1.birthYear < 1970 AND n1.deathYear > 2000 AND tr.averageRating > 8 AND t1.genres LIKE '%thriller%'\nORDER BY t1.startYear DESC, t1.runtimeMinutes ASC;\n\nThis SQL query will retrieve movies that are thrillers, have a high average rating, and were released between 1970 and 2000. The query will also filter out movies that are not in the user's preference history.\n\nHere's how the query works:\n\n1. The first line, `SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres`, specifies the columns to be retrieved.\n2. The second line, `FROM title_basics t1`, specifies the table to be queried.\n3. The third line, `JOIN title_ratings tr ON t1.tconst = tr.tconst`, joins the `title_basics` table with the `title_ratings` table on the `tconst` column.\n4. The fourth line, `JOIN name_basics n1 ON t1.primaryTitle = n1.primaryName`, joins the `title_basics` table with the `name_basics` table on the `primaryTitle` column.\n5. The fifth line, `WHERE n1.birthYear < 1970 AND n1.deathYear > 2000`, filters out movies that do not meet the user's preference history.\n6. The sixth line, `AND tr.averageRating > 8`, filters out movies that do not have a high average rating.\n7. The seventh line, `AND t1.genres LIKE '%thriller%'`, filters out movies that are not thrillers.\n8. The final line, `ORDER BY t1.startYear DESC"}
{"id": 22900, "query": "I like crime movies", "history": ["High Noon (1952)", "Black Hawk Down  (2002)", "Never Let Me Go  (2010)", "Midway  (1976)", "The Inglorious Bastards (1978)", "Inglourious Basterds (2009)", "A.I. Artificial Intelligence (2001)"], "groundtruth": ["In Harm's Way (1965)", "Pan's Labyrinth (2006)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \ntitle_basics.genres = 'Crime' AND \ntitle_ratings.numVotes > 1000 AND \ntitle_principals.category = 'Actor' AND \ntitle_principals.job = 'Lead' AND \ntitle_principals.characters = 'Protagonist'\nAND title_basics.startYear BETWEEN '1950' AND '2020'\nAND title_basics.endYear BETWEEN '1950' AND '2020'\nAND title_basics.runtimeMinutes BETWEEN 60 AND 180\nAND name_basics.primaryName IN ('Gary Oldman', 'Tom Hanks', 'Leonardo DiCaprio', 'Meryl Streep', 'Denzel Washington', 'Russell Crowe')\nAND title_crew.directors IN ('Quentin Tarantino',"}
{"id": 22905, "query": "I'm looking for a movie to watch with monsters.  For example, I loved Colossal  (2017) .", "history": ["Fame  (2009)", "Mamma Mia!  (2008)", "La La Land  (2016)", "Oklahoma!  (1955)", "Dirty Dancing", "The Greatest Showman (2017)"], "groundtruth": ["Oklahoma  (1979)"], "output": "SELECT \n    t1.title_basics.title,\n    t1.title_basics.primaryTitle,\n    t1.title_basics.originalTitle,\n    t1.title_basics.startYear,\n    t1.title_basics.endYear,\n    t1.title_basics.runtimeMinutes,\n    t1.title_basics.genres,\n    t2.averageRating,\n    t2.numVotes\nFROM\n    title_basics t1\nINNER JOIN\n    title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nWHERE\n    t1.genres LIKE '%monster%'\n    AND t2.averageRating > (\n        SELECT\n            AVG(t3.rating)\n        FROM\n            title_ratings t3\n        WHERE\n            t3.tconst IN (\n                SELECT\n                    t4.tconst\n                FROM\n                    title_basics t4\n                WHERE\n                    t4.primaryTitle = 'Colossal'\n            )\n    )\n    AND EXISTS (\n        SELECT\n            1\n        FROM\n            title_principals t5\n        WHERE\n            t5.tconst = t1.title_basics.tconst\n            AND t5.category = 'actors'\n            AND t5.job = 'director'\n            AND t5.characters ='monsters'\n    )\nORDER BY\n    t2.averageRating DESC,\n    t1.startYear DESC;\n\n;"}
{"id": 22906, "query": "How about another musical?  Maybe something like La La Land  (2016)", "history": ["Chappie  (2015)", "I, Robot  (2004)", "Blade Runner (1982)", "A.I. Artificial Intelligence (2001)"], "groundtruth": ["Ex Machina  (2015)"], "output": "SELECT t1.title, t1.tconst, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n1 ON t1.primaryName = n1.primaryName\nJOIN title_crew c ON t1.tconst = c.tconst\nJOIN title_principals p ON t1.tconst = p.tconst\nWHERE t1.genres = 'Musical' AND t2.averageRating > (SELECT AVG(t3.averageRating)\n                                                     FROM title_ratings t3\n                                                     WHERE t3.tconst IN (SELECT t4.tconst\n                                                                        FROM title_ratings t4\n                                                                        WHERE t4.averageRating > 7\n                                                                        UNION\n                                                                        SELECT t5.tconst\n                                                                        FROM title_ratings t5\n                                                                        WHERE t5.averageRating > 7\n                                                                        AND t5.numVotes > 10000\n                                                                        )\n                                                    )\n                                    AND t1.tconst NOT IN (SELECT t6.tconst\n                                                        FROM title_ratings t6\n                                                        WHERE t6.averageRating < 5\n                                                        )\n                                    AND EXISTS (SELECT 1\n                                                 FROM title_principals p2\n                                                 WHERE p2.tconst = t1.tconst\n                                                 AND p2.category = 'Actor'\n                                                 AND p2.job = 'Lead'\n                                                 AND p2.characters = 'La La Land')\nGROUP BY t1.title, t1.tconst, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nHAVING COUNT(DISTINCT t2.tconst) > 1\nORDER BY t2.averageRating DESC"}
{"id": 22911, "query": "looking for something funny", "history": ["Up  (2009)", "WALL-E (2008)", "Inside Out  (2015)", "Old School  (2003)"], "groundtruth": ["Fist Fight (2017)"], "output": "SELECT t.title_basics.title, t.title_basics.primaryTitle, t.title_basics.originalTitle, t.title_basics.isAdult, t.title_basics.startYear, t.title_basics.endYear, t.title_basics.runtimeMinutes, t.title_basics.genres, t.title_ratings.averageRating, t.title_ratings.numVotes, n.name_basics.primaryName, n.name_basics.birthYear, n.name_basics.deathYear, n.name_basics.primaryProfession, n.name_basics.knownForTitles\nFROM title_basics t\nJOIN title_ratings ON t.tconst = t.title_ratings.tconst\nJOIN name_basics ON t.tconst = n.name_basics.tconst\nWHERE t.genres LIKE '%comedy%'\nAND t.title_ratings.averageRating > 7\nAND t.title_ratings.numVotes > 1000\nAND n.primaryName LIKE '%funny%'\nOR n.knownForTitles LIKE '%funny%'\nOR t.originalTitle LIKE '%funny%'\nOR t.title LIKE '%funny%'\nORDER BY t.title_ratings.averageRating DESC, t.title_ratings.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have an average rating above 7, and have at least 1000 votes, and also have the word \"funny\" in the title, primary name, known for titles, or original title. The results will be sorted in descending order by average rating and then by number of votes."}
{"id": 22915, "query": "I love a good comedy or animated movie like The Secret Life of Pets (2016)", "history": ["Frozen (2013)", "Never Let Me Go  (2010)", "Frozen  (2010)"], "groundtruth": ["It (1990)", "It  (2017)", "Veronica  (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, name_basics.primaryName, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Comedy' OR title_basics.genres = 'Animated'\nAND title_ratings.averageRating > (SELECT AVG(title_ratings.averageRating) FROM title_ratings WHERE title_ratings.tconst IN (SELECT title_basics.tconst FROM title_basics WHERE title_basics.primaryTitle = 'The Secret Life of Pets (2016)'));\nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.numVotes > 1000);\nAND title_basics.startYear >= 2010 AND title_basics.endYear <= 2016;\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n limit 10;\n\nThis SQL query will retrieve movies that are comedies or animations, have an average rating higher than The Secret Life of Pets (2016), have fewer than 1000 votes, and were released between 2010 and 2016. The results will be ordered by average rating in descending order and then by primary title in ascending order, with a limit of 10 results."}
{"id": 22916, "query": "Hi, I like horror films like Frozen  (2010)", "history": ["The Inglorious Bastards (1978)"], "groundtruth": ["Wild Horses  (2015)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes, \nname_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, \ntitle_crew.directors, title_crew.writers, \ntitle_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%horror%' AND title_ratings.averageRating > 6 AND title_principals.category = 'actor'\nAND title_basics.primaryTitle NOT IN (SELECT knownForTitles FROM name_basics WHERE primaryProfession = 'director')\nAND title_basics.startYear BETWEEN 2000 AND 2020\nAND title_basics.endYear IS NULL\nAND title_basics.runtimeMinutes BETWEEN 80 AND 120\nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE tconst = title_basics.tconst AND numVotes > 1000)\nAND NOT EXISTS (SELECT 1 FROM title_principals WHERE tconst = title_basics.tconst AND job = 'director')\nAND title_basics.originalTitle NOT LIKE '%(201"}
{"id": 22918, "query": "Hi, I'm looking for a good Adventure movie to watch with my boyfriend.  I liked Indiana Jones and the Temple of Doom (1984)    Do you know of any good ones?", "history": ["Blade Runner (1982)", "Alien  (1979)"], "groundtruth": ["Blade Runner 2049 (2017)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t3.category, t3.job, t3.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t2.nconst = t3.nconst\nWHERE t1.genres = 'Adventure'\nAND t2.averageRating > (\n    SELECT AVG(t4.averageRating)\n    FROM title_ratings t4\n    WHERE t4.tconst IN (SELECT t5.tconst\n                         FROM title_basics t5\n                         WHERE t5.titleType = 'Feature Film'\n                         AND t5.startYear BETWEEN 1980 AND 1989\n                         AND t5.endYear BETWEEN 1980 AND 1989)\n)\nAND t3.knownForTitles NOT IN (SELECT n1.knownForTitles\n                              FROM name_basics n1\n                              WHERE n1.primaryProfession = 'Actor'\n                              AND n1.birthYear BETWEEN 1940 AND 1960)\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as \"Adventure\" and have a high average rating, while also excluding movies that are known to be popular among actors born between 1940 and 1960. The query also takes into account the user's preference history, which includes the movies \"Blade Runner\" and \"Alien\". The result set will include the movie title, average rating, number of votes, the primary name of the director, the birth and death years of the director, the primary profession of the director, the category, job, and characters of the movie."}
{"id": 22919, "query": "Hi, I'm looking for a good SciFi movie.  I liked Alien  (1979)  because of its really good use of camera angles and special effects. Back in the day they didn't use computer graphics. Do you know of any good ones?", "history": ["Snow White  (1995)", "Snow White  (1987)", "Bambi (1942)", "Snow White  (1916)", "Robin Hood  (1991)", "Beauty and the Beast  (1992)"], "groundtruth": ["Ferdinand (2017)"], "output": "SELECT t.*, n.*, c.*, w.*\nFROM title_basics t\nJOIN name_basics n ON t.primaryTitle = n.title\nJOIN title_crew c ON t.directors = c.director\nJOIN title_principals w ON t.ordering = w.job\nWHERE t.genres = 'Science Fiction'\nAND t.startYear BETWEEN 1970 AND 1989\nAND t.runtimeMinutes > 90\nAND n.birthYear BETWEEN 1950 AND 1970\nAND EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE t.tconst = title_ratings.tconst\n  AND title_ratings.averageRating > 7\n  AND title_ratings.numVotes > 1000\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals\n  WHERE w.nconst = title_principals.nconst\n  AND title_principals.category = 'Actor'\n  AND title_principals.job = 'Director'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings\n  WHERE t.tconst = title_ratings.tconst\n  AND title_ratings.averageRating < 5\n)\nORDER BY w.job, t.primaryTitle;\n\nThis SQL query will retrieve movies that are classified as science fiction, released between 1970 and 1989, have a runtime of over 90 minutes, and have a birth year of the primary name between 1950 and 1970. It will also filter out movies that have an average rating of less than 5 or have a director who is also an actor. Additionally, it will only consider movies that have at least 1000 votes and have a rating of over 7.\n\nThe query will also join the title_basics table with the name_basics table to retrieve information about the actors and directors of the movies, and the title_crew table to retrieve information about the crew of the movies. Finally, it will order the results"}
{"id": 22921, "query": "Hi, I'm looking for a good old school Disney animated movie.  I enjoyed Robin Hood  (1991)  . Do you know of any good ones?", "history": ["Children of the Corn  (1984)", "Rosemary's Baby  (1968)", "Frozen  (2010)", "The Witch  (2015)"], "groundtruth": ["It's Alive  (1974)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%animated%' AND t1.startYear <= 1991 AND t1.endYear >= 1991\nAND EXISTS (\n  SELECT 1\n  FROM name_basics n\n  JOIN title_crew c ON n.nconst = c.nconst\n  WHERE c.directors = 'Walt Disney' OR c.writers = 'Walt Disney'\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals p\n  WHERE p.category = 'Adult'\n)\nAND t2.averageRating > (\n  SELECT AVG(t3.averageRating)\n  FROM title_ratings t3\n  WHERE t3.tconst = t1.tconst\n)\nAND t2.numVotes > (\n  SELECT COUNT(t3.numVotes)\n  FROM title_ratings t3\n  WHERE t3.tconst = t1.tconst\n)\nORDER BY t2.primaryName, t1.startYear DESC;\n\nThis SQL query will retrieve movies from the IMDb database that are animated, were released between 1980 and 1999, and have a primary name that matches the user's input. It will also filter out movies that are rated as adult content and have a low rating and low number of votes. Finally, it will order the results by primary name and release year in descending order.\n\nPlease note that this is just an example query and may need to be modified to fit the specific requirements of your application. Additionally, you will need to replace the user input and preference history with actual values."}
{"id": 22922, "query": "Hi!  I'm into horror at the moment like Children of the Corn  (1984)", "history": ["WALL-E (2008)", "When Harry Met Sally... (1989)", "Pretty in Pink (1986)", "An Officer and a Gentleman", "The Witch  (2015)"], "groundtruth": ["Chappie  (2015)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Horror'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors = 'Peter Bogdanovich'\nAND title_principals.characters = 'Child'\nAND title_basics.startYear = 1984\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as horror, have more than 1000 votes, were directed by Peter Bogdanovich, and have a character named \"Child\" in the movie. Additionally, the query will only consider movies released in 1984.\n\nThe query will return the title, primary title, original title, average rating, directors, and characters for the recommended movies."}
{"id": 22931, "query": "I like action and war movies", "history": ["Full Metal Jacket (1987)", "Black Hawk Down  (2002)"], "groundtruth": ["Born on the Fourth of July  (1989)", "Kill Bill: Volume 1 (2003)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.tconst = name_basics.tconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.genres LIKE '%Action%' AND \n    title_basics.genres LIKE '%War%' AND \n    title_ratings.averageRating > 7 AND \n    title_ratings.numVotes > 10000\nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres,"}
{"id": 22932, "query": "I'm looking for some war or action movies", "history": ["Children of the Corn  (1984)", "The Birds  (1963)", "Frozen  (2010)", "The Witch  (2015)"], "groundtruth": ["Occult  (2009)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.director, t2.writer\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'war' OR t1.genres = 'action'\nAND t2.averageRating > (SELECT AVG(t3.averageRating)\n                      FROM title_ratings t3\n                      WHERE t3.tconst IN (SELECT t4.tconst\n                                         FROM title_basics t4\n                                         WHERE t4.genres = 'horror'\n                                         UNION\n                                         SELECT t5.tconst\n                                         FROM title_basics t5\n                                         WHERE t5.genres = 'thriller'))\nAND NOT EXISTS (SELECT 1\n               FROM title_ratings tr\n               WHERE tr.tconst = t1.tconst AND tr.averageRating < 5)\nAND NOT EXISTS (SELECT 1\n               FROM title_basics t3\n               WHERE t3.title = t1.title AND t3.primaryProfession = 'actor' AND t3.knownForTitles = 'The Birds (1963)')\nAND NOT EXISTS (SELECT 1\n               FROM title_basics t4\n               WHERE t4.title = t1.title AND t4.primaryProfession = 'actor' AND t4.knownForTitles = 'Frozen (2010)'])\nGROUP BY t1.title, t1.averageRating, t1.numVotes, t2.director, t2.writer\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as \"war\" or \"action\" and have an average rating higher than the average rating of horror and thriller movies. It will also exclude movies that have a low rating (less than 5) or are associated with actors who have worked on \"The Birds (1963)\" or \"Frozen (2010)\". Finally, it will group the results by title"}
{"id": 22933, "query": "How about some horror films recommends?", "history": ["Carrie  (2013)", "Carrie  (1976)", "The Shining  (1980)", "Thinner  (1996)"], "groundtruth": ["The Mist  (2007)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE \n    title_basics.genres LIKE '%horror%'\n    AND title_ratings.averageRating > 6\n    AND title_ratings.numVotes > 1000\n    AND name_basics.primaryProfession = 'Actor'\n    AND name_basics.knownForTitles LIKE '%Carrie%'\n    AND title_basics.startYear BETWEEN 2000 AND 2020\nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics"}
{"id": 22934, "query": "I'm in the mood for something by Stephen King.", "history": ["The Other Woman  (2014)", "When Harry Met Sally... (1989)", "50 First Dates (2004)"], "groundtruth": ["Me, Myself & Irene (2000)"], "output": "SELECT t.title, t.averageRating, t.numVotes, n.primaryName, n.birthYear, n.deathYear, n.primaryProfession, c.category, c.job, c.characters\nFROM title_basics t\nJOIN name_basics n ON t.primaryTitle = n.title\nJOIN title_crew c ON t.directors = c.director\nWHERE t.titleType = 'Movie' AND t.genres LIKE '%Horror%' AND t.originalTitle LIKE '%Stephen King%'\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings tr\n  WHERE tr.title = t.title AND tr.userRating > (SELECT AVG(rating) FROM title_ratings WHERE title = t.title)\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals tp\n  WHERE tp.title = t.title AND tp.category = 'Actress' AND tp.job = 'Lead'\n)\nORDER BY t.averageRating DESC, n.primaryName ASC;\n\nThis SQL query will retrieve movies that are classified as horror, have the word \"Stephen King\" in the title, and have a rating that is above the average rating for that title. It will also exclude movies that have any actress in a lead role, as well as movies that the user has already rated.\n\nNote that this query assumes that the user's preference history is stored in the title_ratings table with the column userRating being the average rating given by the user. The query uses the NOT EXISTS clause to exclude movies that the user has already rated."}
{"id": 22936, "query": "How about some comedies?  I liked The Other Woman  (2014)", "history": ["The Hurt Locker (2008)", "Black Hawk Down  (2002)", "Saving Private Ryan (1998)", "Full Metal Jacket (1987)"], "groundtruth": ["High Noon (1952)", "Dunkirk  (2017)", "Darkest Hour  (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Nicholas%Hoult%'\nAND title_principals.characters LIKE '%Leslie%Mann%'\nAND title_basics.startYear = 2014\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as comedies, have more than 1000 votes, were directed by Nicholas Hoult, have Leslie Mann in the cast, and were released in 2014. The results will be ordered by the average rating in descending order."}
{"id": 22937, "query": "I like action and war movies", "history": ["Saving Private Ryan (1998)", "Full Metal Jacket (1987)"], "groundtruth": ["Lars and the Real Girl (2007)", "The Other Woman  (2014)"], "output": "SELECT t1.title, t1.imdbId, t1.averageRating, t1.numVotes, t2.title as \"Similar Title\"\nFROM title_basics t1\nJOIN (\n  SELECT t2.title, t2.imdbId, t2.averageRating, t2.numVotes\n  FROM title_basics t2\n  WHERE t2.genres LIKE '%Action%' AND t2.genres LIKE '%War%'\n) t2 ON t1.imdbId = t2.imdbId\nWHERE t1.genres LIKE '%Action%' AND t1.genres LIKE '%War%'\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings tr\n  WHERE tr.title = t1.title AND tr.user_id = <user_id>\n)\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query joins the title_basics table with a subquery of titles that are both action and war movies, and then filters out titles that the user has already rated. The NOT EXISTS clause ensures that only titles without any ratings from the user are returned. Finally, the results are sorted by average rating and number of votes in descending order."}
{"id": 22938, "query": "comedies, lol", "history": ["Full Metal Jacket (1987)"], "groundtruth": ["Dunkirk  (2017)", "The Green Berets  (1968)", "Darkest Hour  (2017)", "The Dirty Dozen (1967)"], "output": "SELECT \n  title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres,\n  title_ratings.averageRating, title_ratings.numVotes,\n  name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles,\n  title_crew.directors, title_crew.writers,\n  title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM \n  title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n  JOIN title_crew ON title_basics.tconst = title_crew.tconst\n  JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n  title_basics.genres LIKE '%comedy%'\n  AND title_ratings.averageRating > 7\n  AND title_principals.category = 'actor'\n  AND title_principals.job = 'Actor'\n  AND title_principals.characters LIKE 'lol'\nGROUP BY \n  title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres,\n  title_ratings.averageRating, title_ratings.numVotes,\n  name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name"}
{"id": 22939, "query": "I like action and war movies", "history": ["Black Hawk Down  (2002)", "MASH  (1970)", "Full Metal Jacket (1987)"], "groundtruth": ["The Green Berets  (1968)", "Atonement  (2007)", "The Zookeeper's Wife  (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%Action%' AND title_basics.genres LIKE '%War%'\nAND title_ratings.averageRating > (\n    SELECT AVG(title_ratings.averageRating)\n    FROM title_ratings\n    WHERE title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE genres LIKE '%Action%')\n    AND title_ratings.tconst IN (SELECT tconst FROM title_basics WHERE genres LIKE '%War%')\n)\nAND title_basics.startYear BETWEEN 1980 AND 2020\nAND title_basics.runtimeMinutes BETWEEN 90 AND 180\nAND name_basics.primaryProfession IN ('Actor', 'Actress')\nAND title_principals.category IN ('Actor', 'Actress', 'Director')\nAND title_principals.job IN ('Lead', 'Supporting')\nAND title_"}
{"id": 22945, "query": "I'm babysitting next week and need some help finding good movies for kids.", "history": ["Jarhead  (2005)", "Inception (2010)"], "groundtruth": ["The Commuter  (2017)", "American Sniper (2014)", "Avengers: Infinity War (2018)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.genres, title_ratings.averageRating, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Animation' OR title_basics.genres = 'Family' OR title_basics.genres = 'Children'\nAND title_ratings.averageRating > 7\nAND title_principals.job = 'Actor'\nAND title_principals.characters LIKE '%child%'\nAND name_basics.primaryProfession = 'Actor'\nAND name_basics.knownForTitles = ANY (\n    SELECT name_basics.knownForTitles\n    FROM name_basics\n    WHERE name_basics.primaryProfession = 'Actor'\n    AND name_basics.knownForTitles LIKE '%Jarhead%'\n    OR name_basics.knownForTitles LIKE '%Inception%'\n)\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.genres, title_ratings.averageRating, title_principals.characters\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies that are rated highly (average rating > 7), are in the animation, family, or children genres, have actors who have starred in 'Jarhead' or 'Inception', and have characters that are children. The query will also group the results by title, primary title, genres, average rating, and characters, and order them by average rating in descending order and primary title in ascending order."}
{"id": 22949, "query": "I'm looking for war and action movies", "history": [], "groundtruth": ["Solo: A Star Wars Story (2018)", "Avengers: Infinity War (2018)", "Breaking In (2018)", "Incredibles 2 (2018)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles\nFROM\n    title_basics t\n    JOIN title_ratings tr ON t.tconst = tr.tconst\n    JOIN name_basics n ON t.primaryTitle = n.primaryName\nWHERE\n    t.genres LIKE '%War' AND t.genres LIKE '%Action'\n    AND tr.averageRating > 7\n    AND n.primaryProfession = 'Actor'\nORDER BY\n    t.startYear DESC,\n    t.endYear DESC,\n    t.runtimeMinutes ASC;\n\nThis query will select movies that are both war and action movies, have an average rating of at least 7, and have actors as the primary profession. The results will be ordered by release year, end year, and runtime minutes."}
{"id": 22952, "query": "I\u2019m looking for a good action and comedy could you recommend any to me please ?!", "history": ["2012  (2009)"], "groundtruth": ["Takers (2010)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'action' AND t1.genres = 'comedy' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst = t1.tconst AND t3.numVotes > 100)\nAND NOT EXISTS (SELECT 1 FROM title_principals t4 WHERE t4.tconst = t1.tconst AND t4.category = 'actor' AND t4.job = 'director')\nAND NOT EXISTS (SELECT 1 FROM title_crew t5 WHERE t5.tconst = t1.tconst AND t5.job = 'writer')\nAND t1.startYear BETWEEN '2000-01-01' AND '2020-12-31'\nAND t1.endYear BETWEEN '2000-01-01' AND '2020-12-31'\nAND t1.runtimeMinutes BETWEEN 80 AND 120\nAND t2.numVotes > 1000\nORDER BY t2.averageRating DESC;\n\nThis SQL query will recommend movies to the user based on their input (action and comedy) and their historical preferences (the movies they have rated highly in the past). The query joins the title_basics and title_ratings tables to get information about the movies, and then uses subqueries to filter out movies that do not meet the user's preferences. The NOT EXISTS clauses are used to exclude movies that have directors or writers in common with the user's input. The BETWEEN clauses are used to filter out movies that are too old or too new. Finally, the ORDER BY clause is used to sort"}
{"id": 22955, "query": "Hi. Can you recommend a some family friendly movies?", "history": ["Skyfall (2012)", "Spectre  (2015)"], "groundtruth": ["Wonder Woman  (2017)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Family' AND t2.averageRating > 7 AND t2.numVotes > 1000\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_principals t3\n    JOIN name_basics t4 ON t3.nconst = t4.nconst\n    WHERE t3.category = 'Actor' AND t4.birthYear > 1980\n)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query recommends family-friendly movies based on the user's preference history and current input. It first joins the title_basics and title_ratings tables to get the movie titles and their average ratings. It then filters the results to only include movies with a genre of \"Family\" and a high average rating (> 7) and at least 1000 votes. Finally, it excludes actors born after 1980 to avoid recommending movies with child actors. The results are sorted in descending order of average rating and start year."}
{"id": 22958, "query": "You consider that a war movie? I was thinking more like Dunkirk  (2017)  or Saving Private Ryan (1998)", "history": ["The Shining  (1980)", "The Birds  (1963)", "The Hills Have Eyes  (2006)", "Frozen  (2010)", "The Witch  (2015)"], "groundtruth": ["Oculus  (2013)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE \n    title_basics.primaryTitle IN ('Dunkirk', 'Saving Private Ryan')\n    AND title_ratings.averageRating > (\n        SELECT \n            AVG(title_ratings.averageRating)\n        FROM \n            title_ratings\n            JOIN name_basics ON title_ratings.nconst = name_basics.nconst\n            WHERE \n                name_basics.primaryName = 'The Shining'\n                OR name_basics.primaryName = 'The Birds'\n                OR name_basics.primaryName = 'The Hills Have Eyes'\n                OR name_basics.primaryName = 'Frozen'\n                OR name_basics.primaryName = 'The Witch'\n    )\nORDER BY \n    title_ratings.averageRating DESC;\n\n;"}
{"id": 22959, "query": "Hi I'm in the mood for horror", "history": ["Pitch Perfect (2012)", "Mean Girls (2004)", "Legally Blonde (2001)"], "groundtruth": ["Half Baked (1998)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.genres = 'horror'\nAND title_ratings.averageRating > (\n    SELECT \n        AVG(title_ratings.averageRating)\n    FROM \n        title_ratings\n    WHERE \n        title_ratings.tconst IN (\n            SELECT \n                tconst\n            FROM \n                title_basics\n            WHERE \n                title_basics.genres = 'horror'\n        )\n    AND title_ratings.numVotes > 1000\n)\nAND title_basics.startYear > 2000\nAND title_basics.endYear < 2020\nAND title_basics.runtimeMinutes > 60\nAND name_basics.primaryName IN (\n    SELECT \n        primaryName\n    FROM \n        name_basics\n    WHERE \n        name_"}
{"id": 22965, "query": "what movies would you reccoment?", "history": ["Waterboys  (2001)", "The Little Mermaid  (1989)"], "groundtruth": ["Cult of Chucky (2017)", "Devil  (2010)", "Horrorween (2010)", "Popcorn  (1991)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes\nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.directors = title_crew.directors\nJOIN title_principals ON title_basics.ordering = title_principals.ordering\nWHERE title_basics.genres = 'Comedy' \nAND title_ratings.averageRating > 6 \nAND title_principals.category = 'Actor' \nAND title_principals.job = 'Lead' \nAND title_principals.characters = 'Musician' \nAND title_basics.startYear BETWEEN 2000 AND 2010 \nAND title_basics.endYear IS NULL\nAND title_basics.runtimeMinutes BETWEEN 80 AND 120\nAND NOT EXISTS (\n  SELECT 1 \n  FROM title_basics \n  WHERE title_basics.tconst = title_ratings.tconst \n  AND title_basics.primaryName = name_basics.primaryName \n  AND title_basics.directors = title_crew.directors \n  AND title_basics.ordering = title_principals.ordering \n  AND title_basics.genres = 'Comedy' \n  AND title_ratings.averageRating > 6 \n  AND title_principals.category = 'Actor' \n  AND title_principals.job = 'Lead' \n  AND title_"}
{"id": 22966, "query": "what movie would you recommend?", "history": ["Moana  (2016)", "It (1990)", "It  (2017)", "The Kite  (2003)", "Lost  (2004)", "Princess  (2008)"], "groundtruth": ["Carrie  (1976)"], "output": "SELECT * FROM title_basics tb\nJOIN (\n  SELECT tconst, AVG(numVotes) AS avg_rating\n  FROM title_ratings\n  GROUP BY tconst\n) tr ON tb.tconst = tr.tconst\nJOIN (\n  SELECT nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles\n  FROM name_basics\n  WHERE primaryProfession IN ('Actor', 'Actress')\n  GROUP BY nconst\n) nb ON tb.directors = nb.nconst OR tb.writers = nb.nconst\nWHERE tb.genres = 'Animated' AND tb.startYear >= 2010 AND tb.endYear <= 2020\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE tb.tconst = title_principals.tconst AND category = 'Actor' AND job = 'Voice'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE tb.tconst = title_principals.tconst AND category = 'Actress' AND job = 'Voice'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE tb.tconst = title_principals.tconst AND category = 'Director' AND job = 'Director'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE tb.tconst = title_principals.tconst AND category = 'Writer' AND job = 'Writer'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE tb.tconst = title_principals.tconst AND category = 'Producer' AND job = 'Producer'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE tb.tconst = title_principals.tconst AND category = 'Cinematographer' AND job = 'Cinematographer'\n)\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE"}
{"id": 22971, "query": "im in the mood for a crime thriller. kinda like Kiss the Girls  (1997)", "history": ["Heat  (1995)", "The Town  (2010)", "Red  (2010)", "Den of Thieves (2018)"], "groundtruth": ["Death Wish "], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_ratings.averageRating,\n    title_principals.characters\nFROM \n    title_basics \n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \n    JOIN title_crew ON title_basics.tconst = title_crew.tconst \n    JOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n    title_basics.genres = 'Crime' \n    AND title_basics.startYear = 1995 \n    AND title_basics.endYear = 2018 \n    AND title_ratings.numVotes > 1000 \n    AND title_principals.category = 'Actors' \n    AND title_principals.job = 'Lead' \n    AND title_principals.characters LIKE '%detective%' \n    AND title_basics.primaryTitle NOT IN (SELECT primaryTitle FROM name_basics WHERE birthYear = 1968) \n    AND title_basics.primaryTitle NOT IN (SELECT primaryTitle FROM name_basics WHERE deathYear = 2018) \nORDER BY \n    title_ratings.averageRating DESC;\n\nThis SQL query retrieves movies that are crime thrillers, released between 1995 and 2018, have more than 1000 votes, and have actors playing lead roles as detectives. It also excludes movies that are not in the IMDb database, and excludes movies that have directors or writers born in 1968 or died in 2018. Finally, it orders the results by the average rating."}
{"id": 22973, "query": "I'm good.  I'm looking for something funny, but not slapstick", "history": ["Memphis Belle  (1990)", "Black Hawk Down  (2002)"], "groundtruth": ["Black  (2015)", "Waterworld (1995)"], "output": "SELECT \ntitle_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, \ntitle_ratings.averageRating, title_ratings.numVotes\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.directors = name_basics.primaryName\nWHERE title_basics.titleType ='movie'\nAND title_ratings.averageRating > 7\nAND title_basics.genres LIKE '%comedy%'\nAND title_basics.primaryTitle NOT LIKE '%slapstick%'\nAND name_basics.knownForTitles LIKE '%Memphis Belle%'\nAND name_basics.knownForTitles LIKE '%Black Hawk Down%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres\nHAVING COUNT(DISTINCT title_basics.tconst) > 2\nORDER BY title_basics.averageRating DESC, title_basics.primaryTitle ASC;\n\nThis SQL query will retrieve movies that are comedies, have a high average rating (above 7), and do not contain the word \"slapstick\" in the title or directors. The query will also consider the user's historical preferences, which in this case are \"Memphis Belle\" and \"Black Hawk Down\". The results will be grouped by title, primary title, original title, and genres, and will be ordered by average rating in descending order and primary title in ascending order."}
{"id": 22986, "query": "i'M LOOKING FOR HORROR FILMS", "history": ["Jumanji  (2017)"], "groundtruth": ["Enough  (2002)", "Takers (2010)", "Deadpool 2  (2018)", "List of accolades received by Inception", "The Commuter  (2017)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Horror'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Jumanji%'\nAND title_principals.characters LIKE '%Jumanji%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve horror movies with at least 1000 votes, and have the word \"Jumanji\" in the director or character names, and order the results by average rating in descending order. The query joins four tables: title_basics, title_ratings, title_crew, and title_principals. The join conditions are based on the common column tconst between the tables. The WHERE clause filters out non-horror movies and movies with fewer than 1000 votes. The LIKE operator is used to search for the word \"Jumanji\" in the director and character names."}
{"id": 23003, "query": "yes, but based on a true story like Up Denali 3D (2003)", "history": [], "groundtruth": ["Black Panther (2018)", "The Theory of Everything  (2014)", "Insidious  (2011)", "Cast Away (2000)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_basics.genres, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, name_basics.knownForTitles, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.tconst = name_basics.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.title LIKE '%Up Denali 3D%' AND title_basics.isAdult = 0 AND title_ratings.averageRating > 7 AND title_ratings.numVotes > 1000\nAND name_basics.primaryName NOT LIKE 'Up%' AND name_basics.primaryName NOT LIKE 'Denali%' AND name_basics.primaryName NOT LIKE '3D%'\nAND title_crew.directors NOT LIKE 'Up%' AND title_crew.directors NOT LIKE 'Denali%' AND title_crew.directors NOT LIKE '3D%'\nAND title_principals.category NOT LIKE 'Up%' AND title_principals.category NOT LIKE 'Denali%' AND title_principals.category NOT LIKE '3D%'\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics"}
{"id": 23018, "query": "I\u2019m looking for a great comedy and or action movie any suggestions", "history": ["Deadpool 2  (2018)", "Deadpool  (2016)"], "groundtruth": ["The Vow  (2012)", "Adrift  (2009)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = '0' -- exclude adult movies\nAND title_ratings.averageRating > 7 -- only recommend movies with high ratings\nAND title_basics.startYear BETWEEN 2010 AND 2022 -- only recommend movies released between 2010 and 2022\nAND title_basics.genres LIKE '%comedy%' OR title_basics.genres LIKE '%action%' -- only recommend movies with comedy or action genres\nAND name_basics.primaryProfession = 'Actor' -- only recommend movies with actors\nAND title_principals.category = 'Performer' -- only recommend movies with performers\nAND title_principals.job = 'Actor' -- only recommend movies with actors\nAND title_principals.characters LIKE '%comedy%' OR title_principals.characters LIKE '%action%' -- only recommend movies"}
{"id": 23021, "query": "i need a good crime movie", "history": ["The Secret Life of Walter Mitty  (2013)", "The Dark Knight  (2008)", "Into the Wild  (2007)"], "groundtruth": ["The Adventures of Sharkboy and Lavagirl in 3-D (2005)", "Pirates of the Caribbean: Dead Man's Chest (2006)"], "output": "SELECT \n  t.title_basics.title, \n  t.title_basics.primaryTitle, \n  t.title_basics.originalTitle, \n  t.title_basics.isAdult, \n  t.title_basics.startYear, \n  t.title_basics.endYear, \n  t.title_basics.runtimeMinutes, \n  t.title_basics.genres, \n  t.title_ratings.averageRating, \n  t.title_ratings.numVotes, \n  n.name_basics.primaryName, \n  n.name_basics.birthYear, \n  n.name_basics.deathYear, \n  n.name_basics.primaryProfession, \n  n.name_basics.knownForTitles, \n  c.title_crew.directors, \n  c.title_crew.writers, \n  p.title_principals.ordering, \n  p.title_principals.category, \n  p.title_principals.job, \n  p.title_principals.characters\nFROM \n  title_basics t\n  JOIN title_ratings t_ratings ON t.tconst = t_ratings.tconst\n  JOIN name_basics n ON t.primaryTitle = n.primaryName\n  JOIN title_crew c ON t.tconst = c.tconst\n  JOIN title_principals p ON t.tconst = p.tconst\nWHERE \n  t.genres LIKE '%crime%'\n  AND t.startYear BETWEEN 2000 AND 2020\n  AND t.endYear IS NULL\n  AND t_ratings.averageRating > 7\n  AND t_ratings.numVotes > 1000\n  AND n.primaryProfession = 'Actor'\n  AND c.directors LIKE '%Christopher Nolan%'\n  AND p.category = 'Actor'\n  AND p.job = 'Lead'\n  AND p."}
{"id": 23024, "query": "Hi I'm looking for thriller movies", "history": ["How to Lose a Guy in 10 Days (2003)", "When Harry Met Sally... (1989)", "Notting Hill "], "groundtruth": ["Clueless  (1995)"], "output": "SELECT t1.title, t1.imdb_id, t1.original_title, t1.start_year, t1.genres, t2.average_rating, t2.num_votes, t3.primary_name, t3.birth_year, t3.death_year, t3.primary_profession, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.imdb_id = t2.tconst\nJOIN name_basics t3 ON t1.primaryTitle = t3.primaryName\nJOIN title_crew t4 ON t1.directors = t4.directors\nJOIN title_principals t5 ON t1.ordering = t5.ordering\nWHERE t1.genres = 'thriller'\nAND t2.average_rating > 7\nAND t3.primary_profession = 'actor'\nAND t4.directors = 'Martin Scorsese'\nAND t5.category = 'actor'\nAND t5.job = 'leading'\nAND t5.characters = 'Leonardo DiCaprio'\nGROUP BY t1.title, t1.imdb_id, t1.original_title, t1.start_year, t1.genres, t2.average_rating, t2.num_votes, t3.primary_name, t3.birth_year, t3.death_year, t3.primary_profession, t4.directors, t4.writers, t5.ordering, t5.category, t5.job, t5.characters\nHAVING COUNT(DISTINCT t5.characters) > 1\nORDER BY t2.average_rating DESC, t1.start_year DESC;\n\nNote: This query assumes that the user's input is \"thriller\" and their preference history is the list of movies provided. The query will return a list of movies that are thrillers, have a high average rating, and have at least two actors in common"}
{"id": 23026, "query": "i like romantic comedies", "history": ["A Fish Called Wanda (1988)", "Trading Places (1983)"], "groundtruth": ["Ocean's 8 (2018)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%romantic comedy%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%John Cleese%'\nAND title_principals.characters LIKE '%Kevin Kline%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as romantic comedies, have more than 1000 votes, and have directors or characters that match the input and preference history. The result will be a list of movies with their titles, primary titles, original titles, average ratings, and the names of the directors and characters that match the input and preference history."}
{"id": 23033, "query": "Actually, yes! I have been looking for good comedies.", "history": [], "groundtruth": ["Rush Hour  (1998)", "Wedding Crashers (2005)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres LIKE '%comedy%'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors LIKE '%Adam%']\nAND title_principals.characters LIKE '%Jim%']\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query retrieves movies that are classified as comedies, have more than 1000 votes, and have directors or characters that match the user's input. The query joins four tables: title_basics, title_ratings, title_crew, and title_principals. The WHERE clause filters out movies that do not match the user's preferences, and the ORDER BY clause sorts the results by average rating in descending order."}
{"id": 23038, "query": "I like comedies mostly.", "history": ["Avengers: Infinity War (2018)"], "groundtruth": ["Spiders 3D (2013)"], "output": "SELECT \n  title_basics.title, \n  title_basics.primaryTitle, \n  title_basics.originalTitle, \n  title_basics.isAdult, \n  title_basics.startYear, \n  title_basics.endYear, \n  title_basics.runtimeMinutes, \n  title_basics.genres, \n  title_ratings.averageRating, \n  title_ratings.numVotes, \n  name_basics.primaryName, \n  name_basics.birthYear, \n  name_basics.deathYear, \n  name_basics.primaryProfession, \n  name_basics.knownForTitles, \n  title_crew.directors, \n  title_crew.writers, \n  title_principals.ordering, \n  title_principals.category, \n  title_principals.job, \n  title_principals.characters\nFROM \n  title_basics\n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n  JOIN name_basics ON title_basics.tconst = name_basics.tconst\n  JOIN title_crew ON title_basics.tconst = title_crew.tconst\n  JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n  title_basics.genres LIKE '%comedy%' \n  AND title_ratings.averageRating > (\n    SELECT \n      AVG(rating) \n    FROM \n      title_ratings \n    WHERE \n      tconst = 'Avengers: Infinity War (2018)'\n  ) \n  AND title_principals.category = 'actor' \n  AND title_principals.job = 'actor'\nORDER BY \n  title_basics.primaryTitle, \n  title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as comedies"}
{"id": 23050, "query": "Can you recommend some movies to watch?", "history": ["It (1990)", "The Shining  (1980)"], "groundtruth": ["It  (2017)", "The Babadook (2014)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles, \ntitle_crew.directors, \ntitle_crew.writers, \ntitle_principals.ordering, \ntitle_principals.category, \ntitle_principals.job, \ntitle_principals.characters\n\nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.tconst = name_basics.tconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \n\nWHERE \ntitle_basics.genres = 'Horror' \nAND title_ratings.averageRating > 7 \nAND title_ratings.numVotes > 1000 \nAND name_basics.primaryProfession = 'Actor' \nAND title_crew.directors = 'Stanley Kubrick' \nAND title_principals.category = 'Lead' \nAND title_principals.job = 'Actor' \nAND title_principals.characters = 'Jack Torrance' \n\nGROUP BY \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics."}
{"id": 23053, "query": "Hi.  Good.  How about some war movies", "history": ["Black Hawk Down  (2002)", "Fight Club (1999)"], "groundtruth": ["The Other Woman  (2014)", "Never Let Me Go  (2010)", "Lars and the Real Girl (2007)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'War' AND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.tconst IN (SELECT t4.tconst FROM title_basics t4 WHERE t4.primaryTitle = 'Black Hawk Down (2002)') AND t3.numVotes > 1000)\nAND t1.primaryTitle NOT IN (SELECT t5.primaryTitle FROM title_basics t5 WHERE t5.primaryTitle = 'Fight Club (1999)')\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies with the genre \"War\" that have an average rating higher than the average rating of the movies the user has previously rated (Black Hawk Down (2002) and Fight Club (1999)), and that do not have the same primary title as Fight Club (1999). The results will be ordered by average rating in descending order and then by start year in descending order."}
{"id": 23056, "query": "Can you recommend some movies to watch?", "history": ["The Hurt Locker (2008)", "Fight Club (1999)"], "groundtruth": ["Children of the Corn  (1984)", "Lars and the Real Girl (2007)", "PT 109  (1963)", "Frozen  (2010)"], "output": "SELECT * FROM (\n  SELECT t.tconst, t.titleType, t.primaryTitle, t.originalTitle, t.isAdult, t.startYear, t.endYear, t.runtimeMinutes, t.genres,\n       AVG(r.averageRating) AS avgRating, COUNT(r.tconst) AS numVotes\n  FROM title_basics t\n  JOIN title_ratings r ON t.tconst = r.tconst\n  WHERE t.titleType = 'Movie'\n  AND r.numVotes > 100\n  GROUP BY t.tconst\n) AS movies\nWHERE NOT EXISTS (\n  SELECT 1 FROM name_basics n\n  JOIN title_principals tp ON n.nconst = tp.nconst\n  WHERE tp.category = 'Actor' AND n.primaryProfession = 'Director'\n  AND n.birthYear = 1968\n  AND n.deathYear = 2017\n)\nORDER BY avgRating DESC, numVotes DESC;\n\nThis SQL query first joins the title_basics and title_ratings tables to get the movie information and the average rating and number of votes for each movie. It then filters the results to only include movies that are rated by more than 100 people.\n\nNext, it joins the name_basics and title_principals tables to get the director information for each movie. It then filters the results to only include movies that do not have a director who was born in 1968 or died in 2017.\n\nFinally, it orders the results by the average rating and number of votes in descending order.\n\nNote that this query assumes that the user's preference history is stored in the title_ratings table with the 'tconst' column representing the title ID and the 'averageRating' and 'numVotes' columns representing the average rating and number of votes for each movie, respectively. The query also assumes that the user's preference history includes only movies with a 'titleType' of 'Movie'."}
{"id": 23058, "query": "Can you recommend some movies to watch?", "history": ["Fight Club (1999)", "Bambi (1942)"], "groundtruth": ["Jungle Book  (2018)", "50 First Dates (2004)", "High Noon (1952)", "Into Thin Air: Death on Everest (1997)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    c.name,\n    c.birthYear,\n    c.deathYear,\n    c.primaryProfession,\n    c.knownForTitles\nFROM \n    title_basics t\nINNER JOIN \n    name_basics c ON t.title_basics.directors = c.nconst\nWHERE \n    t.title_basics.genres = 'Drama'\n    AND t.title_basics.startYear BETWEEN 1990 AND 2010\n    AND c.knownForTitles LIKE '%Fight Club%'\n    AND c.knownForTitles NOT LIKE '%Bambi%'\nGROUP BY \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.isAdult,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    c.name,\n    c.birthYear,\n    c.deathYear,\n    c.primaryProfession,\n    c.knownForTitles\nORDER BY \n    RANDOM();\n\n;"}
{"id": 23060, "query": "I love horror flicks", "history": ["Jerry Maguire (1996)", "Field of Dreams (1989)"], "groundtruth": ["The Natural  (1984)", "Radio  (2003)", "The Blind Side  (2009)"], "output": "SELECT t1.title, t1.titleType, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'horror'\nAND t2.averageRating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.tconst IN (SELECT t4.tconst FROM title_ratings t4 WHERE t4.averageRating > 7 AND t4.numVotes > 1000)\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM title_ratings t3\n    WHERE t3.tconst = t1.tconst AND t3.averageRating > 7\n)\nORDER BY t1.startYear DESC, t1.endYear DESC, t1.runtimeMinutes ASC;\n\nThis SQL query will retrieve horror movies with high ratings from the IMDb database, while excluding movies that have already been rated highly by users. The query will also consider the user's historical preferences, as specified in the input and preference history.\n\nHere's a breakdown of the query:\n\n1. SELECT clause: Retrieves the title, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, averageRating, and numVotes columns from the title_basics and title_ratings tables.\n2. JOIN clause: Joins the title_basics and title_ratings tables on the tconst column.\n3. WHERE clause: Filters the results to only include horror movies.\n4. AND clause: Filters the results to only include movies with average ratings higher than 7.\n5. NOT EXISTS clause: Excludes movies that have already been rated highly by users (i.e., movies with average ratings higher than 7).\n6. ORDER BY clause: Orders the results by start year, end year, and runtime minutes in"}
{"id": 23064, "query": "I enjoy Adventure movies.", "history": [], "groundtruth": ["Jurassic World (2015)", "Avengers: Infinity War (2018)", "Deadpool 2  (2018)"], "output": "SELECT t1.title, t1.primaryTitle, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nWHERE t1.genres LIKE '%Adventure%'\nAND t2.averageRating > (SELECT AVG(t4.averageRating) FROM title_ratings t4 WHERE t4.tconst = t1.tconst AND t4.numVotes > 100)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nNote: The above query assumes that the user preference history is empty, if the user has rated movies before, the query should be modified to include the user's rated movies in the historical preference. Also, the query assumes that the \"Adventure\" genre is specified in the user input, if the user input genre is different, the query should be modified accordingly."}
{"id": 23093, "query": "Nope. I like scary movies, ones when you don't know who the killer is.", "history": ["The Boxtrolls (2014)"], "groundtruth": ["The Secret Life of Pets (2016)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.isAdult, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nWHERE t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.title_basics.primaryTitle = 'The Boxtrolls (2014)')\nAND t1.genres LIKE '%horror%'\nAND t1.isAdult = 0\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are rated highly by users who have similar preferences to the user's historical preferences. The query joins the title_basics and title_ratings tables to get information about the movies and their ratings, and then filters the results based on the user's input and historical preferences. The AVG() function is used to calculate the average rating of the movies that the user has previously rated, and the LIKE operator is used to filter the genres and exclude adult content. The results are then sorted in descending order by average rating."}
{"id": 23144, "query": "got any movies to recommend?", "history": ["The Princess Bride  (1987)", "Snow White  (1962)"], "groundtruth": ["Toy Story (1995)", "Cinderella  (2015)", "Frozen (2013)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes, t3.primaryName, t3.birthYear, t3.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics t3 ON t1.primaryName = t3.primaryName\nWHERE t1.genres = 'Fantasy' AND t2.averageRating > 7 AND t3.knownForTitles LIKE '%Princess%'\nORDER BY t2.numVotes DESC;\n\nThis SQL query recommends movies to users based on their input and historical preferences. The query first joins the title_basics, title_ratings, and name_basics tables to get information about the movies and their ratings. It then filters the results to only include movies in the Fantasy genre with an average rating above 7. Finally, it orders the results by the number of votes, with the most popular movies appearing first.\n\nThe query uses the following tables and columns:\n\n* title_basics (tconst, titleType, primaryTitle, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres)\n* title_ratings (tconst, averageRating, numVotes)\n* name_basics (nconst, primaryName, birthYear, deathYear, primaryProfession, knownForTitles)\n\nThe query uses the following joins and filters:\n\n* Joins title_basics and title_ratings on tconst (title ID)\n* Joins name_basics on primaryName (actor/actress name)\n* Filters by genres (Fantasy) and averageRating (above 7)\n* Orders by numVotes (most popular movies first)"}
{"id": 23150, "query": "Hi,  I liked  The Purge (2013) can you recommend something similar?", "history": ["The Purge (2013)", "Hereditary (2018)"], "groundtruth": ["The Texas Chain Saw Massacre (1974)", "The Blair Witch Project (1999)", "The Babadook (2014)", "The Hitcher  (1986)"], "output": "SELECT t1.title, t1.tconst, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%thriller%'\nAND t2.averageRating > 6\nAND t2.numVotes > 1000\nAND t1.tconst NOT IN (SELECT tconst FROM title_basics WHERE title LIKE '%The Purge%')\nAND NOT EXISTS (SELECT 1 FROM title_basics t3 WHERE t3.tconst = t1.tconst AND t3.primaryTitle LIKE '%The Purge%')\nORDER BY t2.averageRating DESC;\n\nThis SQL query recommends movies similar to \"The Purge\" based on the user's preference history and their input. The query first joins the \"title_basics\" and \"title_ratings\" tables to get the movie's genres and ratings. It then filters the results to only include movies with an average rating above 6 and more than 1000 votes, and excludes movies with the title \"The Purge\". Finally, it orders the results by the average rating in descending order.\n\nNote that this is just one possible approach to movie recommendation, and there are many other factors that could be taken into account to improve the accuracy of the recommendations."}
{"id": 23152, "query": "Hi!! Can you recommend me some movie?? I like movies like The Purge (2013)", "history": ["Seven  (1995)", "The Dark Knight Rises (2012)", "Zodiac  (2007)"], "groundtruth": ["Twisted  (2004)"], "output": "SELECT \n  t.title_id,\n  t.title,\n  t.primaryTitle,\n  t.originalTitle,\n  t.isAdult,\n  t.startYear,\n  t.endYear,\n  t.runtimeMinutes,\n  t.genres,\n  r.averageRating,\n  r.numVotes,\n  c.category,\n  c.job,\n  c.characters\nFROM \n  title_basics t\n  JOIN title_ratings r ON t.title_id = r.tconst\n  JOIN name_basics n ON t.primaryTitle = n.primaryName\n  JOIN title_crew c ON t.title_id = c.tconst\nWHERE \n  t.titleType = 'feature film'\n  AND t.isAdult = 0\n  AND r.numVotes > 1000\n  AND t.genres LIKE '%thriller%'\n  AND t.startYear BETWEEN 2000 AND 2020\n  AND NOT EXISTS (\n    SELECT \n      1\n    FROM \n      title_principals p\n    WHERE \n      p.title_id = t.title_id AND \n      p.category = 'actor' AND \n      p.job = 'lead'\n    EXCEPT \n      SELECT \n      1\n    FROM \n      title_principals p\n    WHERE \n      p.title_id = t.title_id AND \n      p.category = 'actor' AND \n      p.job = 'lead'\n      AND p.characters = 'James Franco'\n  )\nORDER BY \n  r.averageRating DESC, \n  t.startYear DESC;\n\nThis SQL query will retrieve movies that are feature films, not adult-rated, have more than 1000 votes, and are thrillers released between 2000 and 2020, and do not have James Franco as a lead actor. The query will also consider the user's preference history, which includes movies like \"Seven\" (1995), \"The Dark Knight Rises\" (2012),"}
{"id": 23161, "query": "Hi!! Can you recommend me some movie?? I like movies like Seven  (1995)", "history": ["The Purge (2013)", "Panic Room (2002)"], "groundtruth": ["A Quiet Place (2018)", "Breaking In (2018)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.tconst = name_basics.tconst\nWHERE \n    title_basics.title LIKE '%Seven%'  -- Matches movies with \"Seven\" in the title\n    AND title_ratings.averageRating > 7.5  -- Matches movies with an average rating above 7.5\n    AND name_basics.primaryName NOT IN (SELECT nconst FROM name_basics WHERE knownForTitles LIKE '%The Purge%')  -- Excludes movies with \"The Purge\" in the known for titles\n    AND name_basics.primaryName NOT IN (SELECT nconst FROM name_basics WHERE knownForTitles LIKE '%Panic Room%')  -- Excludes movies with \"Panic Room\" in the known for titles\n    AND title_basics.genres LIKE '%Thriller%'  -- Matches movies with \"Thriller\" in the genres\nORDER BY \n    title_ratings.averageRating DESC, \n    title_basics.startYear DESC;\n\n;"}
{"id": 23164, "query": "I'm looking for some fun movies for a girls night", "history": ["A Perfect Getaway (2009)", "Friday the 13th  (1980)", "The Purge (2013)"], "groundtruth": ["Children of the Corn  (1984)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE \ntitle_basics.primaryTitle IN ('A Perfect Getaway', 'Friday the 13th', 'The Purge')\nAND title_ratings.averageRating > 6\nAND title_basics.genres LIKE '%comedy%'\nAND name_basics.primaryName LIKE '%Jennifer%'\nORDER BY \ntitle_ratings.averageRating DESC, title_basics.startYear ASC;\n\nThis SQL query will retrieve movies that are primary titles of the movies the user has previously rated and have an average rating above 6, are comedies, and have a primary name that starts with 'Jennifer'. The query will also order the results by the average rating in descending order and the start year in ascending order."}
{"id": 23180, "query": "I recently saw Spotlight  (2015)  and The Post (2017) You know anything similar?", "history": ["Signs  (2002)", "Get Out (2017)"], "groundtruth": ["The Shape of Water  (2017)"], "output": "SELECT \n    t.title, \n    t.titleType, \n    t.primaryTitle, \n    t.originalTitle, \n    t.isAdult, \n    t.startYear, \n    t.endYear, \n    t.runtimeMinutes, \n    t.genres, \n    c.category, \n    c.job, \n    c.characters\nFROM \n    title_basics t \n    JOIN title_ratings tr ON t.tconst = tr.tconst \n    JOIN name_basics n ON t.primaryTitle = n.primaryName \n    JOIN title_crew c ON t.tconst = c.tconst \nWHERE \n    t.primaryTitle IN ('Spotlight', 'The Post') \n    AND tr.averageRating > 7 \n    AND n.birthYear = 2002 \n    AND n.knownForTitles IN ('Signs') \n    AND c.category = 'Director' \n    AND c.job = 'Writer' \n    AND c.characters LIKE '%black%'\nORDER BY \n    t.startYear DESC;\n\nThis SQL query will retrieve movies that are similar to \"Spotlight\" and \"The Post\" based on the user's preference history, which includes \"Signs\" and \"Get Out\". The query will also filter out movies that are not rated highly, were released before 2002, or do not have a director or writer with the specified characteristics. The results will be ordered by release year in descending order."}
{"id": 23181, "query": "I like movies like The Sixth Sense (1999) and The Village  (2004) do you have any suggestions?", "history": ["Black Panther (2018)"], "groundtruth": ["Ocean's 8 (2018)", "Incredibles 2 (2018)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n1 ON t1.primaryName = n1.primaryName\nJOIN title_crew t3 ON t1.directors = t3.directors\nJOIN title_principals t4 ON t1.ordering = t4.ordering\nWHERE t1.genres = 'Drama' AND t2.averageRating > 7 AND t3.job = 'Director' AND t4.category = 'Actor'\nAND t1.startYear BETWEEN 1999 AND 2004\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_ratings tr\n  WHERE tr.tconst = t1.tconst AND tr.numVotes > 1000\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t5\n  WHERE t5.tconst = t1.tconst AND t5.primaryName = 'Blake Lively'\n)\nLIMIT 5\n\n;\n\nThis SQL query will retrieve movies that are dramas, have a high average rating, are directed by the same directors as The Sixth Sense and The Village, and have a primary name that is not Blake Lively. Additionally, the movies must have been released between 1999 and 2004, and have fewer than 1000 votes on the title ratings table. Finally, the query will limit the results to the top 5 movies.\n\nNote that this is just one possible query, and there are many other ways to design a movie recommendation system. The specific query used will depend on the specific requirements and constraints of the system."}
{"id": 23182, "query": "can you recommend a movie", "history": ["Natural Born Killers (1994)", "Fight Club (1999)", "Gone Girl  (2014)"], "groundtruth": ["Inception (2010)"], "output": "SELECT \ntitle_basics.title, title_ratings.averageRating, title_crew.directors, title_principals.characters\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.genres = 'Crime'\nAND title_ratings.numVotes > 1000\nAND title_crew.directors = 'Quentin Tarantino'\nAND title_principals.characters LIKE '%Tom Cruise%'\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query recommends movies to the user based on their input and historical preferences. The query first joins the title_basics table with the title_ratings, title_crew, and title_principals tables to get the necessary information for the recommended movies. It then filters the results to only include movies with the genre 'Crime', more than 1000 votes, directed by Quentin Tarantino, and featuring Tom Cruise. Finally, the results are sorted in descending order by the average rating.\n\nPlease note that this is a hypothetical query and does not actually access any real database."}
{"id": 23191, "query": "I don't mind what genre you recommend. But I do like comedies and horror.", "history": ["Natural Born Killers (1994)", "Fight Club (1999)"], "groundtruth": ["Bringing Out the Dead (1999)", "Choke  (2008)", "The Machinist (2004)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n3 ON t2.primaryName = n3.primaryName\nWHERE t1.genres LIKE '%comedy%' OR t1.genres LIKE '%horror%'\nAND NOT EXISTS (\n  SELECT 1 FROM title_principals\n  WHERE n3.primaryProfession = 'Actor' AND n3.job = 'Director'\n)\nAND t1.startYear <= CURRENT_DATE AND t1.endYear >= CURRENT_DATE\nGROUP BY t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.knownForTitles\nHAVING COUNT(DISTINCT t2.primaryName) > 1\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are either comedies or horror movies, and have at least two actors in common with the user's preferred movies. It will also filter out movies that have been released outside of the current year. The results will be sorted by average rating and number of votes in descending order.\n\nNote that this query assumes that the user's preferred movies are stored in the \"title_ratings\" table with the \"primaryName\" column representing the actor's name. If the preferred movies are stored in a different table or with a different column representing the actor's name, the query will need to be modified accordingly."}
{"id": 23195, "query": "Yes!! Can you recommend me a movie like  Fight Club (1999)?", "history": ["Resident Evil  (2002)", "The Purge (2013)", "Taken  (2008)"], "groundtruth": ["Pet Sematary  (1989)"], "output": "SELECT * FROM (\n  SELECT tconst, titleType, originalTitle, isAdult, startYear, endYear, runtimeMinutes, genres, \n  AVG(rating) AS avg_rating, COUNT(DISTINCT nconst) AS num_votes\n  FROM title_ratings\n  WHERE titleType ='movie' AND originalTitle = 'Fight Club' AND startYear = 1999\n  GROUP BY tconst\n) AS recommended_movies\nWHERE num_votes > 100 AND avg_rating > 7.5\nAND NOT EXISTS (\n  SELECT 1 FROM title_ratings\n  WHERE tconst = recommended_movies.tconst AND nconst = ANY(user_preferences)\n)\nORDER BY avg_rating DESC;\n\n;"}
{"id": 23197, "query": "Hi!! Can you recommend me some movie?? I like movies like The Purge (2013)", "history": ["The Purge (2013)", "Fight Club (1999)", "Natural Born Killers (1994)"], "groundtruth": ["Den of Thieves (2018)", "The Town  (2010)"], "output": "SELECT \n    t.title_basics.title, \n    t.title_basics.primaryTitle, \n    t.title_basics.originalTitle, \n    t.title_basics.isAdult, \n    t.title_basics.startYear, \n    t.title_basics.endYear, \n    t.title_basics.runtimeMinutes, \n    t.title_basics.genres, \n    n.name_basics.primaryName, \n    n.name_basics.birthYear, \n    n.name_basics.deathYear, \n    n.name_basics.primaryProfession, \n    n.name_basics.knownForTitles, \n    c.title_crew.directors, \n    c.title_crew.writers, \n    p.title_principals.ordering, \n    p.title_principals.category, \n    p.title_principals.job, \n    p.title_principals.characters\nFROM \n    title_basics t \nINNER JOIN \n    name_basics n ON t.title_basics.primaryTitle = n.primaryName \nINNER JOIN \n    title_crew c ON t.title_basics.tconst = c.tconst \nINNER JOIN \n    title_principals p ON t.title_basics.tconst = p.tconst \nWHERE \n    t.title_basics.title LIKE '%The Purge%' \n    AND t.title_basics.isAdult = 0 \n    AND t.title_basics.startYear BETWEEN 2000 AND 2020 \n    AND t.title_basics.genres LIKE '%Action%' \n    AND n.name_basics.primaryName NOT IN ('The Purge', 'Fight Club', 'Natural Born Killers') \n    AND NOT EXISTS (\n        SELECT \n            * \n        FROM \n            title_ratings tr \n        WHERE \n            tr.tconst = t.title"}
{"id": 23199, "query": "Hi!! Can you recommend me some movie?? I like movies like The Purge (2013)", "history": ["Fight Club (1999)", "The Town  (2010)", "The Purge (2013)"], "groundtruth": ["Natural Born Killers (1994)"], "output": "SELECT t1.title, t1.primaryTitle, t1.originalTitle, t1.isAdult, t1.startYear, t1.endYear, t1.runtimeMinutes, t1.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres = 'Horror' AND t1.primaryTitle LIKE '%The Purge%'\nAND t2.averageRating > (SELECT AVG(t3.rating)\nFROM title_ratings t3\nWHERE t3.tconst IN (SELECT t4.tconst\nFROM title_basics t4\nWHERE t4.primaryTitle = 'The Purge (2013)'))\nAND NOT EXISTS (SELECT 1\nFROM title_ratings t5\nWHERE t5.tconst = t1.tconst AND t5.numVotes > 100)\nORDER BY t2.averageRating DESC, t1.startYear DESC;\n\nThis SQL query will retrieve movies that are similar to \"The Purge (2013)\" and have a high average rating, but not those with more than 100 votes. The query joins the \"title_basics\" and \"title_ratings\" tables to get the movie information and the ratings, respectively. The \"WHERE\" clause filters the results to only include horror movies with the title \"The Purge\" and the \"AND\" clause filters out movies with more than 100 votes. Finally, the results are sorted in descending order of average rating and start year."}
{"id": 23200, "query": "Hi!! Can you recommend me some movie?? I like movies like The Purge (2013)", "history": ["The Purge (2013)", "Fight Club (1999)", "The Dark Knight  (2008)", "Natural Born Killers (1994)"], "groundtruth": ["Apocalypse Now (1979)", "Inception (2010)"], "output": "SELECT * FROM (\nSELECT t.title_id, t.title, t.genres, t.runtimeMinutes, t.startYear, t.endYear, t.averageRating, t.numVotes, \n       n.name, n.birthYear, n.deathYear, n.primaryProfession, n.knownForTitles,\n       c.category, c.job, c.characters\nFROM title_basics t\nJOIN name_basics n ON t.primaryTitle = n.primaryName\nJOIN title_crew c ON t.directors = c.directors OR t.writers = c.writers\nWHERE t.title LIKE '%The Purge%'\n) AS recommended_movies\nWHERE NOT EXISTS (\n  SELECT 1 FROM title_ratings\n  WHERE user_id = (SELECT u.id FROM users u WHERE u.username = 'user_input')\n  AND title_id = recommended_movies.title_id\n)\nORDER BY recommended_movies.averageRating DESC, recommended_movies.numVotes DESC;\n\n;"}
{"id": 23201, "query": "Hi!! Can you recommend me some movie?? I like movies like The Purge (2013)?", "history": ["White Chicks (2004)", "Snatch  (2000)", "Pineapple Express  (2008)"], "groundtruth": ["Trainspotting  (1996)", "Half Baked (1998)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nWHERE \n    title_basics.primaryTitle LIKE '%The Purge%'  -- User input\n    AND title_ratings.averageRating > (\n        SELECT \n            AVG(title_ratings.averageRating)\n        FROM \n            title_ratings\n            JOIN name_basics ON title_ratings.nconst = name_basics.nconst\n            JOIN title_crew ON title_ratings.tconst = title_crew.tconst\n            JOIN title_principals ON title_ratings.tconst = title_principals.tconst\n        WHERE \n            name_basics.primaryName = 'Ethan Embry'  -- User preference history\n            AND title_crew.directors LIKE '%Frank Coraci%'  -- User preference history\n            AND title_principals.characters LIKE '%White Chicks%'  -- User preference history\n    )\n    AND title_basics.genres LIKE '%Action%'  -- User input\n    AND title_basics.startYear BETWEEN 2010 AND 2020  -- User input\nGROUP BY \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_basics.isAdult,\n    title_basics.startYear,\n    title_basics.endYear,\n    title_basics.runtimeMinutes,\n    title_basics.genres,\n    title_ratings.averageRating,\n    title_ratings.numVotes\nORDER BY \n    title_rat"}
{"id": 23216, "query": "hi, i am good. i was wondering if you could help suggest some good movies for me ?", "history": ["Wonder  (2017)", "The Incredibles (2004)", "Coco  (2017)"], "groundtruth": ["The Boss Baby (2017)", "Home Alone (1990)"], "output": "SELECT t1.title, t1.averageRating, t1.numVotes, t2.primaryName, t2.birthYear, t2.deathYear, t2.primaryProfession, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nJOIN name_basics n3 ON t2.nconst = n3.nconst\nWHERE t1.genres = 'Drama' AND t1.startYear BETWEEN 2000 AND 2019\nAND t2.averageRating > (SELECT AVG(t3.averageRating) FROM title_ratings t3 WHERE t3.nconst = n3.nconst)\nAND t2.numVotes > (SELECT COUNT(*) FROM title_ratings t4 WHERE t4.nconst = n3.nconst)\nAND NOT EXISTS (SELECT 1 FROM title_principals t5 WHERE t5.tconst = t1.tconst AND t5.category = 'Actress')\nAND NOT EXISTS (SELECT 1 FROM title_crew t6 WHERE t6.tconst = t1.tconst AND t6.job = 'Director')\nAND t1.endYear > (SELECT MAX(t7.endYear) FROM title_basics t7 WHERE t7.tconst = t1.tconst)\nAND t1.runtimeMinutes > (SELECT AVG(t8.runtimeMinutes) FROM title_basics t8 WHERE t8.tconst = t1.tconst)\nORDER BY t1.averageRating DESC, t1.numVotes DESC;\n\nThis SQL query will retrieve movies that are classified as dramas, have a high average rating and number of votes, and have not been rated by the user before. It will also exclude movies that have directors or actresses in the crew or principles tables, and exclude movies that are too old or too long. The query will also use subqueries to filter the results based on the user's preference history."}
{"id": 23245, "query": "Hi, I'd like to see something like Toy Story That Time Forgot", "history": ["Seven  (1995)", "Fatal Attraction (1987)"], "groundtruth": ["Edge of Darkness  (2010)", "Zodiac  (2007)", "The Silence of the Lambs  (1991)"], "output": "SELECT t1.title_id, t1.title, t1.original_title, t1.is_adult, t1.start_year, t1.end_year, t1.runtime_minutes, t1.genres, t2.average_rating, t2.num_votes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_id = t2.title_id\nWHERE t1.genres = 'Animation' AND t1.original_title LIKE '%That Time Forgot'\nAND t2.average_rating > (\n    SELECT AVG(t3.rating)\n    FROM title_ratings t3\n    WHERE t3.title_id IN (\n        SELECT t4.title_id\n        FROM title_basics t4\n        WHERE t4.title LIKE '%Seven%' OR t4.title LIKE '%Fatal Attraction%'\n    )\n)\nORDER BY t2.average_rating DESC;\n\nThis SQL query will retrieve movies that are classified as \"Animation\" and have a title that contains the words \"That Time Forgot\". The query will also consider the user's historical preferences, which are movies that are similar to \"Seven\" and \"Fatal Attraction\". The average rating of the movies will be used to rank the results."}
{"id": 23247, "query": "Hi!! Can you recommend me some movies? I like movies like Seven  (1995)", "history": ["Frozen (2013)", "Coco  (2017)", "Finding Dory (2016)"], "groundtruth": ["Moana  (2016)", "Inside Out  (2015)"], "output": "SELECT \n  title_basics.title, \n  title_basics.primaryTitle, \n  title_basics.originalTitle, \n  title_basics.isAdult, \n  title_basics.startYear, \n  title_basics.endYear, \n  title_basics.runtimeMinutes, \n  title_basics.genres, \n  title_ratings.averageRating, \n  title_ratings.numVotes, \n  name_basics.primaryName, \n  name_basics.birthYear, \n  name_basics.deathYear, \n  name_basics.primaryProfession, \n  name_basics.knownForTitles, \n  title_crew.directors, \n  title_crew.writers, \n  title_principals.ordering, \n  title_principals.nconst, \n  title_principals.category, \n  title_principals.job, \n  title_principals.characters\nFROM \n  title_basics \n  JOIN title_ratings ON title_basics.tconst = title_ratings.tconst \n  JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName \n  JOIN title_crew ON title_basics.tconst = title_crew.tconst \n  JOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE \n  title_basics.primaryTitle = 'Seven' AND \n  title_basics.startYear = 1995 AND \n  title_ratings.averageRating > 7 AND \n  title_ratings.numVotes > 100000 AND \n  name_basics.primaryName NOT IN ('Frozen', 'Coco', 'Finding Dory')\nGROUP BY \n  title_basics.title, \n  title_basics.primaryTitle, \n  title_basics.originalTitle, \n  title_basics."}
{"id": 23248, "query": "i need a movie for wath whit my kids", "history": ["What About Bob%3F (1991)", "Lars and the Real Girl (2007)", "Stripes  (1981)", "The Man Who Knew Too Much  (1956)"], "groundtruth": ["Trading Places (1983)"], "output": "SELECT t.title, t.startYear, t.runtimeMinutes, t.genres, c.category, c.job, c.characters\nFROM title_basics t\nJOIN name_basics n ON t.primaryTitle = n.title\nJOIN title_principals p ON t.tconst = p.tconst\nJOIN crew_basics c ON p.directors = c.person_id OR p.writers = c.person_id\nWHERE t.genres = 'Comedy' AND t.startYear >= 1990 AND t.startYear <= 2009\nAND NOT EXISTS (SELECT 1 FROM title_ratings tr WHERE t.tconst = tr.tconst AND tr.averageRating > 7.5)\nAND NOT EXISTS (SELECT 1 FROM name_basics nb WHERE n.primaryName = t.primaryTitle AND nb.birthYear > 1960 AND nb.birthYear < 2000)\nAND EXISTS (SELECT 1 FROM title_principals tp WHERE tp.tconst = t.tconst AND tp.category = 'Actor' AND tp.job = 'Child Actor')\nORDER BY t.startYear, t.runtimeMinutes\nLIMIT 5;\n\nThis SQL query will retrieve movies that are comedies, released between 1990 and 2009, have a rating of less than 7.5, and have child actors. The query will also consider the user's historical preferences, which are movies that are similar to \"What About Bob? (1991)\", \"Lars and the Real Girl (2007)\", \"Stripes (1981)\", and \"The Man Who Knew Too Much (1956)\". The query will return a list of movies that meet these criteria, along with their release year, runtime, genres, and the category and job of the child actors."}
{"id": 23249, "query": "Hi!  I loved What About Bob%3F (1991) Looking for something like that now", "history": ["Halloween  (2007)", "Ring  (1998)"], "groundtruth": ["Friday the 13th  (1980)"], "output": "SELECT t1.title, t1.startYear, t1.runtimeMinutes, t1.genres, t2.primaryName, t2.birthYear, t2.knownForTitles\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.tconst = t2.tconst\nWHERE t1.genres LIKE '%Comedy%'\nAND t2.averageRating > (SELECT AVG(t3.rating) FROM title_ratings t3 WHERE t3.title = 'What About Bob%3F (1991)')\nAND t1.startYear BETWEEN 1990 AND 1999\nAND EXISTS (\n  SELECT 1\n  FROM title_crew t3\n  JOIN name_basics t4 ON t3.directors = t4.primaryName\n  WHERE t3.tconst = t1.tconst AND t4.birthYear = 1950\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_principals t5\n  JOIN name_basics t6 ON t5.category = t6.primaryName\n  WHERE t5.tconst = t1.tconst AND t6.birthYear = 1950\n)\nAND t1.tconst NOT IN (SELECT t7.tconst FROM title_ratings t7 WHERE t7.title IN ('Halloween  (2007)', 'Ring  (1998)'))\nORDER BY t2.averageRating DESC;\n\nThis SQL query will recommend movies to the user based on their input and historical preferences. It will look for movies with a similar genre to \"What About Bob? (1991)\" and a high average rating, while also considering the user's preference for movies released between 1990 and 1999. Additionally, it will filter out movies that are already in the user's preference history and exclude movies that are too similar to \"Halloween (2007)\" and \"Ring (1998)\". Finally, it will order the results by the average rating in descending order."}
{"id": 23250, "query": "i need a movie of horror", "history": ["Toy Story (1995)", "The Secret Life of Pets (2016)", "Ferdinand (2017)"], "groundtruth": ["The Nut Job (2014)", "Maya the Bee  (2014)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes\nFROM \ntitle_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.primaryName = name_basics.primaryName\nJOIN title_crew ON title_basics.directors = title_crew.directors\nJOIN title_principals ON title_basics.ordering = title_principals.ordering\nWHERE \ntitle_basics.genres = 'horror'\nAND title_ratings.averageRating > (\n    SELECT \n    AVG(title_ratings.averageRating)\n    FROM \n    title_ratings\n    WHERE \n    title_ratings.tconst IN (\n        SELECT \n        tconst\n        FROM \n        title_basics\n        WHERE \n        title_basics.genres = 'horror'\n    )\n)\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryProfession NOT IN ('Actor', 'Actress')\nAND title_principals.job NOT IN ('Director', 'Writer')\nAND title_crew.directors NOT IN ('Pixar Animation Studios', 'Illumination')\nORDER BY \ntitle_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are classified as \"horror\" and have an average rating above a certain threshold, based on the historical ratings of similar movies. It will also filter out movies that are not from Pixar Animation Studios or Illumination, and movies that have a primary profession of \"Actor\" or \"Actress\" or job of \"Director\" or \"Writer\". The results will be"}
{"id": 23254, "query": "Hi, I'm in the mood for something like Ferdinand (2017) and The Secret Life of Pets (2016)", "history": ["The Purge: Election Year (2016)", "The Purge (2013)"], "groundtruth": ["Jigsaw (2017)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nFROM \ntitle_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nWHERE \ntitle_basics.title LIKE '%Ferdinand%' OR \ntitle_basics.title LIKE '%The Secret Life of Pets%' OR \ntitle_basics.title LIKE '%The Purge: Election Year%' OR \ntitle_basics.title LIKE '%The Purge%'\nAND title_ratings.averageRating > 6.5\nAND title_ratings.numVotes > 1000\nAND name_basics.primaryName NOT LIKE '%animation%'\nAND name_basics.primaryName NOT LIKE '%documentary%'\nGROUP BY \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.isAdult, \ntitle_basics.startYear, \ntitle_basics.endYear, \ntitle_basics.runtimeMinutes, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_ratings.numVotes, \nname_basics.primaryName, \nname_basics.birthYear, \nname_basics.deathYear, \nname_basics.primaryProfession, \nname_basics.knownForTitles\nORDER BY"}
{"id": 23258, "query": "Hi!! Can you recommend me some movies? I like movies like The Purge (2013)", "history": ["The Purge: Election Year (2016)", "The Purge (2013)", "The Purge: Anarchy (2014)"], "groundtruth": ["Jigsaw (2017)", "It  (2017)"], "output": "SELECT \ntitle_basics.title_id,\ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_basics.genres,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes\n\nFROM title_basics\nJOIN title_ratings ON title_basics.title_id = title_ratings.title_id\nJOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\nJOIN title_crew ON title_basics.title_id = title_crew.title_id\nJOIN title_principals ON title_basics.title_id = title_principals.title_id\n\nWHERE title_basics.primaryTitle LIKE '%The Purge%'\nAND title_ratings.averageRating > 6\nAND title_principals.category = 'actors'\nAND title_principals.job = 'director'\nAND title_principals.characters = 'Frank Grillo'\n\nGROUP BY title_basics.title_id\nHAVING COUNT(title_principals.job) > 1\nORDER BY title_ratings.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"The Purge\" (2013) based on the user's preference history and current input. The query will first join the title_basics, title_ratings, name_basics, title_crew, and title_principals tables to get the required information. Then, it will apply filters to the joined tables based on the user's input and preference history. Finally, it will group the results by the title_id and order them by the average rating in descending order."}
{"id": 23259, "query": "Hi!! Can you recommend me some movies? I like movies like The Purge (2013)", "history": ["Seven  (1995)", "It  (2017)", "Jigsaw (2017)"], "groundtruth": ["The Purge (2013)"], "output": "SELECT \n    t.title,\n    t.titleType,\n    t.primaryTitle,\n    t.originalTitle,\n    t.isAdult,\n    t.startYear,\n    t.endYear,\n    t.runtimeMinutes,\n    t.genres,\n    c.category,\n    c.job,\n    c.characters\nFROM \n    title_basics t\n    JOIN title_ratings tr ON t.tconst = tr.tconst\n    JOIN name_basics n ON t.primaryName = n.primaryName\n    JOIN title_crew c ON t.tconst = c.tconst\nWHERE \n    t.primaryTitle = 'The Purge'\n    AND t.genres = 'Horror'\n    AND EXISTS (\n        SELECT \n            1\n        FROM \n            title_ratings tr2\n        WHERE \n            tr2.tconst = t.tconst\n            AND tr2.averageRating > (\n                SELECT \n                    AVG(tr.averageRating)\n                FROM \n                    title_ratings tr\n                WHERE \n                    tr.tconst = t.tconst\n            )\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_ratings tr2\n        WHERE \n            tr2.tconst = t.tconst\n            AND tr2.averageRating < (\n                SELECT \n                    AVG(tr.averageRating)\n                FROM \n                    title_ratings tr\n                WHERE \n                    tr.tconst = t.tconst\n            )\n    )\n    AND t.startYear BETWEEN '2000-01-01' AND '2022-12-31'\n    AND t.endYear BETWEEN '2000-01-01' AND '2022-12-31'\n    AND t.runtimeMinutes BETWEEN 60 AND 120\n    AND c.category = 'Actors'\n    AND c.job = 'Actor'\n    AND c.characters = 'Male'\nORDER BY"}
{"id": 23260, "query": "Hi!! Can you recommend me some movies? I like movies like Seven  (1995)", "history": ["Frozen (2013)", "Moana  (2016)", "Finding Nemo (2003)", "Coco  (2017)", "Finding Dory (2016)"], "groundtruth": ["Inside Out  (2015)"], "output": "SELECT \ntitle_basics.title, \ntitle_basics.primaryTitle, \ntitle_basics.originalTitle, \ntitle_basics.genres, \ntitle_ratings.averageRating, \ntitle_principals.category, \ntitle_principals.job, \nname_basics.primaryName\n\nFROM title_basics\nINNER JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN name_basics ON title_basics.tconst = name_basics.tconst\nINNER JOIN title_principals ON title_basics.tconst = title_principals.tconst\n\nWHERE title_basics.title LIKE '%Seven%' AND \ntitle_ratings.averageRating > 7 AND \ntitle_principals.category = 'Animation' AND \ntitle_principals.job = 'Director'\n\nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.genres, title_ratings.averageRating, title_principals.category, title_principals.job, name_basics.primaryName\n\nHAVING COUNT(DISTINCT title_principals.job) > 1 AND \nCOUNT(DISTINCT title_principals.category) > 1\n\nORDER BY title_ratings.averageRating DESC, title_basics.primaryTitle ASC;"}
{"id": 23262, "query": "i need a movie for watch with my kids like Finding Dory (2016) or Finding Nemo (2003)", "history": ["It  (2017)", "Ring  (1998)", "Jigsaw (2017)"], "groundtruth": ["Mama  (2013)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name_basics.primaryProfession, title_crew.directors, title_crew.writers, title_principals.ordering, title_principals.category, title_principals.job, title_principals.characters \nFROM title_basics \nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst \nJOIN name_basics ON title_basics.nconst = name_basics.nconst \nJOIN title_crew ON title_basics.tconst = title_crew.tconst \nJOIN title_principals ON title_basics.tconst = title_principals.tconst \nWHERE title_basics.primaryTitle IN ('Finding Dory', 'Finding Nemo') AND title_ratings.averageRating > 7 AND title_ratings.numVotes > 10000 AND name_basics.primaryProfession = 'Director' AND title_crew.directors IN ('Andrew Stanton', 'Lee Unkrich') AND title_principals.category = 'Animated' AND title_principals.job = 'Director' AND title_principals.characters = 'Marlin' \nGROUP BY title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_basics.isAdult, title_basics.startYear, title_basics.endYear, title_basics.runtimeMinutes, title_ratings.averageRating, title_ratings.numVotes, name_basics.primaryName, name_basics.birthYear, name_basics.deathYear, name"}
{"id": 23263, "query": "Hi!! Can you recommend me some movies? I like movies like Ring  (1998)", "history": ["The Purge: Election Year (2016)", "Jigsaw (2017)", "The Purge (2013)"], "groundtruth": ["Scream 4 (2011)"], "output": "SELECT \n    t.title_basics.title,\n    t.title_basics.primaryTitle,\n    t.title_basics.originalTitle,\n    t.title_basics.startYear,\n    t.title_basics.endYear,\n    t.title_basics.runtimeMinutes,\n    t.title_basics.genres,\n    t.title_ratings.averageRating,\n    t.title_ratings.numVotes,\n    n.name_basics.primaryName,\n    n.name_basics.birthYear,\n    n.name_basics.deathYear,\n    n.name_basics.primaryProfession,\n    n.name_basics.knownForTitles\nFROM \n    title_basics t\nINNER JOIN \n    name_basics n ON t.title_basics.primaryTitle = n.primaryName\nWHERE \n    t.title_basics.title LIKE '%Ring%'\n    AND t.title_basics.genres IN ('horror', 'thriller')\n    AND t.title_ratings.averageRating > 6.5\n    AND t.title_ratings.numVotes > 1000\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals\n        WHERE \n            title_principals.title_basics_id = t.title_basics.id\n            AND title_principals.category = 'actor'\n            AND title_principals.job = 'director'\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals\n        WHERE \n            title_principals.title_basics_id = t.title_basics.id\n            AND title_principals.category = 'actor'\n            AND title_principals.job = 'writer'\n    )\n    AND NOT EXISTS (\n        SELECT \n            1\n        FROM \n            title_principals\n        WHERE \n            title_principals.title_basics_id ="}
{"id": 23264, "query": "Hi!! Can you recommend me some movies? I like movies like The Purge (2013)", "history": ["White Chicks (2004)", "Deadpool  (2016)", "Fast & Furious  (2009)"], "groundtruth": ["Wonder Woman  (2009)", "The Fate of the Furious (2017)"], "output": "SELECT \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_ratings.numVotes,\nname_basics.primaryName,\nname_basics.birthYear,\nname_basics.deathYear,\nname_basics.primaryProfession,\nname_basics.knownForTitles,\ntitle_crew.directors,\ntitle_crew.writers,\ntitle_principals.ordering,\ntitle_principals.category,\ntitle_principals.job,\ntitle_principals.characters\n\nFROM \ntitle_basics\nINNER JOIN \ntitle_ratings\nON \ntitle_basics.tconst = title_ratings.tconst\nINNER JOIN \nname_basics\nON \ntitle_basics.nconst = name_basics.nconst\nINNER JOIN \ntitle_crew\nON \ntitle_basics.tconst = title_crew.tconst\nINNER JOIN \ntitle_principals\nON \ntitle_basics.tconst = title_principals.tconst\n\nWHERE \ntitle_basics.title LIKE '%The Purge%'\nAND \ntitle_ratings.averageRating > 6.5\nAND \ntitle_ratings.numVotes > 10000\nAND \nname_basics.primaryName NOT LIKE 'The%'\nAND \ntitle_basics.isAdult = 0\nAND \ntitle_principals.category = 'actors'\n\nGROUP BY \ntitle_basics.title,\ntitle_basics.primaryTitle,\ntitle_basics.originalTitle,\ntitle_basics.isAdult,\ntitle_basics.startYear,\ntitle_basics.endYear,\ntitle_basics.runtimeMinutes,\ntitle_ratings.averageRating,\ntitle_"}
{"id": 23265, "query": "Hi!! Can you recommend me some movies? I like movies like White Chicks (2004)", "history": ["Finding Dory (2016)", "Finding Nemo (2003)", "Deadpool  (2016)"], "groundtruth": ["Deadpool 2  (2018)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.name_basics.primaryName, t2.name_basics.birthYear, t2.name_basics.deathYear, t2.name_basics.primaryProfession, t2.name_basics.knownForTitles\nFROM title_basics t1\nJOIN name_basics t2 ON t1.title_basics.directors = t2.name_basics.nconst\nWHERE t1.title_basics.title LIKE '%White Chicks%'\nAND t1.title_basics.genres = 'Comedy'\nAND t2.name_basics.primaryProfession = 'Actress'\nAND t2.name_basics.knownForTitles = 'Finding Dory (2016)', 'Finding Nemo (2003)', 'Deadpool (2016)'\nGROUP BY t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.name_basics.primaryName, t2.name_basics.birthYear, t2.name_basics.deathYear, t2.name_basics.primaryProfession, t2.name_basics.knownForTitles\nORDER BY t1.title_basics.startYear DESC;\n\nThis SQL query will recommend movies to the user based on their input \"White Chicks\" and their historical preferences \"Finding Dory (2016)\", \"Finding Nemo (2003)\", and \"Deadpool (2016)\". The query first joins the title_basics and name_basics tables"}
{"id": 23281, "query": "I need a child movie, to see it as a family", "history": ["The Lord of the Rings ", "Thor "], "groundtruth": ["Elf  (2003)"], "output": "SELECT title_basics.title, title_basics.primaryTitle, title_basics.originalTitle, title_ratings.averageRating, name_basics.primaryName, title_crew.directors, title_principals.category, title_principals.job\nFROM title_basics\nJOIN title_ratings ON title_basics.tconst = title_ratings.tconst\nJOIN name_basics ON title_basics.nconst = name_basics.nconst\nJOIN title_crew ON title_basics.tconst = title_crew.tconst\nJOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE title_basics.isAdult = 0 -- exclude adult movies\nAND title_ratings.numVotes > 1000 -- only consider movies with more than 1000 votes\nAND title_basics.genres LIKE '%children%' -- only consider movies with \"children\" in their genres\nAND NOT EXISTS (SELECT 1 FROM title_ratings WHERE title_ratings.tconst = title_basics.tconst AND title_ratings.averageRating > 8) -- exclude movies with high ratings (>8) that the user has already seen\nAND title_basics.startYear > 2000 -- only consider movies released after 2000\nAND title_basics.endYear < 2020 -- only consider movies released before 2020\nAND name_basics.birthYear > 1980 -- only consider movies with directors and writers born after 1980\nAND name_basics.deathYear < 2010 -- only consider movies with directors and writers died before 2010\nAND title_principals.category = 'actor' -- only consider movies with actors in the main cast\nAND title_principals.job = 'lead' -- only consider movies with lead actors\n\nWHERE title_basics.title LIKE '%The Lord of the Rings%' OR title_basics.title LIKE '%Thor%';\n\nThis query will return a list of mov"}
{"id": 23294, "query": "Hi!! Can you recommend me some movies? I like movies like Thor ", "history": ["Training Day (2001)", "The Purge (2013)"], "groundtruth": ["The Town  (2010)", "Jason Bourne  (2016)", "Den of Thieves (2018)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,\n    title_crew.directors,\n    title_crew.writers,\n    title_principals.ordering,\n    title_principals.category,\n    title_principals.job,\n    title_principals.characters\nFROM\n    title_basics\nINNER JOIN\n    title_ratings ON title_basics.tconst = title_ratings.tconst\nINNER JOIN\n    name_basics ON title_basics.primaryTitle = name_basics.primaryName\nINNER JOIN\n    title_crew ON title_basics.tconst = title_crew.tconst\nINNER JOIN\n    title_principals ON title_basics.tconst = title_principals.tconst\nWHERE\n    title_basics.title LIKE '%Thor%'\n    AND title_ratings.averageRating > 7\n    AND title_ratings.numVotes > 1000\n    AND name_basics.primaryProfession = 'Actor'\n    AND title_crew.directors = 'Kenneth Branagh'\n    AND title_principals.category = 'Acting'\n    AND title_principals.job = 'Lead Actor'\n    AND title_principals.characters = 'Thor'\nGROUP BY\n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_ratings.averageRating,\n    title_ratings.numVotes,\n    name_basics.primaryName,\n    name_basics.birthYear,\n    name_basics.deathYear,\n    name_basics.primaryProfession,"}
{"id": 23295, "query": "Hi!! Can you recommend me some movies? I like movies like The Purge (2013)", "history": ["Fight Club (1999)", "Pitch Perfect (2012)"], "groundtruth": ["Half Baked (1998)"], "output": "SELECT t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres, t2.averageRating, t2.numVotes\nFROM title_basics t1\nJOIN title_ratings t2 ON t1.title_basics.tconst = t2.tconst\nWHERE t1.genres LIKE '%Action%' AND t1.startYear = 2013\nAND EXISTS (\n  SELECT 1\n  FROM title_basics t3\n  JOIN title_ratings t4 ON t3.title_basics.tconst = t4.tconst\n  WHERE t3.primaryTitle = 'The Purge' AND t4.averageRating > 7\n)\nAND NOT EXISTS (\n  SELECT 1\n  FROM title_basics t5\n  JOIN title_ratings t6 ON t5.title_basics.tconst = t6.tconst\n  WHERE t5.primaryTitle IN ('Fight Club', 'Pitch Perfect') AND t6.averageRating < 7\n)\nGROUP BY t1.title_basics.title, t1.title_basics.primaryTitle, t1.title_basics.originalTitle, t1.title_basics.startYear, t1.title_basics.endYear, t1.title_basics.runtimeMinutes, t1.title_basics.genres\nORDER BY t2.averageRating DESC;\n\nThis SQL query will retrieve movies that are similar to \"The Purge\" (2013) and have a high average rating, while excluding movies that are in the user's disliked titles list. The user's preferred genres are inferred from the movies in their liked titles list. The query uses joins to combine the title_basics and title_ratings tables, and the EXISTS and NOT EXISTS clauses to filter the results based on the user's input and preference history. The GROUP BY clause groups the results by title, and the ORDER"}
{"id": 23298, "query": "Hi!! Can you recommend me some movies? I like movies like Pitch Perfect (2012)", "history": ["The Purge (2013)", "Avenger  (2006)"], "groundtruth": ["The Nightmare Before Christmas (1993)"], "output": "SELECT \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle,\n    title_ratings.averageRating,\n    title_crew.directors,\n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.title LIKE '%Pitch Perfect%'\n    AND title_ratings.numVotes > 1000\n    AND title_crew.directors LIKE '%Jason Moore%'\n    AND title_principals.characters LIKE '%The Bellas%'\n    AND title_basics.endYear > 2012\n    AND title_basics.startYear < 2016\n    AND NOT EXISTS (\n        SELECT \n            * \n        FROM \n            title_basics \n        WHERE \n            title_basics.title = title_basics.originalTitle \n            AND title_basics.tconst = title_ratings.tconst\n            AND title_basics.tconst = title_crew.tconst\n            AND title_basics.tconst = title_principals.tconst\n            AND title_basics.endYear > 2012\n            AND title_basics.startYear < 2016\n            AND title_ratings.numVotes > 1000\n            AND title_crew.directors LIKE '%Jason Moore%'\n            AND title_principals.characters LIKE '%The Bellas%'\n    )\nGROUP BY \n    title_basics.title,\n    title_basics.primaryTitle,\n    title_basics.originalTitle\nORDER BY \n    title_ratings.averageRating DESC;\n\n;"}
{"id": 23299, "query": "Hi!! Can you recommend me some movies? I like movies like The Purge (2013)", "history": ["The President  (2014)", "Taken  (2008)", "Resident Evil  (2002)"], "groundtruth": ["Saw  (2003)"], "output": "SELECT \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes, \n    title_basics.genres, \n    title_ratings.averageRating, \n    title_ratings.numVotes, \n    name_basics.primaryName, \n    name_basics.birthYear, \n    name_basics.deathYear, \n    name_basics.primaryProfession, \n    name_basics.knownForTitles, \n    title_crew.directors, \n    title_crew.writers, \n    title_principals.ordering, \n    title_principals.category, \n    title_principals.job, \n    title_principals.characters\nFROM \n    title_basics\n    JOIN title_ratings ON title_basics.tconst = title_ratings.tconst\n    JOIN name_basics ON title_basics.primaryTitle = name_basics.primaryName\n    JOIN title_crew ON title_basics.tconst = title_crew.tconst\n    JOIN title_principals ON title_basics.tconst = title_principals.tconst\nWHERE \n    title_basics.primaryTitle = 'The Purge' \n    AND title_ratings.averageRating > 6 \n    AND title_ratings.numVotes > 10000\n    AND name_basics.primaryName NOT IN ('The President', 'Taken', 'Resident Evil')\nGROUP BY \n    title_basics.title, \n    title_basics.primaryTitle, \n    title_basics.originalTitle, \n    title_basics.isAdult, \n    title_basics.startYear, \n    title_basics.endYear, \n    title_basics.runtimeMinutes"}
